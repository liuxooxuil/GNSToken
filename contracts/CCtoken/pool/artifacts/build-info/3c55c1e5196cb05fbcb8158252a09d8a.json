{
	"id": "3c55c1e5196cb05fbcb8158252a09d8a",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/CCtoken/pool/CCToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\";\r\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\r\nimport \"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol\";\r\nimport \"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol\";\r\n\r\ncontract CSYDToken is ERC20, Ownable {\r\n    // uint256 public constant TOTAL_SUPPLY = 150_000_000 * 10**18; // 1.5亿枚\r\n    uint256 public constant TOTAL_SUPPLY = 150_000_000 * 10; // 1.5亿枚\r\n    uint256 public constant TEAM_LOCK_PERIOD = 3 * 365 days; // 团队锁仓3年\r\n\r\n    address[] private teamAddresses;\r\n    uint256 public teamLockedUntil;\r\n    address public uniswapPool;\r\n\r\n    constructor(address[] memory _teamAddresses, address _uniswapPool)\r\n        ERC20(\"csyd\", \"CSYD\")\r\n        Ownable(msg.sender)\r\n    {\r\n        require(_teamAddresses.length > 0, \"At least one team address required\");\r\n        teamAddresses = _teamAddresses;\r\n        uniswapPool = _uniswapPool;\r\n\r\n        _mint(msg.sender, TOTAL_SUPPLY * 80 / 100); // 80%流通\r\n        for (uint256 i = 0; i < teamAddresses.length; i++) {\r\n            _mint(teamAddresses[i], TOTAL_SUPPLY * 10 / 100 / teamAddresses.length); // 10%团队\r\n        }\r\n        _mint(address(this), TOTAL_SUPPLY * 10 / 100); // 10%资金池\r\n\r\n        teamLockedUntil = block.timestamp + TEAM_LOCK_PERIOD; // 锁仓设置\r\n    }\r\n\r\n    modifier teamLocked() {\r\n        require(block.timestamp >= teamLockedUntil, \"Team tokens are locked\");\r\n        _;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override teamLocked returns (bool) {\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override teamLocked returns (bool) {\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function getCurrentPrice() public view returns (uint256 price) {\r\n        IUniswapV3Pool pool = IUniswapV3Pool(uniswapPool);\r\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\r\n        price = uint256(sqrtPriceX96) * uint256(sqrtPriceX96) / (2**192); // 计算价格\r\n    }\r\n}"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2 <0.9.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2 <0.9.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.2 <0.9.0;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC-721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC-721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xe820561dd1d9311ddde6bcd77976f6d599f24ecf959a3b3fcfb2c73b2dd32113\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://919e2f2e8746c0589bcfbd16402f928c7795d3f80d3d86e2ba5a711024146f95\",\"dweb:/ipfs/QmWy1EU9L5rpzKMrKZhN65gHrgujkp2QYvRr7szFj7Drjz\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xe820561dd1d9311ddde6bcd77976f6d599f24ecf959a3b3fcfb2c73b2dd32113\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://919e2f2e8746c0589bcfbd16402f928c7795d3f80d3d86e2ba5a711024146f95\",\"dweb:/ipfs/QmWy1EU9L5rpzKMrKZhN65gHrgujkp2QYvRr7szFj7Drjz\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x8af85cd69ade87483e7750ba90a2186e469290cd67a880784ae9926500a2ad95\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e1d973f01d9f0e2a5d5da163eb8818537b668e73bdd15be5a4871c3f5c79e8d\",\"dweb:/ipfs/QmQDmn3XCdyz355PwoSgP3FpZr8yUf5oCSYLzB3ir4vuz7\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xe820561dd1d9311ddde6bcd77976f6d599f24ecf959a3b3fcfb2c73b2dd32113\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://919e2f2e8746c0589bcfbd16402f928c7795d3f80d3d86e2ba5a711024146f95\",\"dweb:/ipfs/QmWy1EU9L5rpzKMrKZhN65gHrgujkp2QYvRr7szFj7Drjz\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xaaa3e860b67a6f15c4b935f74a3111bcde40bac5251d659de10e200fb43e9f84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://840716b2587321d18c8714e65fb9a02b3e524f2b7744040d9ead5b68a5388dfe\",\"dweb:/ipfs/QmU3236QhCG6TF6UX9uSXxHLeQnLzi6Myh6cgonSczbEPZ\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/CCtoken/pool/CCToken.sol": {
				"CSYDToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_teamAddresses",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "_uniswapPool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "TEAM_LOCK_PERIOD",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "TOTAL_SUPPLY",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getCurrentPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "teamLockedUntil",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "uniswapPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/CCtoken/pool/CCToken.sol\":489:2357  contract CSYDToken is ERC20, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/CCtoken/pool/CCToken.sol\":884:1578  constructor(address[] memory _teamAddresses, address _uniswapPool)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":999:1009  msg.sender */\n  caller\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1582:1695  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  0x6373796400000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  0x4353594400000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1656:1661  name_ */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1648:1653  _name */\n  0x03\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  swap1\n  dup2\n  tag_8\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_8:\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1681:1688  symbol_ */\n  dup1\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1671:1678  _symbol */\n  0x04\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  swap1\n  dup2\n  tag_10\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_10:\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1582:1695  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1297:1298  0 */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1273:1285  initialOwner */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_12\n  jumpi\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_13\n  swap2\n  swap1\n  tag_14\n  jump\t// in\ntag_13:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_12:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_15\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  shl(0x20, tag_16)\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  0x20\n  shr\n  jump\t// in\ntag_15:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1225:1412  constructor(address initialOwner) {... */\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1059:1060  0 */\n  0x00\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1035:1049  _teamAddresses */\n  dup3\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1035:1056  _teamAddresses.length */\n  mload\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1035:1060  _teamAddresses.length > 0 */\n  gt\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1027:1099  require(_teamAddresses.length > 0, \"At least one team address required\") */\n  tag_18\n  jumpi\n  mload(0x40)\n  0x08c379a000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_19\n  swap1\n  tag_20\n  jump\t// in\ntag_19:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_18:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1126:1140  _teamAddresses */\n  dup2\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1110:1123  teamAddresses */\n  0x06\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1110:1140  teamAddresses = _teamAddresses */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_21\n  swap3\n  swap2\n  swap1\n  tag_22\n  jump\t// in\ntag_21:\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1165:1177  _uniswapPool */\n  dup1\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1151:1162  uniswapPool */\n  0x08\n  0x00\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1151:1177  uniswapPool = _uniswapPool */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1190:1232  _mint(msg.sender, TOTAL_SUPPLY * 80 / 100) */\n  tag_23\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1196:1206  msg.sender */\n  caller\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1228:1231  100 */\n  0x64\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1223:1225  80 */\n  0x50\n    /* \"contracts/CCtoken/pool/CCToken.sol\":654:670  150_000_000 * 10 */\n  0x59682f00\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1208:1225  TOTAL_SUPPLY * 80 */\n  tag_24\n  swap2\n  swap1\n  tag_25\n  jump\t// in\ntag_24:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1208:1231  TOTAL_SUPPLY * 80 / 100 */\n  tag_26\n  swap2\n  swap1\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1190:1195  _mint */\n  shl(0x20, tag_28)\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1190:1232  _mint(msg.sender, TOTAL_SUPPLY * 80 / 100) */\n  0x20\n  shr\n  jump\t// in\ntag_23:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1261:1270  uint256 i */\n  0x00\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1273:1274  0 */\n  0x00\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1261:1274  uint256 i = 0 */\n  swap1\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1256:1418  for (uint256 i = 0; i < teamAddresses.length; i++) {... */\ntag_29:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1280:1293  teamAddresses */\n  0x06\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1280:1300  teamAddresses.length */\n  dup1\n  sload\n  swap1\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1276:1277  i */\n  dup2\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1276:1300  i < teamAddresses.length */\n  lt\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1256:1418  for (uint256 i = 0; i < teamAddresses.length; i++) {... */\n  iszero\n  tag_30\n  jumpi\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1322:1393  _mint(teamAddresses[i], TOTAL_SUPPLY * 10 / 100 / teamAddresses.length) */\n  tag_32\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1328:1341  teamAddresses */\n  0x06\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1342:1343  i */\n  dup3\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1328:1344  teamAddresses[i] */\n  dup2\n  sload\n  dup2\n  lt\n  tag_33\n  jumpi\n  tag_34\n  tag_35\n  jump\t// in\ntag_34:\ntag_33:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  add\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1372:1385  teamAddresses */\n  0x06\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1372:1392  teamAddresses.length */\n  dup1\n  sload\n  swap1\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1366:1369  100 */\n  0x64\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1361:1363  10 */\n  0x0a\n    /* \"contracts/CCtoken/pool/CCToken.sol\":654:670  150_000_000 * 10 */\n  0x59682f00\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1346:1363  TOTAL_SUPPLY * 10 */\n  tag_37\n  swap2\n  swap1\n  tag_25\n  jump\t// in\ntag_37:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1346:1369  TOTAL_SUPPLY * 10 / 100 */\n  tag_38\n  swap2\n  swap1\n  tag_27\n  jump\t// in\ntag_38:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1346:1392  TOTAL_SUPPLY * 10 / 100 / teamAddresses.length */\n  tag_39\n  swap2\n  swap1\n  tag_27\n  jump\t// in\ntag_39:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1322:1327  _mint */\n  shl(0x20, tag_28)\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1322:1393  _mint(teamAddresses[i], TOTAL_SUPPLY * 10 / 100 / teamAddresses.length) */\n  0x20\n  shr\n  jump\t// in\ntag_32:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1302:1305  i++ */\n  dup1\n  dup1\n  0x01\n  add\n  swap2\n  pop\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1256:1418  for (uint256 i = 0; i < teamAddresses.length; i++) {... */\n  jump(tag_29)\ntag_30:\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1428:1473  _mint(address(this), TOTAL_SUPPLY * 10 / 100) */\n  tag_40\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1442:1446  this */\n  address\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1469:1472  100 */\n  0x64\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1464:1466  10 */\n  0x0a\n    /* \"contracts/CCtoken/pool/CCToken.sol\":654:670  150_000_000 * 10 */\n  0x59682f00\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1449:1466  TOTAL_SUPPLY * 10 */\n  tag_41\n  swap2\n  swap1\n  tag_25\n  jump\t// in\ntag_41:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1449:1472  TOTAL_SUPPLY * 10 / 100 */\n  tag_42\n  swap2\n  swap1\n  tag_27\n  jump\t// in\ntag_42:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1428:1433  _mint */\n  shl(0x20, tag_28)\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1428:1473  _mint(address(this), TOTAL_SUPPLY * 10 / 100) */\n  0x20\n  shr\n  jump\t// in\ntag_40:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":733:745  3 * 365 days */\n  0x05a39a80\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1520:1535  block.timestamp */\n  timestamp\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1520:1554  block.timestamp + TEAM_LOCK_PERIOD */\n  tag_43\n  swap2\n  swap1\n  tag_44\n  jump\t// in\ntag_43:\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1502:1517  teamLockedUntil */\n  0x07\n    /* \"contracts/CCtoken/pool/CCToken.sol\":1502:1554  teamLockedUntil = block.timestamp + TEAM_LOCK_PERIOD */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":884:1578  constructor(address[] memory _teamAddresses, address _uniswapPool)... */\n  pop\n  pop\n    /* \"contracts/CCtoken/pool/CCToken.sol\":489:2357  contract CSYDToken is ERC20, Ownable {... */\n  jump(tag_45)\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_16:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3004:3010  _owner */\n  0x05\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2985:3010  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3029:3037  newOwner */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3020:3026  _owner */\n  0x05\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3083:3091  newOwner */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3073:3081  oldOwner */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7362:7570  function _mint(address account, uint256 value) internal {... */\ntag_28:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7451:7452  0 */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7432:7453  account == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7432:7439  account */\n  dup3\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7432:7453  account == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7428:7519  if (account == address(0)) {... */\n  tag_48\n  jumpi\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7505:7506  0 */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7476:7508  ERC20InvalidReceiver(address(0)) */\n  mload(0x40)\n  0xec442f0500000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_49\n  swap2\n  swap1\n  tag_14\n  jump\t// in\ntag_49:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7428:7519  if (account == address(0)) {... */\ntag_48:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7528:7563  _update(address(0), account, value) */\n  tag_50\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7544:7545  0 */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7548:7555  account */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7557:7562  value */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7528:7535  _update */\n  shl(0x20, tag_51)\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7528:7563  _update(address(0), account, value) */\n  0x20\n  shr\n  jump\t// in\ntag_50:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7362:7570  function _mint(address account, uint256 value) internal {... */\n  pop\n  pop\n  jump\t// out\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5912:7019  function _update(address from, address to, uint256 value) internal virtual {... */\ntag_51:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6017:6018  0 */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6001:6019  from == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6001:6005  from */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6001:6019  from == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5997:6537  if (from == address(0)) {... */\n  tag_53\n  jumpi\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6153:6158  value */\n  dup1\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6137:6149  _totalSupply */\n  0x02\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6137:6158  _totalSupply += value */\n  dup3\n  dup3\n  sload\n  tag_54\n  swap2\n  swap1\n  tag_44\n  jump\t// in\ntag_54:\n  swap3\n  pop\n  pop\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5997:6537  if (from == address(0)) {... */\n  jump(tag_55)\ntag_53:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6189:6208  uint256 fromBalance */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6211:6220  _balances */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6211:6226  _balances[from] */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6221:6225  from */\n  dup6\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6211:6226  _balances[from] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  sload\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6189:6226  uint256 fromBalance = _balances[from] */\n  swap1\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6258:6263  value */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6244:6255  fromBalance */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6244:6263  fromBalance < value */\n  lt\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6240:6355  if (fromBalance < value) {... */\n  iszero\n  tag_56\n  jumpi\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6315:6319  from */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6321:6332  fromBalance */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6334:6339  value */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6290:6340  ERC20InsufficientBalance(from, fromBalance, value) */\n  mload(0x40)\n  0xe450d38c00000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_57\n  swap4\n  swap3\n  swap2\n  swap1\n  tag_58\n  jump\t// in\ntag_57:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6240:6355  if (fromBalance < value) {... */\ntag_56:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6507:6512  value */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6493:6504  fromBalance */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6493:6512  fromBalance - value */\n  sub\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6475:6484  _balances */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6475:6490  _balances[from] */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6485:6489  from */\n  dup7\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6475:6490  _balances[from] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6475:6512  _balances[from] = fromBalance - value */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6175:6537  {... */\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5997:6537  if (from == address(0)) {... */\ntag_55:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6565:6566  0 */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6551:6567  to == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6551:6553  to */\n  dup3\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6551:6567  to == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6547:6972  if (to == address(0)) {... */\n  tag_59\n  jumpi\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6730:6735  value */\n  dup1\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6714:6726  _totalSupply */\n  0x02\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6714:6735  _totalSupply -= value */\n  dup3\n  dup3\n  sload\n  sub\n  swap3\n  pop\n  pop\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6547:6972  if (to == address(0)) {... */\n  jump(tag_60)\ntag_59:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6942:6947  value */\n  dup1\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6925:6934  _balances */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6925:6938  _balances[to] */\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6935:6937  to */\n  dup5\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6925:6938  _balances[to] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  0x00\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6925:6947  _balances[to] += value */\n  dup3\n  dup3\n  sload\n  add\n  swap3\n  pop\n  pop\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6547:6972  if (to == address(0)) {... */\ntag_60:\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7002:7004  to */\n  dup2\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6987:7012  Transfer(from, to, value) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6996:7000  from */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6987:7012  Transfer(from, to, value) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7006:7011  value */\n  dup4\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6987:7012  Transfer(from, to, value) */\n  mload(0x40)\n  tag_61\n  swap2\n  swap1\n  tag_62\n  jump\t// in\ntag_61:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5912:7019  function _update(address from, address to, uint256 value) internal virtual {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/CCtoken/pool/CCToken.sol\":489:2357  contract CSYDToken is ERC20, Ownable {... */\ntag_22:\n  dup3\n  dup1\n  sload\n  dup3\n  dup3\n  sstore\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  dup2\n  add\n  swap3\n  dup3\n  iszero\n  tag_63\n  jumpi\n  swap2\n  0x20\n  mul\n  dup3\n  add\ntag_64:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_65\n  jumpi\n  dup3\n  mload\n  dup3\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_64)\ntag_65:\ntag_63:\n  pop\n  swap1\n  pop\n  tag_66\n  swap2\n  swap1\n  tag_67\n  jump\t// in\ntag_66:\n  pop\n  swap1\n  jump\t// out\ntag_67:\ntag_68:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_69\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_68)\ntag_69:\n  pop\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":7:82   */\ntag_70:\n    /* \"#utility.yul\":40:46   */\n  0x00\n    /* \"#utility.yul\":73:75   */\n  0x40\n    /* \"#utility.yul\":67:76   */\n  mload\n    /* \"#utility.yul\":57:76   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:82   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_71:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  0x00\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":211:328   */\ntag_72:\n    /* \"#utility.yul\":320:321   */\n  0x00\n    /* \"#utility.yul\":317:318   */\n  0x00\n    /* \"#utility.yul\":310:322   */\n  revert\n    /* \"#utility.yul\":334:451   */\ntag_73:\n    /* \"#utility.yul\":443:444   */\n  0x00\n    /* \"#utility.yul\":440:441   */\n  0x00\n    /* \"#utility.yul\":433:445   */\n  revert\n    /* \"#utility.yul\":457:559   */\ntag_74:\n    /* \"#utility.yul\":498:504   */\n  0x00\n    /* \"#utility.yul\":549:551   */\n  0x1f\n    /* \"#utility.yul\":545:552   */\n  not\n    /* \"#utility.yul\":540:542   */\n  0x1f\n    /* \"#utility.yul\":533:538   */\n  dup4\n    /* \"#utility.yul\":529:543   */\n  add\n    /* \"#utility.yul\":525:553   */\n  and\n    /* \"#utility.yul\":515:553   */\n  swap1\n  pop\n    /* \"#utility.yul\":457:559   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":565:745   */\ntag_75:\n    /* \"#utility.yul\":613:690   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":610:611   */\n  0x00\n    /* \"#utility.yul\":603:691   */\n  mstore\n    /* \"#utility.yul\":710:714   */\n  0x41\n    /* \"#utility.yul\":707:708   */\n  0x04\n    /* \"#utility.yul\":700:715   */\n  mstore\n    /* \"#utility.yul\":734:738   */\n  0x24\n    /* \"#utility.yul\":731:732   */\n  0x00\n    /* \"#utility.yul\":724:739   */\n  revert\n    /* \"#utility.yul\":751:1032   */\ntag_76:\n    /* \"#utility.yul\":834:861   */\n  tag_120\n    /* \"#utility.yul\":856:860   */\n  dup3\n    /* \"#utility.yul\":834:861   */\n  tag_74\n  jump\t// in\ntag_120:\n    /* \"#utility.yul\":826:832   */\n  dup2\n    /* \"#utility.yul\":822:862   */\n  add\n    /* \"#utility.yul\":964:970   */\n  dup2\n    /* \"#utility.yul\":952:962   */\n  dup2\n    /* \"#utility.yul\":949:971   */\n  lt\n    /* \"#utility.yul\":928:946   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":916:926   */\n  dup3\n    /* \"#utility.yul\":913:947   */\n  gt\n    /* \"#utility.yul\":910:972   */\n  or\n    /* \"#utility.yul\":907:995   */\n  iszero\n  tag_121\n  jumpi\n    /* \"#utility.yul\":975:993   */\n  tag_122\n  tag_75\n  jump\t// in\ntag_122:\n    /* \"#utility.yul\":907:995   */\ntag_121:\n    /* \"#utility.yul\":1015:1025   */\n  dup1\n    /* \"#utility.yul\":1011:1013   */\n  0x40\n    /* \"#utility.yul\":1004:1026   */\n  mstore\n    /* \"#utility.yul\":794:1032   */\n  pop\n    /* \"#utility.yul\":751:1032   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1038:1167   */\ntag_77:\n    /* \"#utility.yul\":1072:1078   */\n  0x00\n    /* \"#utility.yul\":1099:1119   */\n  tag_124\n  tag_70\n  jump\t// in\ntag_124:\n    /* \"#utility.yul\":1089:1119   */\n  swap1\n  pop\n    /* \"#utility.yul\":1128:1161   */\n  tag_125\n    /* \"#utility.yul\":1156:1160   */\n  dup3\n    /* \"#utility.yul\":1148:1154   */\n  dup3\n    /* \"#utility.yul\":1128:1161   */\n  tag_76\n  jump\t// in\ntag_125:\n    /* \"#utility.yul\":1038:1167   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1173:1484   */\ntag_78:\n    /* \"#utility.yul\":1250:1254   */\n  0x00\n    /* \"#utility.yul\":1340:1358   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1332:1338   */\n  dup3\n    /* \"#utility.yul\":1329:1359   */\n  gt\n    /* \"#utility.yul\":1326:1382   */\n  iszero\n  tag_127\n  jumpi\n    /* \"#utility.yul\":1362:1380   */\n  tag_128\n  tag_75\n  jump\t// in\ntag_128:\n    /* \"#utility.yul\":1326:1382   */\ntag_127:\n    /* \"#utility.yul\":1412:1416   */\n  0x20\n    /* \"#utility.yul\":1404:1410   */\n  dup3\n    /* \"#utility.yul\":1400:1417   */\n  mul\n    /* \"#utility.yul\":1392:1417   */\n  swap1\n  pop\n    /* \"#utility.yul\":1472:1476   */\n  0x20\n    /* \"#utility.yul\":1466:1470   */\n  dup2\n    /* \"#utility.yul\":1462:1477   */\n  add\n    /* \"#utility.yul\":1454:1477   */\n  swap1\n  pop\n    /* \"#utility.yul\":1173:1484   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1490:1607   */\ntag_79:\n    /* \"#utility.yul\":1599:1600   */\n  0x00\n    /* \"#utility.yul\":1596:1597   */\n  0x00\n    /* \"#utility.yul\":1589:1601   */\n  revert\n    /* \"#utility.yul\":1613:1739   */\ntag_80:\n    /* \"#utility.yul\":1650:1657   */\n  0x00\n    /* \"#utility.yul\":1690:1732   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":1683:1688   */\n  dup3\n    /* \"#utility.yul\":1679:1733   */\n  and\n    /* \"#utility.yul\":1668:1733   */\n  swap1\n  pop\n    /* \"#utility.yul\":1613:1739   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1745:1841   */\ntag_81:\n    /* \"#utility.yul\":1782:1789   */\n  0x00\n    /* \"#utility.yul\":1811:1835   */\n  tag_132\n    /* \"#utility.yul\":1829:1834   */\n  dup3\n    /* \"#utility.yul\":1811:1835   */\n  tag_80\n  jump\t// in\ntag_132:\n    /* \"#utility.yul\":1800:1835   */\n  swap1\n  pop\n    /* \"#utility.yul\":1745:1841   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1847:1969   */\ntag_82:\n    /* \"#utility.yul\":1920:1944   */\n  tag_134\n    /* \"#utility.yul\":1938:1943   */\n  dup2\n    /* \"#utility.yul\":1920:1944   */\n  tag_81\n  jump\t// in\ntag_134:\n    /* \"#utility.yul\":1913:1918   */\n  dup2\n    /* \"#utility.yul\":1910:1945   */\n  eq\n    /* \"#utility.yul\":1900:1963   */\n  tag_135\n  jumpi\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1956:1957   */\n  0x00\n    /* \"#utility.yul\":1949:1961   */\n  revert\n    /* \"#utility.yul\":1900:1963   */\ntag_135:\n    /* \"#utility.yul\":1847:1969   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1975:2118   */\ntag_83:\n    /* \"#utility.yul\":2032:2037   */\n  0x00\n    /* \"#utility.yul\":2063:2069   */\n  dup2\n    /* \"#utility.yul\":2057:2070   */\n  mload\n    /* \"#utility.yul\":2048:2070   */\n  swap1\n  pop\n    /* \"#utility.yul\":2079:2112   */\n  tag_137\n    /* \"#utility.yul\":2106:2111   */\n  dup2\n    /* \"#utility.yul\":2079:2112   */\n  tag_82\n  jump\t// in\ntag_137:\n    /* \"#utility.yul\":1975:2118   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2141:2873   */\ntag_84:\n    /* \"#utility.yul\":2248:2253   */\n  0x00\n    /* \"#utility.yul\":2273:2354   */\n  tag_139\n    /* \"#utility.yul\":2289:2353   */\n  tag_140\n    /* \"#utility.yul\":2346:2352   */\n  dup5\n    /* \"#utility.yul\":2289:2353   */\n  tag_78\n  jump\t// in\ntag_140:\n    /* \"#utility.yul\":2273:2354   */\n  tag_77\n  jump\t// in\ntag_139:\n    /* \"#utility.yul\":2264:2354   */\n  swap1\n  pop\n    /* \"#utility.yul\":2374:2379   */\n  dup1\n    /* \"#utility.yul\":2403:2409   */\n  dup4\n    /* \"#utility.yul\":2396:2401   */\n  dup3\n    /* \"#utility.yul\":2389:2410   */\n  mstore\n    /* \"#utility.yul\":2437:2441   */\n  0x20\n    /* \"#utility.yul\":2430:2435   */\n  dup3\n    /* \"#utility.yul\":2426:2442   */\n  add\n    /* \"#utility.yul\":2419:2442   */\n  swap1\n  pop\n    /* \"#utility.yul\":2490:2494   */\n  0x20\n    /* \"#utility.yul\":2482:2488   */\n  dup5\n    /* \"#utility.yul\":2478:2495   */\n  mul\n    /* \"#utility.yul\":2470:2476   */\n  dup4\n    /* \"#utility.yul\":2466:2496   */\n  add\n    /* \"#utility.yul\":2519:2522   */\n  dup6\n    /* \"#utility.yul\":2511:2517   */\n  dup2\n    /* \"#utility.yul\":2508:2523   */\n  gt\n    /* \"#utility.yul\":2505:2627   */\n  iszero\n  tag_141\n  jumpi\n    /* \"#utility.yul\":2538:2617   */\n  tag_142\n  tag_79\n  jump\t// in\ntag_142:\n    /* \"#utility.yul\":2505:2627   */\ntag_141:\n    /* \"#utility.yul\":2653:2659   */\n  dup4\n    /* \"#utility.yul\":2636:2867   */\ntag_143:\n    /* \"#utility.yul\":2670:2676   */\n  dup2\n    /* \"#utility.yul\":2665:2668   */\n  dup2\n    /* \"#utility.yul\":2662:2677   */\n  lt\n    /* \"#utility.yul\":2636:2867   */\n  iszero\n  tag_145\n  jumpi\n    /* \"#utility.yul\":2745:2748   */\n  dup1\n    /* \"#utility.yul\":2774:2822   */\n  tag_146\n    /* \"#utility.yul\":2818:2821   */\n  dup9\n    /* \"#utility.yul\":2806:2816   */\n  dup3\n    /* \"#utility.yul\":2774:2822   */\n  tag_83\n  jump\t// in\ntag_146:\n    /* \"#utility.yul\":2769:2772   */\n  dup5\n    /* \"#utility.yul\":2762:2823   */\n  mstore\n    /* \"#utility.yul\":2852:2856   */\n  0x20\n    /* \"#utility.yul\":2847:2850   */\n  dup5\n    /* \"#utility.yul\":2843:2857   */\n  add\n    /* \"#utility.yul\":2836:2857   */\n  swap4\n  pop\n    /* \"#utility.yul\":2712:2867   */\n  pop\n    /* \"#utility.yul\":2696:2700   */\n  0x20\n    /* \"#utility.yul\":2691:2694   */\n  dup2\n    /* \"#utility.yul\":2687:2701   */\n  add\n    /* \"#utility.yul\":2680:2701   */\n  swap1\n  pop\n    /* \"#utility.yul\":2636:2867   */\n  jump(tag_143)\ntag_145:\n    /* \"#utility.yul\":2640:2661   */\n  pop\n    /* \"#utility.yul\":2254:2873   */\n  pop\n  pop\n    /* \"#utility.yul\":2141:2873   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2896:3281   */\ntag_85:\n    /* \"#utility.yul\":2978:2983   */\n  0x00\n    /* \"#utility.yul\":3027:3030   */\n  dup3\n    /* \"#utility.yul\":3020:3024   */\n  0x1f\n    /* \"#utility.yul\":3012:3018   */\n  dup4\n    /* \"#utility.yul\":3008:3025   */\n  add\n    /* \"#utility.yul\":3004:3031   */\n  slt\n    /* \"#utility.yul\":2994:3116   */\n  tag_148\n  jumpi\n    /* \"#utility.yul\":3035:3114   */\n  tag_149\n  tag_73\n  jump\t// in\ntag_149:\n    /* \"#utility.yul\":2994:3116   */\ntag_148:\n    /* \"#utility.yul\":3145:3151   */\n  dup2\n    /* \"#utility.yul\":3139:3152   */\n  mload\n    /* \"#utility.yul\":3170:3275   */\n  tag_150\n    /* \"#utility.yul\":3271:3274   */\n  dup5\n    /* \"#utility.yul\":3263:3269   */\n  dup3\n    /* \"#utility.yul\":3256:3260   */\n  0x20\n    /* \"#utility.yul\":3248:3254   */\n  dup7\n    /* \"#utility.yul\":3244:3261   */\n  add\n    /* \"#utility.yul\":3170:3275   */\n  tag_84\n  jump\t// in\ntag_150:\n    /* \"#utility.yul\":3161:3275   */\n  swap2\n  pop\n    /* \"#utility.yul\":2984:3281   */\n  pop\n    /* \"#utility.yul\":2896:3281   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3287:3997   */\ntag_3:\n    /* \"#utility.yul\":3391:3397   */\n  0x00\n    /* \"#utility.yul\":3399:3405   */\n  0x00\n    /* \"#utility.yul\":3448:3450   */\n  0x40\n    /* \"#utility.yul\":3436:3445   */\n  dup4\n    /* \"#utility.yul\":3427:3434   */\n  dup6\n    /* \"#utility.yul\":3423:3446   */\n  sub\n    /* \"#utility.yul\":3419:3451   */\n  slt\n    /* \"#utility.yul\":3416:3535   */\n  iszero\n  tag_152\n  jumpi\n    /* \"#utility.yul\":3454:3533   */\n  tag_153\n  tag_71\n  jump\t// in\ntag_153:\n    /* \"#utility.yul\":3416:3535   */\ntag_152:\n    /* \"#utility.yul\":3595:3596   */\n  0x00\n    /* \"#utility.yul\":3584:3593   */\n  dup4\n    /* \"#utility.yul\":3580:3597   */\n  add\n    /* \"#utility.yul\":3574:3598   */\n  mload\n    /* \"#utility.yul\":3625:3643   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":3617:3623   */\n  dup2\n    /* \"#utility.yul\":3614:3644   */\n  gt\n    /* \"#utility.yul\":3611:3728   */\n  iszero\n  tag_154\n  jumpi\n    /* \"#utility.yul\":3647:3726   */\n  tag_155\n  tag_72\n  jump\t// in\ntag_155:\n    /* \"#utility.yul\":3611:3728   */\ntag_154:\n    /* \"#utility.yul\":3752:3841   */\n  tag_156\n    /* \"#utility.yul\":3833:3840   */\n  dup6\n    /* \"#utility.yul\":3824:3830   */\n  dup3\n    /* \"#utility.yul\":3813:3822   */\n  dup7\n    /* \"#utility.yul\":3809:3831   */\n  add\n    /* \"#utility.yul\":3752:3841   */\n  tag_85\n  jump\t// in\ntag_156:\n    /* \"#utility.yul\":3742:3841   */\n  swap3\n  pop\n    /* \"#utility.yul\":3545:3851   */\n  pop\n    /* \"#utility.yul\":3890:3892   */\n  0x20\n    /* \"#utility.yul\":3916:3980   */\n  tag_157\n    /* \"#utility.yul\":3972:3979   */\n  dup6\n    /* \"#utility.yul\":3963:3969   */\n  dup3\n    /* \"#utility.yul\":3952:3961   */\n  dup7\n    /* \"#utility.yul\":3948:3970   */\n  add\n    /* \"#utility.yul\":3916:3980   */\n  tag_83\n  jump\t// in\ntag_157:\n    /* \"#utility.yul\":3906:3980   */\n  swap2\n  pop\n    /* \"#utility.yul\":3861:3990   */\n  pop\n    /* \"#utility.yul\":3287:3997   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4003:4102   */\ntag_86:\n    /* \"#utility.yul\":4055:4061   */\n  0x00\n    /* \"#utility.yul\":4089:4094   */\n  dup2\n    /* \"#utility.yul\":4083:4095   */\n  mload\n    /* \"#utility.yul\":4073:4095   */\n  swap1\n  pop\n    /* \"#utility.yul\":4003:4102   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4108:4288   */\ntag_87:\n    /* \"#utility.yul\":4156:4233   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":4153:4154   */\n  0x00\n    /* \"#utility.yul\":4146:4234   */\n  mstore\n    /* \"#utility.yul\":4253:4257   */\n  0x22\n    /* \"#utility.yul\":4250:4251   */\n  0x04\n    /* \"#utility.yul\":4243:4258   */\n  mstore\n    /* \"#utility.yul\":4277:4281   */\n  0x24\n    /* \"#utility.yul\":4274:4275   */\n  0x00\n    /* \"#utility.yul\":4267:4282   */\n  revert\n    /* \"#utility.yul\":4294:4614   */\ntag_88:\n    /* \"#utility.yul\":4338:4344   */\n  0x00\n    /* \"#utility.yul\":4375:4376   */\n  0x02\n    /* \"#utility.yul\":4369:4373   */\n  dup3\n    /* \"#utility.yul\":4365:4377   */\n  div\n    /* \"#utility.yul\":4355:4377   */\n  swap1\n  pop\n    /* \"#utility.yul\":4422:4423   */\n  0x01\n    /* \"#utility.yul\":4416:4420   */\n  dup3\n    /* \"#utility.yul\":4412:4424   */\n  and\n    /* \"#utility.yul\":4443:4461   */\n  dup1\n    /* \"#utility.yul\":4433:4514   */\n  tag_161\n  jumpi\n    /* \"#utility.yul\":4499:4503   */\n  0x7f\n    /* \"#utility.yul\":4491:4497   */\n  dup3\n    /* \"#utility.yul\":4487:4504   */\n  and\n    /* \"#utility.yul\":4477:4504   */\n  swap2\n  pop\n    /* \"#utility.yul\":4433:4514   */\ntag_161:\n    /* \"#utility.yul\":4561:4563   */\n  0x20\n    /* \"#utility.yul\":4553:4559   */\n  dup3\n    /* \"#utility.yul\":4550:4564   */\n  lt\n    /* \"#utility.yul\":4530:4548   */\n  dup2\n    /* \"#utility.yul\":4527:4565   */\n  sub\n    /* \"#utility.yul\":4524:4608   */\n  tag_162\n  jumpi\n    /* \"#utility.yul\":4580:4598   */\n  tag_163\n  tag_87\n  jump\t// in\ntag_163:\n    /* \"#utility.yul\":4524:4608   */\ntag_162:\n    /* \"#utility.yul\":4345:4614   */\n  pop\n    /* \"#utility.yul\":4294:4614   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4620:4761   */\ntag_89:\n    /* \"#utility.yul\":4669:4673   */\n  0x00\n    /* \"#utility.yul\":4692:4695   */\n  dup2\n    /* \"#utility.yul\":4684:4695   */\n  swap1\n  pop\n    /* \"#utility.yul\":4715:4718   */\n  dup2\n    /* \"#utility.yul\":4712:4713   */\n  0x00\n    /* \"#utility.yul\":4705:4719   */\n  mstore\n    /* \"#utility.yul\":4749:4753   */\n  0x20\n    /* \"#utility.yul\":4746:4747   */\n  0x00\n    /* \"#utility.yul\":4736:4754   */\n  keccak256\n    /* \"#utility.yul\":4728:4754   */\n  swap1\n  pop\n    /* \"#utility.yul\":4620:4761   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4767:4860   */\ntag_90:\n    /* \"#utility.yul\":4804:4810   */\n  0x00\n    /* \"#utility.yul\":4851:4853   */\n  0x20\n    /* \"#utility.yul\":4846:4848   */\n  0x1f\n    /* \"#utility.yul\":4839:4844   */\n  dup4\n    /* \"#utility.yul\":4835:4849   */\n  add\n    /* \"#utility.yul\":4831:4854   */\n  div\n    /* \"#utility.yul\":4821:4854   */\n  swap1\n  pop\n    /* \"#utility.yul\":4767:4860   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4866:4973   */\ntag_91:\n    /* \"#utility.yul\":4910:4918   */\n  0x00\n    /* \"#utility.yul\":4960:4965   */\n  dup3\n    /* \"#utility.yul\":4954:4958   */\n  dup3\n    /* \"#utility.yul\":4950:4966   */\n  shl\n    /* \"#utility.yul\":4929:4966   */\n  swap1\n  pop\n    /* \"#utility.yul\":4866:4973   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4979:5372   */\ntag_92:\n    /* \"#utility.yul\":5048:5054   */\n  0x00\n    /* \"#utility.yul\":5098:5099   */\n  0x08\n    /* \"#utility.yul\":5086:5096   */\n  dup4\n    /* \"#utility.yul\":5082:5100   */\n  mul\n    /* \"#utility.yul\":5121:5218   */\n  tag_168\n    /* \"#utility.yul\":5151:5217   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":5140:5149   */\n  dup3\n    /* \"#utility.yul\":5121:5218   */\n  tag_91\n  jump\t// in\ntag_168:\n    /* \"#utility.yul\":5239:5278   */\n  tag_169\n    /* \"#utility.yul\":5269:5277   */\n  dup7\n    /* \"#utility.yul\":5258:5267   */\n  dup4\n    /* \"#utility.yul\":5239:5278   */\n  tag_91\n  jump\t// in\ntag_169:\n    /* \"#utility.yul\":5227:5278   */\n  swap6\n  pop\n    /* \"#utility.yul\":5311:5315   */\n  dup1\n    /* \"#utility.yul\":5307:5316   */\n  not\n    /* \"#utility.yul\":5300:5305   */\n  dup5\n    /* \"#utility.yul\":5296:5317   */\n  and\n    /* \"#utility.yul\":5287:5317   */\n  swap4\n  pop\n    /* \"#utility.yul\":5360:5364   */\n  dup1\n    /* \"#utility.yul\":5350:5358   */\n  dup7\n    /* \"#utility.yul\":5346:5365   */\n  and\n    /* \"#utility.yul\":5339:5344   */\n  dup5\n    /* \"#utility.yul\":5336:5366   */\n  or\n    /* \"#utility.yul\":5326:5366   */\n  swap3\n  pop\n    /* \"#utility.yul\":5055:5372   */\n  pop\n  pop\n    /* \"#utility.yul\":4979:5372   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5378:5455   */\ntag_93:\n    /* \"#utility.yul\":5415:5422   */\n  0x00\n    /* \"#utility.yul\":5444:5449   */\n  dup2\n    /* \"#utility.yul\":5433:5449   */\n  swap1\n  pop\n    /* \"#utility.yul\":5378:5455   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5461:5521   */\ntag_94:\n    /* \"#utility.yul\":5489:5492   */\n  0x00\n    /* \"#utility.yul\":5510:5515   */\n  dup2\n    /* \"#utility.yul\":5503:5515   */\n  swap1\n  pop\n    /* \"#utility.yul\":5461:5521   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5527:5669   */\ntag_95:\n    /* \"#utility.yul\":5577:5586   */\n  0x00\n    /* \"#utility.yul\":5610:5663   */\n  tag_173\n    /* \"#utility.yul\":5628:5662   */\n  tag_174\n    /* \"#utility.yul\":5637:5661   */\n  tag_175\n    /* \"#utility.yul\":5655:5660   */\n  dup5\n    /* \"#utility.yul\":5637:5661   */\n  tag_93\n  jump\t// in\ntag_175:\n    /* \"#utility.yul\":5628:5662   */\n  tag_94\n  jump\t// in\ntag_174:\n    /* \"#utility.yul\":5610:5663   */\n  tag_93\n  jump\t// in\ntag_173:\n    /* \"#utility.yul\":5597:5663   */\n  swap1\n  pop\n    /* \"#utility.yul\":5527:5669   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5675:5750   */\ntag_96:\n    /* \"#utility.yul\":5718:5721   */\n  0x00\n    /* \"#utility.yul\":5739:5744   */\n  dup2\n    /* \"#utility.yul\":5732:5744   */\n  swap1\n  pop\n    /* \"#utility.yul\":5675:5750   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5756:6025   */\ntag_97:\n    /* \"#utility.yul\":5866:5905   */\n  tag_178\n    /* \"#utility.yul\":5897:5904   */\n  dup4\n    /* \"#utility.yul\":5866:5905   */\n  tag_95\n  jump\t// in\ntag_178:\n    /* \"#utility.yul\":5927:6018   */\n  tag_179\n    /* \"#utility.yul\":5976:6017   */\n  tag_180\n    /* \"#utility.yul\":6000:6016   */\n  dup3\n    /* \"#utility.yul\":5976:6017   */\n  tag_96\n  jump\t// in\ntag_180:\n    /* \"#utility.yul\":5968:5974   */\n  dup5\n    /* \"#utility.yul\":5961:5965   */\n  dup5\n    /* \"#utility.yul\":5955:5966   */\n  sload\n    /* \"#utility.yul\":5927:6018   */\n  tag_92\n  jump\t// in\ntag_179:\n    /* \"#utility.yul\":5921:5925   */\n  dup3\n    /* \"#utility.yul\":5914:6019   */\n  sstore\n    /* \"#utility.yul\":5832:6025   */\n  pop\n    /* \"#utility.yul\":5756:6025   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6031:6104   */\ntag_98:\n    /* \"#utility.yul\":6076:6079   */\n  0x00\n    /* \"#utility.yul\":6097:6098   */\n  0x00\n    /* \"#utility.yul\":6090:6098   */\n  swap1\n  pop\n    /* \"#utility.yul\":6031:6104   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":6110:6299   */\ntag_99:\n    /* \"#utility.yul\":6187:6219   */\n  tag_183\n  tag_98\n  jump\t// in\ntag_183:\n    /* \"#utility.yul\":6228:6293   */\n  tag_184\n    /* \"#utility.yul\":6286:6292   */\n  dup2\n    /* \"#utility.yul\":6278:6284   */\n  dup5\n    /* \"#utility.yul\":6272:6276   */\n  dup5\n    /* \"#utility.yul\":6228:6293   */\n  tag_97\n  jump\t// in\ntag_184:\n    /* \"#utility.yul\":6163:6299   */\n  pop\n    /* \"#utility.yul\":6110:6299   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6305:6491   */\ntag_100:\n    /* \"#utility.yul\":6365:6485   */\ntag_186:\n    /* \"#utility.yul\":6382:6385   */\n  dup2\n    /* \"#utility.yul\":6375:6380   */\n  dup2\n    /* \"#utility.yul\":6372:6386   */\n  lt\n    /* \"#utility.yul\":6365:6485   */\n  iszero\n  tag_188\n  jumpi\n    /* \"#utility.yul\":6436:6475   */\n  tag_189\n    /* \"#utility.yul\":6473:6474   */\n  0x00\n    /* \"#utility.yul\":6466:6471   */\n  dup3\n    /* \"#utility.yul\":6436:6475   */\n  tag_99\n  jump\t// in\ntag_189:\n    /* \"#utility.yul\":6409:6410   */\n  0x01\n    /* \"#utility.yul\":6402:6407   */\n  dup2\n    /* \"#utility.yul\":6398:6411   */\n  add\n    /* \"#utility.yul\":6389:6411   */\n  swap1\n  pop\n    /* \"#utility.yul\":6365:6485   */\n  jump(tag_186)\ntag_188:\n    /* \"#utility.yul\":6305:6491   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6497:7040   */\ntag_101:\n    /* \"#utility.yul\":6598:6600   */\n  0x1f\n    /* \"#utility.yul\":6593:6596   */\n  dup3\n    /* \"#utility.yul\":6590:6601   */\n  gt\n    /* \"#utility.yul\":6587:7033   */\n  iszero\n  tag_191\n  jumpi\n    /* \"#utility.yul\":6632:6670   */\n  tag_192\n    /* \"#utility.yul\":6664:6669   */\n  dup2\n    /* \"#utility.yul\":6632:6670   */\n  tag_89\n  jump\t// in\ntag_192:\n    /* \"#utility.yul\":6716:6745   */\n  tag_193\n    /* \"#utility.yul\":6734:6744   */\n  dup5\n    /* \"#utility.yul\":6716:6745   */\n  tag_90\n  jump\t// in\ntag_193:\n    /* \"#utility.yul\":6706:6714   */\n  dup2\n    /* \"#utility.yul\":6702:6746   */\n  add\n    /* \"#utility.yul\":6899:6901   */\n  0x20\n    /* \"#utility.yul\":6887:6897   */\n  dup6\n    /* \"#utility.yul\":6884:6902   */\n  lt\n    /* \"#utility.yul\":6881:6930   */\n  iszero\n  tag_194\n  jumpi\n    /* \"#utility.yul\":6920:6928   */\n  dup2\n    /* \"#utility.yul\":6905:6928   */\n  swap1\n  pop\n    /* \"#utility.yul\":6881:6930   */\ntag_194:\n    /* \"#utility.yul\":6943:7023   */\n  tag_195\n    /* \"#utility.yul\":6999:7021   */\n  tag_196\n    /* \"#utility.yul\":7017:7020   */\n  dup6\n    /* \"#utility.yul\":6999:7021   */\n  tag_90\n  jump\t// in\ntag_196:\n    /* \"#utility.yul\":6989:6997   */\n  dup4\n    /* \"#utility.yul\":6985:7022   */\n  add\n    /* \"#utility.yul\":6972:6983   */\n  dup3\n    /* \"#utility.yul\":6943:7023   */\n  tag_100\n  jump\t// in\ntag_195:\n    /* \"#utility.yul\":6602:7033   */\n  pop\n  pop\n    /* \"#utility.yul\":6587:7033   */\ntag_191:\n    /* \"#utility.yul\":6497:7040   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7046:7163   */\ntag_102:\n    /* \"#utility.yul\":7100:7108   */\n  0x00\n    /* \"#utility.yul\":7150:7155   */\n  dup3\n    /* \"#utility.yul\":7144:7148   */\n  dup3\n    /* \"#utility.yul\":7140:7156   */\n  shr\n    /* \"#utility.yul\":7119:7156   */\n  swap1\n  pop\n    /* \"#utility.yul\":7046:7163   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7169:7338   */\ntag_103:\n    /* \"#utility.yul\":7213:7219   */\n  0x00\n    /* \"#utility.yul\":7246:7297   */\n  tag_199\n    /* \"#utility.yul\":7294:7295   */\n  0x00\n    /* \"#utility.yul\":7290:7296   */\n  not\n    /* \"#utility.yul\":7282:7287   */\n  dup5\n    /* \"#utility.yul\":7279:7280   */\n  0x08\n    /* \"#utility.yul\":7275:7288   */\n  mul\n    /* \"#utility.yul\":7246:7297   */\n  tag_102\n  jump\t// in\ntag_199:\n    /* \"#utility.yul\":7242:7298   */\n  not\n    /* \"#utility.yul\":7327:7331   */\n  dup1\n    /* \"#utility.yul\":7321:7325   */\n  dup4\n    /* \"#utility.yul\":7317:7332   */\n  and\n    /* \"#utility.yul\":7307:7332   */\n  swap2\n  pop\n    /* \"#utility.yul\":7220:7338   */\n  pop\n    /* \"#utility.yul\":7169:7338   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7343:7638   */\ntag_104:\n    /* \"#utility.yul\":7419:7423   */\n  0x00\n    /* \"#utility.yul\":7565:7594   */\n  tag_201\n    /* \"#utility.yul\":7590:7593   */\n  dup4\n    /* \"#utility.yul\":7584:7588   */\n  dup4\n    /* \"#utility.yul\":7565:7594   */\n  tag_103\n  jump\t// in\ntag_201:\n    /* \"#utility.yul\":7557:7594   */\n  swap2\n  pop\n    /* \"#utility.yul\":7627:7630   */\n  dup3\n    /* \"#utility.yul\":7624:7625   */\n  0x02\n    /* \"#utility.yul\":7620:7631   */\n  mul\n    /* \"#utility.yul\":7614:7618   */\n  dup3\n    /* \"#utility.yul\":7611:7632   */\n  or\n    /* \"#utility.yul\":7603:7632   */\n  swap1\n  pop\n    /* \"#utility.yul\":7343:7638   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7643:9038   */\ntag_9:\n    /* \"#utility.yul\":7760:7797   */\n  tag_203\n    /* \"#utility.yul\":7793:7796   */\n  dup3\n    /* \"#utility.yul\":7760:7797   */\n  tag_86\n  jump\t// in\ntag_203:\n    /* \"#utility.yul\":7862:7880   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":7854:7860   */\n  dup2\n    /* \"#utility.yul\":7851:7881   */\n  gt\n    /* \"#utility.yul\":7848:7904   */\n  iszero\n  tag_204\n  jumpi\n    /* \"#utility.yul\":7884:7902   */\n  tag_205\n  tag_75\n  jump\t// in\ntag_205:\n    /* \"#utility.yul\":7848:7904   */\ntag_204:\n    /* \"#utility.yul\":7928:7966   */\n  tag_206\n    /* \"#utility.yul\":7960:7964   */\n  dup3\n    /* \"#utility.yul\":7954:7965   */\n  sload\n    /* \"#utility.yul\":7928:7966   */\n  tag_88\n  jump\t// in\ntag_206:\n    /* \"#utility.yul\":8013:8080   */\n  tag_207\n    /* \"#utility.yul\":8073:8079   */\n  dup3\n    /* \"#utility.yul\":8065:8071   */\n  dup3\n    /* \"#utility.yul\":8059:8063   */\n  dup6\n    /* \"#utility.yul\":8013:8080   */\n  tag_101\n  jump\t// in\ntag_207:\n    /* \"#utility.yul\":8107:8108   */\n  0x00\n    /* \"#utility.yul\":8131:8135   */\n  0x20\n    /* \"#utility.yul\":8118:8135   */\n  swap1\n  pop\n    /* \"#utility.yul\":8163:8165   */\n  0x1f\n    /* \"#utility.yul\":8155:8161   */\n  dup4\n    /* \"#utility.yul\":8152:8166   */\n  gt\n    /* \"#utility.yul\":8180:8181   */\n  0x01\n    /* \"#utility.yul\":8175:8793   */\n  dup2\n  eq\n  tag_209\n  jumpi\n    /* \"#utility.yul\":8837:8838   */\n  0x00\n    /* \"#utility.yul\":8854:8860   */\n  dup5\n    /* \"#utility.yul\":8851:8928   */\n  iszero\n  tag_210\n  jumpi\n    /* \"#utility.yul\":8903:8912   */\n  dup3\n    /* \"#utility.yul\":8898:8901   */\n  dup8\n    /* \"#utility.yul\":8894:8913   */\n  add\n    /* \"#utility.yul\":8888:8914   */\n  mload\n    /* \"#utility.yul\":8879:8914   */\n  swap1\n  pop\n    /* \"#utility.yul\":8851:8928   */\ntag_210:\n    /* \"#utility.yul\":8954:9021   */\n  tag_211\n    /* \"#utility.yul\":9014:9020   */\n  dup6\n    /* \"#utility.yul\":9007:9012   */\n  dup3\n    /* \"#utility.yul\":8954:9021   */\n  tag_104\n  jump\t// in\ntag_211:\n    /* \"#utility.yul\":8948:8952   */\n  dup7\n    /* \"#utility.yul\":8941:9022   */\n  sstore\n    /* \"#utility.yul\":8810:9032   */\n  pop\n    /* \"#utility.yul\":8145:9032   */\n  jump(tag_208)\n    /* \"#utility.yul\":8175:8793   */\ntag_209:\n    /* \"#utility.yul\":8227:8231   */\n  0x1f\n    /* \"#utility.yul\":8223:8232   */\n  not\n    /* \"#utility.yul\":8215:8221   */\n  dup5\n    /* \"#utility.yul\":8211:8233   */\n  and\n    /* \"#utility.yul\":8261:8298   */\n  tag_212\n    /* \"#utility.yul\":8293:8297   */\n  dup7\n    /* \"#utility.yul\":8261:8298   */\n  tag_89\n  jump\t// in\ntag_212:\n    /* \"#utility.yul\":8320:8321   */\n  0x00\n    /* \"#utility.yul\":8334:8542   */\ntag_213:\n    /* \"#utility.yul\":8348:8355   */\n  dup3\n    /* \"#utility.yul\":8345:8346   */\n  dup2\n    /* \"#utility.yul\":8342:8356   */\n  lt\n    /* \"#utility.yul\":8334:8542   */\n  iszero\n  tag_215\n  jumpi\n    /* \"#utility.yul\":8427:8436   */\n  dup5\n    /* \"#utility.yul\":8422:8425   */\n  dup10\n    /* \"#utility.yul\":8418:8437   */\n  add\n    /* \"#utility.yul\":8412:8438   */\n  mload\n    /* \"#utility.yul\":8404:8410   */\n  dup3\n    /* \"#utility.yul\":8397:8439   */\n  sstore\n    /* \"#utility.yul\":8478:8479   */\n  0x01\n    /* \"#utility.yul\":8470:8476   */\n  dup3\n    /* \"#utility.yul\":8466:8480   */\n  add\n    /* \"#utility.yul\":8456:8480   */\n  swap2\n  pop\n    /* \"#utility.yul\":8525:8527   */\n  0x20\n    /* \"#utility.yul\":8514:8523   */\n  dup6\n    /* \"#utility.yul\":8510:8528   */\n  add\n    /* \"#utility.yul\":8497:8528   */\n  swap5\n  pop\n    /* \"#utility.yul\":8371:8375   */\n  0x20\n    /* \"#utility.yul\":8368:8369   */\n  dup2\n    /* \"#utility.yul\":8364:8376   */\n  add\n    /* \"#utility.yul\":8359:8376   */\n  swap1\n  pop\n    /* \"#utility.yul\":8334:8542   */\n  jump(tag_213)\ntag_215:\n    /* \"#utility.yul\":8570:8576   */\n  dup7\n    /* \"#utility.yul\":8561:8568   */\n  dup4\n    /* \"#utility.yul\":8558:8577   */\n  lt\n    /* \"#utility.yul\":8555:8734   */\n  iszero\n  tag_216\n  jumpi\n    /* \"#utility.yul\":8628:8637   */\n  dup5\n    /* \"#utility.yul\":8623:8626   */\n  dup10\n    /* \"#utility.yul\":8619:8638   */\n  add\n    /* \"#utility.yul\":8613:8639   */\n  mload\n    /* \"#utility.yul\":8671:8719   */\n  tag_217\n    /* \"#utility.yul\":8713:8717   */\n  0x1f\n    /* \"#utility.yul\":8705:8711   */\n  dup10\n    /* \"#utility.yul\":8701:8718   */\n  and\n    /* \"#utility.yul\":8690:8699   */\n  dup3\n    /* \"#utility.yul\":8671:8719   */\n  tag_103\n  jump\t// in\ntag_217:\n    /* \"#utility.yul\":8663:8669   */\n  dup4\n    /* \"#utility.yul\":8656:8720   */\n  sstore\n    /* \"#utility.yul\":8578:8734   */\n  pop\n    /* \"#utility.yul\":8555:8734   */\ntag_216:\n    /* \"#utility.yul\":8780:8781   */\n  0x01\n    /* \"#utility.yul\":8776:8777   */\n  0x02\n    /* \"#utility.yul\":8768:8774   */\n  dup9\n    /* \"#utility.yul\":8764:8778   */\n  mul\n    /* \"#utility.yul\":8760:8782   */\n  add\n    /* \"#utility.yul\":8754:8758   */\n  dup9\n    /* \"#utility.yul\":8747:8783   */\n  sstore\n    /* \"#utility.yul\":8182:8793   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":8145:9032   */\ntag_208:\n  pop\n    /* \"#utility.yul\":7735:9038   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":7643:9038   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9044:9162   */\ntag_105:\n    /* \"#utility.yul\":9131:9155   */\n  tag_219\n    /* \"#utility.yul\":9149:9154   */\n  dup2\n    /* \"#utility.yul\":9131:9155   */\n  tag_81\n  jump\t// in\ntag_219:\n    /* \"#utility.yul\":9126:9129   */\n  dup3\n    /* \"#utility.yul\":9119:9156   */\n  mstore\n    /* \"#utility.yul\":9044:9162   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9168:9390   */\ntag_14:\n    /* \"#utility.yul\":9261:9265   */\n  0x00\n    /* \"#utility.yul\":9299:9301   */\n  0x20\n    /* \"#utility.yul\":9288:9297   */\n  dup3\n    /* \"#utility.yul\":9284:9302   */\n  add\n    /* \"#utility.yul\":9276:9302   */\n  swap1\n  pop\n    /* \"#utility.yul\":9312:9383   */\n  tag_221\n    /* \"#utility.yul\":9380:9381   */\n  0x00\n    /* \"#utility.yul\":9369:9378   */\n  dup4\n    /* \"#utility.yul\":9365:9382   */\n  add\n    /* \"#utility.yul\":9356:9362   */\n  dup5\n    /* \"#utility.yul\":9312:9383   */\n  tag_105\n  jump\t// in\ntag_221:\n    /* \"#utility.yul\":9168:9390   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9396:9565   */\ntag_106:\n    /* \"#utility.yul\":9480:9491   */\n  0x00\n    /* \"#utility.yul\":9514:9520   */\n  dup3\n    /* \"#utility.yul\":9509:9512   */\n  dup3\n    /* \"#utility.yul\":9502:9521   */\n  mstore\n    /* \"#utility.yul\":9554:9558   */\n  0x20\n    /* \"#utility.yul\":9549:9552   */\n  dup3\n    /* \"#utility.yul\":9545:9559   */\n  add\n    /* \"#utility.yul\":9530:9559   */\n  swap1\n  pop\n    /* \"#utility.yul\":9396:9565   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9571:9792   */\ntag_107:\n    /* \"#utility.yul\":9711:9745   */\n  0x4174206c65617374206f6e65207465616d206164647265737320726571756972\n    /* \"#utility.yul\":9707:9708   */\n  0x00\n    /* \"#utility.yul\":9699:9705   */\n  dup3\n    /* \"#utility.yul\":9695:9709   */\n  add\n    /* \"#utility.yul\":9688:9746   */\n  mstore\n    /* \"#utility.yul\":9780:9784   */\n  0x6564000000000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":9775:9777   */\n  0x20\n    /* \"#utility.yul\":9767:9773   */\n  dup3\n    /* \"#utility.yul\":9763:9778   */\n  add\n    /* \"#utility.yul\":9756:9785   */\n  mstore\n    /* \"#utility.yul\":9571:9792   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9798:10164   */\ntag_108:\n    /* \"#utility.yul\":9940:9943   */\n  0x00\n    /* \"#utility.yul\":9961:10028   */\n  tag_225\n    /* \"#utility.yul\":10025:10027   */\n  0x22\n    /* \"#utility.yul\":10020:10023   */\n  dup4\n    /* \"#utility.yul\":9961:10028   */\n  tag_106\n  jump\t// in\ntag_225:\n    /* \"#utility.yul\":9954:10028   */\n  swap2\n  pop\n    /* \"#utility.yul\":10037:10130   */\n  tag_226\n    /* \"#utility.yul\":10126:10129   */\n  dup3\n    /* \"#utility.yul\":10037:10130   */\n  tag_107\n  jump\t// in\ntag_226:\n    /* \"#utility.yul\":10155:10157   */\n  0x40\n    /* \"#utility.yul\":10150:10153   */\n  dup3\n    /* \"#utility.yul\":10146:10158   */\n  add\n    /* \"#utility.yul\":10139:10158   */\n  swap1\n  pop\n    /* \"#utility.yul\":9798:10164   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":10170:10589   */\ntag_20:\n    /* \"#utility.yul\":10336:10340   */\n  0x00\n    /* \"#utility.yul\":10374:10376   */\n  0x20\n    /* \"#utility.yul\":10363:10372   */\n  dup3\n    /* \"#utility.yul\":10359:10377   */\n  add\n    /* \"#utility.yul\":10351:10377   */\n  swap1\n  pop\n    /* \"#utility.yul\":10423:10432   */\n  dup2\n    /* \"#utility.yul\":10417:10421   */\n  dup2\n    /* \"#utility.yul\":10413:10433   */\n  sub\n    /* \"#utility.yul\":10409:10410   */\n  0x00\n    /* \"#utility.yul\":10398:10407   */\n  dup4\n    /* \"#utility.yul\":10394:10411   */\n  add\n    /* \"#utility.yul\":10387:10434   */\n  mstore\n    /* \"#utility.yul\":10451:10582   */\n  tag_228\n    /* \"#utility.yul\":10577:10581   */\n  dup2\n    /* \"#utility.yul\":10451:10582   */\n  tag_108\n  jump\t// in\ntag_228:\n    /* \"#utility.yul\":10443:10582   */\n  swap1\n  pop\n    /* \"#utility.yul\":10170:10589   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":10595:10775   */\ntag_109:\n    /* \"#utility.yul\":10643:10720   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":10640:10641   */\n  0x00\n    /* \"#utility.yul\":10633:10721   */\n  mstore\n    /* \"#utility.yul\":10740:10744   */\n  0x11\n    /* \"#utility.yul\":10737:10738   */\n  0x04\n    /* \"#utility.yul\":10730:10745   */\n  mstore\n    /* \"#utility.yul\":10764:10768   */\n  0x24\n    /* \"#utility.yul\":10761:10762   */\n  0x00\n    /* \"#utility.yul\":10754:10769   */\n  revert\n    /* \"#utility.yul\":10781:11191   */\ntag_25:\n    /* \"#utility.yul\":10821:10828   */\n  0x00\n    /* \"#utility.yul\":10844:10864   */\n  tag_231\n    /* \"#utility.yul\":10862:10863   */\n  dup3\n    /* \"#utility.yul\":10844:10864   */\n  tag_93\n  jump\t// in\ntag_231:\n    /* \"#utility.yul\":10839:10864   */\n  swap2\n  pop\n    /* \"#utility.yul\":10878:10898   */\n  tag_232\n    /* \"#utility.yul\":10896:10897   */\n  dup4\n    /* \"#utility.yul\":10878:10898   */\n  tag_93\n  jump\t// in\ntag_232:\n    /* \"#utility.yul\":10873:10898   */\n  swap3\n  pop\n    /* \"#utility.yul\":10933:10934   */\n  dup3\n    /* \"#utility.yul\":10930:10931   */\n  dup3\n    /* \"#utility.yul\":10926:10935   */\n  mul\n    /* \"#utility.yul\":10955:10985   */\n  tag_233\n    /* \"#utility.yul\":10973:10984   */\n  dup2\n    /* \"#utility.yul\":10955:10985   */\n  tag_93\n  jump\t// in\ntag_233:\n    /* \"#utility.yul\":10944:10985   */\n  swap2\n  pop\n    /* \"#utility.yul\":11134:11135   */\n  dup3\n    /* \"#utility.yul\":11125:11132   */\n  dup3\n    /* \"#utility.yul\":11121:11136   */\n  div\n    /* \"#utility.yul\":11118:11119   */\n  dup5\n    /* \"#utility.yul\":11115:11137   */\n  eq\n    /* \"#utility.yul\":11095:11096   */\n  dup4\n    /* \"#utility.yul\":11088:11097   */\n  iszero\n    /* \"#utility.yul\":11068:11151   */\n  or\n    /* \"#utility.yul\":11045:11184   */\n  tag_234\n  jumpi\n    /* \"#utility.yul\":11164:11182   */\n  tag_235\n  tag_109\n  jump\t// in\ntag_235:\n    /* \"#utility.yul\":11045:11184   */\ntag_234:\n    /* \"#utility.yul\":10829:11191   */\n  pop\n    /* \"#utility.yul\":10781:11191   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":11197:11377   */\ntag_110:\n    /* \"#utility.yul\":11245:11322   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":11242:11243   */\n  0x00\n    /* \"#utility.yul\":11235:11323   */\n  mstore\n    /* \"#utility.yul\":11342:11346   */\n  0x12\n    /* \"#utility.yul\":11339:11340   */\n  0x04\n    /* \"#utility.yul\":11332:11347   */\n  mstore\n    /* \"#utility.yul\":11366:11370   */\n  0x24\n    /* \"#utility.yul\":11363:11364   */\n  0x00\n    /* \"#utility.yul\":11356:11371   */\n  revert\n    /* \"#utility.yul\":11383:11568   */\ntag_27:\n    /* \"#utility.yul\":11423:11424   */\n  0x00\n    /* \"#utility.yul\":11440:11460   */\n  tag_238\n    /* \"#utility.yul\":11458:11459   */\n  dup3\n    /* \"#utility.yul\":11440:11460   */\n  tag_93\n  jump\t// in\ntag_238:\n    /* \"#utility.yul\":11435:11460   */\n  swap2\n  pop\n    /* \"#utility.yul\":11474:11494   */\n  tag_239\n    /* \"#utility.yul\":11492:11493   */\n  dup4\n    /* \"#utility.yul\":11474:11494   */\n  tag_93\n  jump\t// in\ntag_239:\n    /* \"#utility.yul\":11469:11494   */\n  swap3\n  pop\n    /* \"#utility.yul\":11513:11514   */\n  dup3\n    /* \"#utility.yul\":11503:11538   */\n  tag_240\n  jumpi\n    /* \"#utility.yul\":11518:11536   */\n  tag_241\n  tag_110\n  jump\t// in\ntag_241:\n    /* \"#utility.yul\":11503:11538   */\ntag_240:\n    /* \"#utility.yul\":11560:11561   */\n  dup3\n    /* \"#utility.yul\":11557:11558   */\n  dup3\n    /* \"#utility.yul\":11553:11562   */\n  div\n    /* \"#utility.yul\":11548:11562   */\n  swap1\n  pop\n    /* \"#utility.yul\":11383:11568   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":11574:11754   */\ntag_35:\n    /* \"#utility.yul\":11622:11699   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":11619:11620   */\n  0x00\n    /* \"#utility.yul\":11612:11700   */\n  mstore\n    /* \"#utility.yul\":11719:11723   */\n  0x32\n    /* \"#utility.yul\":11716:11717   */\n  0x04\n    /* \"#utility.yul\":11709:11724   */\n  mstore\n    /* \"#utility.yul\":11743:11747   */\n  0x24\n    /* \"#utility.yul\":11740:11741   */\n  0x00\n    /* \"#utility.yul\":11733:11748   */\n  revert\n    /* \"#utility.yul\":11760:11951   */\ntag_44:\n    /* \"#utility.yul\":11800:11803   */\n  0x00\n    /* \"#utility.yul\":11819:11839   */\n  tag_244\n    /* \"#utility.yul\":11837:11838   */\n  dup3\n    /* \"#utility.yul\":11819:11839   */\n  tag_93\n  jump\t// in\ntag_244:\n    /* \"#utility.yul\":11814:11839   */\n  swap2\n  pop\n    /* \"#utility.yul\":11853:11873   */\n  tag_245\n    /* \"#utility.yul\":11871:11872   */\n  dup4\n    /* \"#utility.yul\":11853:11873   */\n  tag_93\n  jump\t// in\ntag_245:\n    /* \"#utility.yul\":11848:11873   */\n  swap3\n  pop\n    /* \"#utility.yul\":11896:11897   */\n  dup3\n    /* \"#utility.yul\":11893:11894   */\n  dup3\n    /* \"#utility.yul\":11889:11898   */\n  add\n    /* \"#utility.yul\":11882:11898   */\n  swap1\n  pop\n    /* \"#utility.yul\":11917:11920   */\n  dup1\n    /* \"#utility.yul\":11914:11915   */\n  dup3\n    /* \"#utility.yul\":11911:11921   */\n  gt\n    /* \"#utility.yul\":11908:11944   */\n  iszero\n  tag_246\n  jumpi\n    /* \"#utility.yul\":11924:11942   */\n  tag_247\n  tag_109\n  jump\t// in\ntag_247:\n    /* \"#utility.yul\":11908:11944   */\ntag_246:\n    /* \"#utility.yul\":11760:11951   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":11957:12075   */\ntag_111:\n    /* \"#utility.yul\":12044:12068   */\n  tag_249\n    /* \"#utility.yul\":12062:12067   */\n  dup2\n    /* \"#utility.yul\":12044:12068   */\n  tag_93\n  jump\t// in\ntag_249:\n    /* \"#utility.yul\":12039:12042   */\n  dup3\n    /* \"#utility.yul\":12032:12069   */\n  mstore\n    /* \"#utility.yul\":11957:12075   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":12081:12523   */\ntag_58:\n    /* \"#utility.yul\":12230:12234   */\n  0x00\n    /* \"#utility.yul\":12268:12270   */\n  0x60\n    /* \"#utility.yul\":12257:12266   */\n  dup3\n    /* \"#utility.yul\":12253:12271   */\n  add\n    /* \"#utility.yul\":12245:12271   */\n  swap1\n  pop\n    /* \"#utility.yul\":12281:12352   */\n  tag_251\n    /* \"#utility.yul\":12349:12350   */\n  0x00\n    /* \"#utility.yul\":12338:12347   */\n  dup4\n    /* \"#utility.yul\":12334:12351   */\n  add\n    /* \"#utility.yul\":12325:12331   */\n  dup7\n    /* \"#utility.yul\":12281:12352   */\n  tag_105\n  jump\t// in\ntag_251:\n    /* \"#utility.yul\":12362:12434   */\n  tag_252\n    /* \"#utility.yul\":12430:12432   */\n  0x20\n    /* \"#utility.yul\":12419:12428   */\n  dup4\n    /* \"#utility.yul\":12415:12433   */\n  add\n    /* \"#utility.yul\":12406:12412   */\n  dup6\n    /* \"#utility.yul\":12362:12434   */\n  tag_111\n  jump\t// in\ntag_252:\n    /* \"#utility.yul\":12444:12516   */\n  tag_253\n    /* \"#utility.yul\":12512:12514   */\n  0x40\n    /* \"#utility.yul\":12501:12510   */\n  dup4\n    /* \"#utility.yul\":12497:12515   */\n  add\n    /* \"#utility.yul\":12488:12494   */\n  dup5\n    /* \"#utility.yul\":12444:12516   */\n  tag_111\n  jump\t// in\ntag_253:\n    /* \"#utility.yul\":12081:12523   */\n  swap5\n  swap4\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":12529:12751   */\ntag_62:\n    /* \"#utility.yul\":12622:12626   */\n  0x00\n    /* \"#utility.yul\":12660:12662   */\n  0x20\n    /* \"#utility.yul\":12649:12658   */\n  dup3\n    /* \"#utility.yul\":12645:12663   */\n  add\n    /* \"#utility.yul\":12637:12663   */\n  swap1\n  pop\n    /* \"#utility.yul\":12673:12744   */\n  tag_255\n    /* \"#utility.yul\":12741:12742   */\n  0x00\n    /* \"#utility.yul\":12730:12739   */\n  dup4\n    /* \"#utility.yul\":12726:12743   */\n  add\n    /* \"#utility.yul\":12717:12723   */\n  dup5\n    /* \"#utility.yul\":12673:12744   */\n  tag_111\n  jump\t// in\ntag_255:\n    /* \"#utility.yul\":12529:12751   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/CCtoken/pool/CCToken.sol\":489:2357  contract CSYDToken is ERC20, Ownable {... */\ntag_45:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/CCtoken/pool/CCToken.sol\":489:2357  contract CSYDToken is ERC20, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x76ae9b2d\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xa9059cbb\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xbdd3d825\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xeb91d37e\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_21:\n      dup1\n      0x76ae9b2d\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x902d55a5\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x313ce567\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x35928998\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_22:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1760:1849  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3902:4088  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_28\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_28:\n      tag_30\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_31\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2803:2900  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n      tag_33\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1878:2064  function transferFrom(address sender, address recipient, uint256 amount) public override teamLocked returns (bool) {... */\n    tag_6:\n      tag_37\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      tag_41\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2688:2770  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_42\n      tag_43\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_44\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CCtoken/pool/CCToken.sol\":690:745  uint256 public constant TEAM_LOCK_PERIOD = 3 * 365 days */\n    tag_8:\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2933:3049  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_9:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_10:\n      tag_54\n      tag_55\n      jump\t// in\n    tag_54:\n      stop\n        /* \"contracts/CCtoken/pool/CCToken.sol\":812:842  uint256 public teamLockedUntil */\n    tag_11:\n      tag_56\n      tag_57\n      jump\t// in\n    tag_56:\n      mload(0x40)\n      tag_58\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_12:\n      tag_59\n      tag_60\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      tag_61\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CCtoken/pool/CCToken.sol\":615:670  uint256 public constant TOTAL_SUPPLY = 150_000_000 * 10 */\n    tag_13:\n      tag_63\n      tag_64\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      tag_65\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1962:2055  function symbol() public view virtual returns (string memory) {... */\n    tag_14:\n      tag_66\n      tag_67\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      tag_68\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1716:1870  function transfer(address recipient, uint256 amount) public override teamLocked returns (bool) {... */\n    tag_15:\n      tag_69\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_70\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_70:\n      tag_71\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      tag_72\n      swap2\n      swap1\n      tag_32\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CCtoken/pool/CCToken.sol\":849:875  address public uniswapPool */\n    tag_16:\n      tag_73\n      tag_74\n      jump\t// in\n    tag_73:\n      mload(0x40)\n      tag_75\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_75:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3455:3595  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_17:\n      tag_76\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_77\n      swap2\n      swap1\n      tag_78\n      jump\t// in\n    tag_77:\n      tag_79\n      jump\t// in\n    tag_76:\n      mload(0x40)\n      tag_80\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2072:2354  function getCurrentPrice() public view returns (uint256 price) {... */\n    tag_18:\n      tag_81\n      tag_82\n      jump\t// in\n    tag_81:\n      mload(0x40)\n      tag_83\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_83:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_19:\n      tag_84\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_85\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_85:\n      tag_86\n      jump\t// in\n    tag_84:\n      stop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1760:1849  function name() public view virtual returns (string memory) {... */\n    tag_24:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1805:1818  string memory */\n      0x60\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1837:1842  _name */\n      0x03\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1830:1842  return _name */\n      dup1\n      sload\n      tag_88\n      swap1\n      tag_89\n      jump\t// in\n    tag_88:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_90\n      swap1\n      tag_89\n      jump\t// in\n    tag_90:\n      dup1\n      iszero\n      tag_91\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_92\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_91)\n    tag_92:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_93:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_93\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_91:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1760:1849  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3902:4088  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_30:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3975:3979  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3991:4004  address owner */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4007:4019  _msgSender() */\n      tag_95\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4007:4017  _msgSender */\n      tag_96\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4007:4019  _msgSender() */\n      jump\t// in\n    tag_95:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3991:4019  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4029:4060  _approve(owner, spender, value) */\n      tag_97\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4038:4043  owner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4045:4052  spender */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4054:4059  value */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4029:4037  _approve */\n      tag_98\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4029:4060  _approve(owner, spender, value) */\n      jump\t// in\n    tag_97:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4077:4081  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4070:4081  return true */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3902:4088  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2803:2900  function totalSupply() public view virtual returns (uint256) {... */\n    tag_34:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2855:2862  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2881:2893  _totalSupply */\n      sload(0x02)\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2874:2893  return _totalSupply */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2803:2900  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1878:2064  function transferFrom(address sender, address recipient, uint256 amount) public override teamLocked returns (bool) {... */\n    tag_40:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1987:1991  bool */\n      0x00\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1646:1661  teamLockedUntil */\n      sload(0x07)\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1627:1642  block.timestamp */\n      timestamp\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1627:1661  block.timestamp >= teamLockedUntil */\n      lt\n      iszero\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1619:1688  require(block.timestamp >= teamLockedUntil, \"Team tokens are locked\") */\n      tag_101\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_102\n      swap1\n      tag_103\n      jump\t// in\n    tag_102:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_101:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2011:2056  super.transferFrom(sender, recipient, amount) */\n      tag_105\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2030:2036  sender */\n      dup5\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2038:2047  recipient */\n      dup5\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2049:2055  amount */\n      dup5\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2011:2029  super.transferFrom */\n      tag_106\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2011:2056  super.transferFrom(sender, recipient, amount) */\n      jump\t// in\n    tag_105:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2004:2056  return super.transferFrom(sender, recipient, amount) */\n      swap1\n      pop\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1878:2064  function transferFrom(address sender, address recipient, uint256 amount) public override teamLocked returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2688:2770  function decimals() public view virtual returns (uint8) {... */\n    tag_43:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2737:2742  uint8 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2761:2763  18 */\n      0x12\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2754:2763  return 18 */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2688:2770  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/CCtoken/pool/CCToken.sol\":690:745  uint256 public constant TEAM_LOCK_PERIOD = 3 * 365 days */\n    tag_47:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":733:745  3 * 365 days */\n      0x05a39a80\n        /* \"contracts/CCtoken/pool/CCToken.sol\":690:745  uint256 public constant TEAM_LOCK_PERIOD = 3 * 365 days */\n      dup2\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2933:3049  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_52:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2998:3005  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3024:3033  _balances */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3024:3042  _balances[account] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3034:3041  account */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3024:3042  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3017:3042  return _balances[account] */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2933:3049  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_55:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_110\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_111\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_110:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_113\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_114\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_113:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/CCtoken/pool/CCToken.sol\":812:842  uint256 public teamLockedUntil */\n    tag_57:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_60:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1703:1716  return _owner */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/CCtoken/pool/CCToken.sol\":615:670  uint256 public constant TOTAL_SUPPLY = 150_000_000 * 10 */\n    tag_64:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":654:670  150_000_000 * 10 */\n      0x59682f00\n        /* \"contracts/CCtoken/pool/CCToken.sol\":615:670  uint256 public constant TOTAL_SUPPLY = 150_000_000 * 10 */\n      dup2\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1962:2055  function symbol() public view virtual returns (string memory) {... */\n    tag_67:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2009:2022  string memory */\n      0x60\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2041:2048  _symbol */\n      0x04\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":2034:2048  return _symbol */\n      dup1\n      sload\n      tag_117\n      swap1\n      tag_89\n      jump\t// in\n    tag_117:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_118\n      swap1\n      tag_89\n      jump\t// in\n    tag_118:\n      dup1\n      iszero\n      tag_119\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_120\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_119)\n    tag_120:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_121:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_121\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_119:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":1962:2055  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1716:1870  function transfer(address recipient, uint256 amount) public override teamLocked returns (bool) {... */\n    tag_71:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1805:1809  bool */\n      0x00\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1646:1661  teamLockedUntil */\n      sload(0x07)\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1627:1642  block.timestamp */\n      timestamp\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1627:1661  block.timestamp >= teamLockedUntil */\n      lt\n      iszero\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1619:1688  require(block.timestamp >= teamLockedUntil, \"Team tokens are locked\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_103\n      jump\t// in\n    tag_124:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_123:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1829:1862  super.transfer(recipient, amount) */\n      tag_126\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1844:1853  recipient */\n      dup4\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1855:1861  amount */\n      dup4\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1829:1843  super.transfer */\n      tag_127\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1829:1862  super.transfer(recipient, amount) */\n      jump\t// in\n    tag_126:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1822:1862  return super.transfer(recipient, amount) */\n      swap1\n      pop\n        /* \"contracts/CCtoken/pool/CCToken.sol\":1716:1870  function transfer(address recipient, uint256 amount) public override teamLocked returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/CCtoken/pool/CCToken.sol\":849:875  address public uniswapPool */\n    tag_74:\n      0x08\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3455:3595  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_79:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3535:3542  uint256 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3561:3572  _allowances */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3561:3579  _allowances[owner] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3573:3578  owner */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3561:3579  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3561:3588  _allowances[owner][spender] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3580:3587  spender */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3561:3588  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3554:3588  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3455:3595  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2072:2354  function getCurrentPrice() public view returns (uint256 price) {... */\n    tag_82:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2120:2133  uint256 price */\n      0x00\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2146:2165  IUniswapV3Pool pool */\n      0x00\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2183:2194  uniswapPool */\n      0x08\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2146:2195  IUniswapV3Pool pool = IUniswapV3Pool(uniswapPool) */\n      swap1\n      pop\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2207:2227  uint160 sqrtPriceX96 */\n      0x00\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2243:2247  pool */\n      dup2\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2243:2253  pool.slot0 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x3850c7bd\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2243:2255  pool.slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xe0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_131\n      jumpi\n      returndatacopy(0x00, 0x00, returndatasize)\n      revert(0x00, returndatasize)\n    tag_131:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_132\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_132:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2206:2255  (uint160 sqrtPriceX96, , , , , , ) = pool.slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2323:2329  2**192 */\n      0x01000000000000000000000000000000000000000000000000\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2306:2318  sqrtPriceX96 */\n      dup2\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2298:2319  uint256(sqrtPriceX96) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2282:2294  sqrtPriceX96 */\n      dup3\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2274:2295  uint256(sqrtPriceX96) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2274:2319  uint256(sqrtPriceX96) * uint256(sqrtPriceX96) */\n      tag_134\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_134:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2274:2330  uint256(sqrtPriceX96) * uint256(sqrtPriceX96) / (2**192) */\n      tag_136\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_136:\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2266:2330  price = uint256(sqrtPriceX96) * uint256(sqrtPriceX96) / (2**192) */\n      swap3\n      pop\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2135:2354  {... */\n      pop\n      pop\n        /* \"contracts/CCtoken/pool/CCToken.sol\":2072:2354  function getCurrentPrice() public view returns (uint256 price) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_86:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_139\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_111\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_139:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2647:2648  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2627:2635  newOwner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_141\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_142\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_142:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_141:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_143\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_114\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_143:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n    tag_96:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":709:716  address */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":728:745  return msg.sender */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8630:8758  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_98:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8714:8751  _approve(owner, spender, value, true) */\n      tag_146\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8723:8728  owner */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8730:8737  spender */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8739:8744  value */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8746:8750  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8714:8722  _approve */\n      tag_147\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8714:8751  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_146:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":8630:8758  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4680:4924  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_106:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4767:4771  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4783:4798  address spender */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4801:4813  _msgSender() */\n      tag_149\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4801:4811  _msgSender */\n      tag_96\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4801:4813  _msgSender() */\n      jump\t// in\n    tag_149:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4783:4813  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4823:4860  _spendAllowance(from, spender, value) */\n      tag_150\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4839:4843  from */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4845:4852  spender */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4854:4859  value */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4823:4838  _spendAllowance */\n      tag_151\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4823:4860  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_150:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4870:4896  _transfer(from, to, value) */\n      tag_152\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4880:4884  from */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4886:4888  to */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4890:4895  value */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4870:4879  _transfer */\n      tag_153\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4870:4896  _transfer(from, to, value) */\n      jump\t// in\n    tag_152:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4913:4917  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4906:4917  return true */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":4680:4924  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_111:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1866:1878  _msgSender() */\n      tag_155\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1866:1876  _msgSender */\n      tag_96\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1866:1878  _msgSender() */\n      jump\t// in\n    tag_155:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1855:1862  owner() */\n      tag_156\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1855:1860  owner */\n      tag_60\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1855:1862  owner() */\n      jump\t// in\n    tag_156:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_157\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1928:1940  _msgSender() */\n      tag_158\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1928:1938  _msgSender */\n      tag_96\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1928:1940  _msgSender() */\n      jump\t// in\n    tag_158:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      0x118cdaa700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_159\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_159:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n    tag_157:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_114:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3004:3010  _owner */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2985:3010  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3029:3037  newOwner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3020:3026  _owner */\n      0x05\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3083:3091  newOwner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3073:3081  oldOwner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3244:3422  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_127:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3313:3317  bool */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3329:3342  address owner */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3345:3357  _msgSender() */\n      tag_162\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3345:3355  _msgSender */\n      tag_96\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3345:3357  _msgSender() */\n      jump\t// in\n    tag_162:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3329:3357  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3367:3394  _transfer(owner, to, value) */\n      tag_163\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3377:3382  owner */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3384:3386  to */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3388:3393  value */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3367:3376  _transfer */\n      tag_153\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3367:3394  _transfer(owner, to, value) */\n      jump\t// in\n    tag_163:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3411:3415  true */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3404:3415  return true */\n      swap2\n      pop\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":3244:3422  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9605:10037  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_147:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9734:9735  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9717:9736  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9717:9722  owner */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9717:9736  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9713:9802  if (owner == address(0)) {... */\n      tag_165\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9788:9789  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9759:9791  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_166\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_166:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9713:9802  if (owner == address(0)) {... */\n    tag_165:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9834:9835  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9815:9836  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9815:9822  spender */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9815:9836  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9811:9901  if (spender == address(0)) {... */\n      tag_167\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9887:9888  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9859:9890  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_168\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_168:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9811:9901  if (spender == address(0)) {... */\n    tag_167:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9940:9945  value */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9910:9921  _allowances */\n      0x01\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9910:9928  _allowances[owner] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9922:9927  owner */\n      dup7\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9910:9928  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9910:9937  _allowances[owner][spender] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9929:9936  spender */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9910:9937  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9910:9945  _allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9959:9968  emitEvent */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9955:10031  if (emitEvent) {... */\n      iszero\n      tag_169\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10005:10012  spender */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9989:10020  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9998:10003  owner */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9989:10020  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10014:10019  value */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9989:10020  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_170\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_170:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9955:10031  if (emitEvent) {... */\n    tag_169:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":9605:10037  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10319:10795  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_151:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10418:10442  uint256 currentAllowance */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10445:10470  allowance(owner, spender) */\n      tag_172\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10455:10460  owner */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10462:10469  spender */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10445:10454  allowance */\n      tag_79\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10445:10470  allowance(owner, spender) */\n      jump\t// in\n    tag_172:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10418:10470  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10503:10520  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10484:10500  currentAllowance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10484:10520  currentAllowance < type(uint256).max */\n      lt\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10480:10789  if (currentAllowance < type(uint256).max) {... */\n      iszero\n      tag_173\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10559:10564  value */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10540:10556  currentAllowance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10540:10564  currentAllowance < value */\n      lt\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10536:10666  if (currentAllowance < value) {... */\n      iszero\n      tag_174\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10618:10625  spender */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10627:10643  currentAllowance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10645:10650  value */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10591:10651  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_175\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_175:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10536:10666  if (currentAllowance < value) {... */\n    tag_174:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10707:10764  _approve(owner, spender, currentAllowance - value, false) */\n      tag_177\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10716:10721  owner */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10723:10730  spender */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10751:10756  value */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10732:10748  currentAllowance */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10732:10756  currentAllowance - value */\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10758:10763  false */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10707:10715  _approve */\n      tag_147\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10707:10764  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_177:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10480:10789  if (currentAllowance < type(uint256).max) {... */\n    tag_173:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10408:10795  {... */\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":10319:10795  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5297:5597  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_153:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5396:5397  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5380:5398  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5380:5384  from */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5380:5398  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5376:5462  if (from == address(0)) {... */\n      tag_179\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5448:5449  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5421:5451  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_180:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5376:5462  if (from == address(0)) {... */\n    tag_179:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5489:5490  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5475:5491  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5475:5477  to */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5475:5491  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5471:5557  if (to == address(0)) {... */\n      tag_181\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5543:5544  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5514:5546  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_182\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_182:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5471:5557  if (to == address(0)) {... */\n    tag_181:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5566:5590  _update(from, to, value) */\n      tag_183\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5574:5578  from */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5580:5582  to */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5584:5589  value */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5566:5573  _update */\n      tag_184\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5566:5590  _update(from, to, value) */\n      jump\t// in\n    tag_183:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5297:5597  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5912:7019  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_184:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6017:6018  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6001:6019  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6001:6005  from */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6001:6019  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5997:6537  if (from == address(0)) {... */\n      tag_186\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6153:6158  value */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6137:6149  _totalSupply */\n      0x02\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6137:6158  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_187\n      swap2\n      swap1\n      tag_188\n      jump\t// in\n    tag_187:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5997:6537  if (from == address(0)) {... */\n      jump(tag_189)\n    tag_186:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6189:6208  uint256 fromBalance */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6211:6220  _balances */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6211:6226  _balances[from] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6221:6225  from */\n      dup6\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6211:6226  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6189:6226  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6258:6263  value */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6244:6255  fromBalance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6244:6263  fromBalance < value */\n      lt\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6240:6355  if (fromBalance < value) {... */\n      iszero\n      tag_190\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6315:6319  from */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6321:6332  fromBalance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6334:6339  value */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6290:6340  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_191\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_191:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6240:6355  if (fromBalance < value) {... */\n    tag_190:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6507:6512  value */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6493:6504  fromBalance */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6493:6512  fromBalance - value */\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6475:6484  _balances */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6475:6490  _balances[from] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6485:6489  from */\n      dup7\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6475:6490  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6475:6512  _balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6175:6537  {... */\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5997:6537  if (from == address(0)) {... */\n    tag_189:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6565:6566  0 */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6551:6567  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6551:6553  to */\n      dup3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6551:6567  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6547:6972  if (to == address(0)) {... */\n      tag_192\n      jumpi\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6730:6735  value */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6714:6726  _totalSupply */\n      0x02\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6714:6735  _totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6547:6972  if (to == address(0)) {... */\n      jump(tag_193)\n    tag_192:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6942:6947  value */\n      dup1\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6925:6934  _balances */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6925:6938  _balances[to] */\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6935:6937  to */\n      dup5\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6925:6938  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6925:6947  _balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6547:6972  if (to == address(0)) {... */\n    tag_193:\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7002:7004  to */\n      dup2\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6987:7012  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6996:7000  from */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6987:7012  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":7006:7011  value */\n      dup4\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":6987:7012  Transfer(from, to, value) */\n      mload(0x40)\n      tag_194\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_194:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":5912:7019  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_195:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_196:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:426   */\n    tag_197:\n        /* \"#utility.yul\":376:382   */\n      dup3\n        /* \"#utility.yul\":371:374   */\n      dup2\n        /* \"#utility.yul\":366:369   */\n      dup4\n        /* \"#utility.yul\":360:383   */\n      mcopy\n        /* \"#utility.yul\":417:418   */\n      0x00\n        /* \"#utility.yul\":408:414   */\n      dup4\n        /* \"#utility.yul\":403:406   */\n      dup4\n        /* \"#utility.yul\":399:415   */\n      add\n        /* \"#utility.yul\":392:419   */\n      mstore\n        /* \"#utility.yul\":287:426   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":432:534   */\n    tag_198:\n        /* \"#utility.yul\":473:479   */\n      0x00\n        /* \"#utility.yul\":524:526   */\n      0x1f\n        /* \"#utility.yul\":520:527   */\n      not\n        /* \"#utility.yul\":515:517   */\n      0x1f\n        /* \"#utility.yul\":508:513   */\n      dup4\n        /* \"#utility.yul\":504:518   */\n      add\n        /* \"#utility.yul\":500:528   */\n      and\n        /* \"#utility.yul\":490:528   */\n      swap1\n      pop\n        /* \"#utility.yul\":432:534   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":540:917   */\n    tag_199:\n        /* \"#utility.yul\":628:631   */\n      0x00\n        /* \"#utility.yul\":656:695   */\n      tag_239\n        /* \"#utility.yul\":689:694   */\n      dup3\n        /* \"#utility.yul\":656:695   */\n      tag_195\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":711:782   */\n      tag_240\n        /* \"#utility.yul\":775:781   */\n      dup2\n        /* \"#utility.yul\":770:773   */\n      dup6\n        /* \"#utility.yul\":711:782   */\n      tag_196\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":704:782   */\n      swap4\n      pop\n        /* \"#utility.yul\":791:856   */\n      tag_241\n        /* \"#utility.yul\":849:855   */\n      dup2\n        /* \"#utility.yul\":844:847   */\n      dup6\n        /* \"#utility.yul\":837:841   */\n      0x20\n        /* \"#utility.yul\":830:835   */\n      dup7\n        /* \"#utility.yul\":826:842   */\n      add\n        /* \"#utility.yul\":791:856   */\n      tag_197\n      jump\t// in\n    tag_241:\n        /* \"#utility.yul\":881:910   */\n      tag_242\n        /* \"#utility.yul\":903:909   */\n      dup2\n        /* \"#utility.yul\":881:910   */\n      tag_198\n      jump\t// in\n    tag_242:\n        /* \"#utility.yul\":876:879   */\n      dup5\n        /* \"#utility.yul\":872:911   */\n      add\n        /* \"#utility.yul\":865:911   */\n      swap2\n      pop\n        /* \"#utility.yul\":632:917   */\n      pop\n        /* \"#utility.yul\":540:917   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":923:1236   */\n    tag_26:\n        /* \"#utility.yul\":1036:1040   */\n      0x00\n        /* \"#utility.yul\":1074:1076   */\n      0x20\n        /* \"#utility.yul\":1063:1072   */\n      dup3\n        /* \"#utility.yul\":1059:1077   */\n      add\n        /* \"#utility.yul\":1051:1077   */\n      swap1\n      pop\n        /* \"#utility.yul\":1123:1132   */\n      dup2\n        /* \"#utility.yul\":1117:1121   */\n      dup2\n        /* \"#utility.yul\":1113:1133   */\n      sub\n        /* \"#utility.yul\":1109:1110   */\n      0x00\n        /* \"#utility.yul\":1098:1107   */\n      dup4\n        /* \"#utility.yul\":1094:1111   */\n      add\n        /* \"#utility.yul\":1087:1134   */\n      mstore\n        /* \"#utility.yul\":1151:1229   */\n      tag_244\n        /* \"#utility.yul\":1224:1228   */\n      dup2\n        /* \"#utility.yul\":1215:1221   */\n      dup5\n        /* \"#utility.yul\":1151:1229   */\n      tag_199\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":1143:1229   */\n      swap1\n      pop\n        /* \"#utility.yul\":923:1236   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1323:1440   */\n    tag_201:\n        /* \"#utility.yul\":1432:1433   */\n      0x00\n        /* \"#utility.yul\":1429:1430   */\n      0x00\n        /* \"#utility.yul\":1422:1434   */\n      revert\n        /* \"#utility.yul\":1569:1695   */\n    tag_203:\n        /* \"#utility.yul\":1606:1613   */\n      0x00\n        /* \"#utility.yul\":1646:1688   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1639:1644   */\n      dup3\n        /* \"#utility.yul\":1635:1689   */\n      and\n        /* \"#utility.yul\":1624:1689   */\n      swap1\n      pop\n        /* \"#utility.yul\":1569:1695   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1701:1797   */\n    tag_204:\n        /* \"#utility.yul\":1738:1745   */\n      0x00\n        /* \"#utility.yul\":1767:1791   */\n      tag_250\n        /* \"#utility.yul\":1785:1790   */\n      dup3\n        /* \"#utility.yul\":1767:1791   */\n      tag_203\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":1756:1791   */\n      swap1\n      pop\n        /* \"#utility.yul\":1701:1797   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1803:1925   */\n    tag_205:\n        /* \"#utility.yul\":1876:1900   */\n      tag_252\n        /* \"#utility.yul\":1894:1899   */\n      dup2\n        /* \"#utility.yul\":1876:1900   */\n      tag_204\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":1869:1874   */\n      dup2\n        /* \"#utility.yul\":1866:1901   */\n      eq\n        /* \"#utility.yul\":1856:1919   */\n      tag_253\n      jumpi\n        /* \"#utility.yul\":1915:1916   */\n      0x00\n        /* \"#utility.yul\":1912:1913   */\n      0x00\n        /* \"#utility.yul\":1905:1917   */\n      revert\n        /* \"#utility.yul\":1856:1919   */\n    tag_253:\n        /* \"#utility.yul\":1803:1925   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1931:2070   */\n    tag_206:\n        /* \"#utility.yul\":1977:1982   */\n      0x00\n        /* \"#utility.yul\":2015:2021   */\n      dup2\n        /* \"#utility.yul\":2002:2022   */\n      calldataload\n        /* \"#utility.yul\":1993:2022   */\n      swap1\n      pop\n        /* \"#utility.yul\":2031:2064   */\n      tag_255\n        /* \"#utility.yul\":2058:2063   */\n      dup2\n        /* \"#utility.yul\":2031:2064   */\n      tag_205\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":1931:2070   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2076:2153   */\n    tag_207:\n        /* \"#utility.yul\":2113:2120   */\n      0x00\n        /* \"#utility.yul\":2142:2147   */\n      dup2\n        /* \"#utility.yul\":2131:2147   */\n      swap1\n      pop\n        /* \"#utility.yul\":2076:2153   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2159:2281   */\n    tag_208:\n        /* \"#utility.yul\":2232:2256   */\n      tag_258\n        /* \"#utility.yul\":2250:2255   */\n      dup2\n        /* \"#utility.yul\":2232:2256   */\n      tag_207\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":2225:2230   */\n      dup2\n        /* \"#utility.yul\":2222:2257   */\n      eq\n        /* \"#utility.yul\":2212:2275   */\n      tag_259\n      jumpi\n        /* \"#utility.yul\":2271:2272   */\n      0x00\n        /* \"#utility.yul\":2268:2269   */\n      0x00\n        /* \"#utility.yul\":2261:2273   */\n      revert\n        /* \"#utility.yul\":2212:2275   */\n    tag_259:\n        /* \"#utility.yul\":2159:2281   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2287:2426   */\n    tag_209:\n        /* \"#utility.yul\":2333:2338   */\n      0x00\n        /* \"#utility.yul\":2371:2377   */\n      dup2\n        /* \"#utility.yul\":2358:2378   */\n      calldataload\n        /* \"#utility.yul\":2349:2378   */\n      swap1\n      pop\n        /* \"#utility.yul\":2387:2420   */\n      tag_261\n        /* \"#utility.yul\":2414:2419   */\n      dup2\n        /* \"#utility.yul\":2387:2420   */\n      tag_208\n      jump\t// in\n    tag_261:\n        /* \"#utility.yul\":2287:2426   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2432:2906   */\n    tag_29:\n        /* \"#utility.yul\":2500:2506   */\n      0x00\n        /* \"#utility.yul\":2508:2514   */\n      0x00\n        /* \"#utility.yul\":2557:2559   */\n      0x40\n        /* \"#utility.yul\":2545:2554   */\n      dup4\n        /* \"#utility.yul\":2536:2543   */\n      dup6\n        /* \"#utility.yul\":2532:2555   */\n      sub\n        /* \"#utility.yul\":2528:2560   */\n      slt\n        /* \"#utility.yul\":2525:2644   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":2563:2642   */\n      tag_264\n      tag_201\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":2525:2644   */\n    tag_263:\n        /* \"#utility.yul\":2683:2684   */\n      0x00\n        /* \"#utility.yul\":2708:2761   */\n      tag_265\n        /* \"#utility.yul\":2753:2760   */\n      dup6\n        /* \"#utility.yul\":2744:2750   */\n      dup3\n        /* \"#utility.yul\":2733:2742   */\n      dup7\n        /* \"#utility.yul\":2729:2751   */\n      add\n        /* \"#utility.yul\":2708:2761   */\n      tag_206\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":2698:2761   */\n      swap3\n      pop\n        /* \"#utility.yul\":2654:2771   */\n      pop\n        /* \"#utility.yul\":2810:2812   */\n      0x20\n        /* \"#utility.yul\":2836:2889   */\n      tag_266\n        /* \"#utility.yul\":2881:2888   */\n      dup6\n        /* \"#utility.yul\":2872:2878   */\n      dup3\n        /* \"#utility.yul\":2861:2870   */\n      dup7\n        /* \"#utility.yul\":2857:2879   */\n      add\n        /* \"#utility.yul\":2836:2889   */\n      tag_209\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":2826:2889   */\n      swap2\n      pop\n        /* \"#utility.yul\":2781:2899   */\n      pop\n        /* \"#utility.yul\":2432:2906   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2912:3002   */\n    tag_210:\n        /* \"#utility.yul\":2946:2953   */\n      0x00\n        /* \"#utility.yul\":2989:2994   */\n      dup2\n        /* \"#utility.yul\":2982:2995   */\n      iszero\n        /* \"#utility.yul\":2975:2996   */\n      iszero\n        /* \"#utility.yul\":2964:2996   */\n      swap1\n      pop\n        /* \"#utility.yul\":2912:3002   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3008:3117   */\n    tag_211:\n        /* \"#utility.yul\":3089:3110   */\n      tag_269\n        /* \"#utility.yul\":3104:3109   */\n      dup2\n        /* \"#utility.yul\":3089:3110   */\n      tag_210\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":3084:3087   */\n      dup3\n        /* \"#utility.yul\":3077:3111   */\n      mstore\n        /* \"#utility.yul\":3008:3117   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3123:3333   */\n    tag_32:\n        /* \"#utility.yul\":3210:3214   */\n      0x00\n        /* \"#utility.yul\":3248:3250   */\n      0x20\n        /* \"#utility.yul\":3237:3246   */\n      dup3\n        /* \"#utility.yul\":3233:3251   */\n      add\n        /* \"#utility.yul\":3225:3251   */\n      swap1\n      pop\n        /* \"#utility.yul\":3261:3326   */\n      tag_271\n        /* \"#utility.yul\":3323:3324   */\n      0x00\n        /* \"#utility.yul\":3312:3321   */\n      dup4\n        /* \"#utility.yul\":3308:3325   */\n      add\n        /* \"#utility.yul\":3299:3305   */\n      dup5\n        /* \"#utility.yul\":3261:3326   */\n      tag_211\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":3123:3333   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3339:3457   */\n    tag_212:\n        /* \"#utility.yul\":3426:3450   */\n      tag_273\n        /* \"#utility.yul\":3444:3449   */\n      dup2\n        /* \"#utility.yul\":3426:3450   */\n      tag_207\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":3421:3424   */\n      dup3\n        /* \"#utility.yul\":3414:3451   */\n      mstore\n        /* \"#utility.yul\":3339:3457   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3463:3685   */\n    tag_36:\n        /* \"#utility.yul\":3556:3560   */\n      0x00\n        /* \"#utility.yul\":3594:3596   */\n      0x20\n        /* \"#utility.yul\":3583:3592   */\n      dup3\n        /* \"#utility.yul\":3579:3597   */\n      add\n        /* \"#utility.yul\":3571:3597   */\n      swap1\n      pop\n        /* \"#utility.yul\":3607:3678   */\n      tag_275\n        /* \"#utility.yul\":3675:3676   */\n      0x00\n        /* \"#utility.yul\":3664:3673   */\n      dup4\n        /* \"#utility.yul\":3660:3677   */\n      add\n        /* \"#utility.yul\":3651:3657   */\n      dup5\n        /* \"#utility.yul\":3607:3678   */\n      tag_212\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":3463:3685   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3691:4310   */\n    tag_39:\n        /* \"#utility.yul\":3768:3774   */\n      0x00\n        /* \"#utility.yul\":3776:3782   */\n      0x00\n        /* \"#utility.yul\":3784:3790   */\n      0x00\n        /* \"#utility.yul\":3833:3835   */\n      0x60\n        /* \"#utility.yul\":3821:3830   */\n      dup5\n        /* \"#utility.yul\":3812:3819   */\n      dup7\n        /* \"#utility.yul\":3808:3831   */\n      sub\n        /* \"#utility.yul\":3804:3836   */\n      slt\n        /* \"#utility.yul\":3801:3920   */\n      iszero\n      tag_277\n      jumpi\n        /* \"#utility.yul\":3839:3918   */\n      tag_278\n      tag_201\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":3801:3920   */\n    tag_277:\n        /* \"#utility.yul\":3959:3960   */\n      0x00\n        /* \"#utility.yul\":3984:4037   */\n      tag_279\n        /* \"#utility.yul\":4029:4036   */\n      dup7\n        /* \"#utility.yul\":4020:4026   */\n      dup3\n        /* \"#utility.yul\":4009:4018   */\n      dup8\n        /* \"#utility.yul\":4005:4027   */\n      add\n        /* \"#utility.yul\":3984:4037   */\n      tag_206\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":3974:4037   */\n      swap4\n      pop\n        /* \"#utility.yul\":3930:4047   */\n      pop\n        /* \"#utility.yul\":4086:4088   */\n      0x20\n        /* \"#utility.yul\":4112:4165   */\n      tag_280\n        /* \"#utility.yul\":4157:4164   */\n      dup7\n        /* \"#utility.yul\":4148:4154   */\n      dup3\n        /* \"#utility.yul\":4137:4146   */\n      dup8\n        /* \"#utility.yul\":4133:4155   */\n      add\n        /* \"#utility.yul\":4112:4165   */\n      tag_206\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":4102:4165   */\n      swap3\n      pop\n        /* \"#utility.yul\":4057:4175   */\n      pop\n        /* \"#utility.yul\":4214:4216   */\n      0x40\n        /* \"#utility.yul\":4240:4293   */\n      tag_281\n        /* \"#utility.yul\":4285:4292   */\n      dup7\n        /* \"#utility.yul\":4276:4282   */\n      dup3\n        /* \"#utility.yul\":4265:4274   */\n      dup8\n        /* \"#utility.yul\":4261:4283   */\n      add\n        /* \"#utility.yul\":4240:4293   */\n      tag_209\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":4230:4293   */\n      swap2\n      pop\n        /* \"#utility.yul\":4185:4303   */\n      pop\n        /* \"#utility.yul\":3691:4310   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4316:4402   */\n    tag_213:\n        /* \"#utility.yul\":4351:4358   */\n      0x00\n        /* \"#utility.yul\":4391:4395   */\n      0xff\n        /* \"#utility.yul\":4384:4389   */\n      dup3\n        /* \"#utility.yul\":4380:4396   */\n      and\n        /* \"#utility.yul\":4369:4396   */\n      swap1\n      pop\n        /* \"#utility.yul\":4316:4402   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4408:4520   */\n    tag_214:\n        /* \"#utility.yul\":4491:4513   */\n      tag_284\n        /* \"#utility.yul\":4507:4512   */\n      dup2\n        /* \"#utility.yul\":4491:4513   */\n      tag_213\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":4486:4489   */\n      dup3\n        /* \"#utility.yul\":4479:4514   */\n      mstore\n        /* \"#utility.yul\":4408:4520   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4526:4740   */\n    tag_45:\n        /* \"#utility.yul\":4615:4619   */\n      0x00\n        /* \"#utility.yul\":4653:4655   */\n      0x20\n        /* \"#utility.yul\":4642:4651   */\n      dup3\n        /* \"#utility.yul\":4638:4656   */\n      add\n        /* \"#utility.yul\":4630:4656   */\n      swap1\n      pop\n        /* \"#utility.yul\":4666:4733   */\n      tag_286\n        /* \"#utility.yul\":4730:4731   */\n      0x00\n        /* \"#utility.yul\":4719:4728   */\n      dup4\n        /* \"#utility.yul\":4715:4732   */\n      add\n        /* \"#utility.yul\":4706:4712   */\n      dup5\n        /* \"#utility.yul\":4666:4733   */\n      tag_214\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":4526:4740   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4746:5075   */\n    tag_51:\n        /* \"#utility.yul\":4805:4811   */\n      0x00\n        /* \"#utility.yul\":4854:4856   */\n      0x20\n        /* \"#utility.yul\":4842:4851   */\n      dup3\n        /* \"#utility.yul\":4833:4840   */\n      dup5\n        /* \"#utility.yul\":4829:4852   */\n      sub\n        /* \"#utility.yul\":4825:4857   */\n      slt\n        /* \"#utility.yul\":4822:4941   */\n      iszero\n      tag_288\n      jumpi\n        /* \"#utility.yul\":4860:4939   */\n      tag_289\n      tag_201\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":4822:4941   */\n    tag_288:\n        /* \"#utility.yul\":4980:4981   */\n      0x00\n        /* \"#utility.yul\":5005:5058   */\n      tag_290\n        /* \"#utility.yul\":5050:5057   */\n      dup5\n        /* \"#utility.yul\":5041:5047   */\n      dup3\n        /* \"#utility.yul\":5030:5039   */\n      dup6\n        /* \"#utility.yul\":5026:5048   */\n      add\n        /* \"#utility.yul\":5005:5058   */\n      tag_206\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":4995:5058   */\n      swap2\n      pop\n        /* \"#utility.yul\":4951:5068   */\n      pop\n        /* \"#utility.yul\":4746:5075   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5081:5199   */\n    tag_215:\n        /* \"#utility.yul\":5168:5192   */\n      tag_292\n        /* \"#utility.yul\":5186:5191   */\n      dup2\n        /* \"#utility.yul\":5168:5192   */\n      tag_204\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":5163:5166   */\n      dup3\n        /* \"#utility.yul\":5156:5193   */\n      mstore\n        /* \"#utility.yul\":5081:5199   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5205:5427   */\n    tag_62:\n        /* \"#utility.yul\":5298:5302   */\n      0x00\n        /* \"#utility.yul\":5336:5338   */\n      0x20\n        /* \"#utility.yul\":5325:5334   */\n      dup3\n        /* \"#utility.yul\":5321:5339   */\n      add\n        /* \"#utility.yul\":5313:5339   */\n      swap1\n      pop\n        /* \"#utility.yul\":5349:5420   */\n      tag_294\n        /* \"#utility.yul\":5417:5418   */\n      0x00\n        /* \"#utility.yul\":5406:5415   */\n      dup4\n        /* \"#utility.yul\":5402:5419   */\n      add\n        /* \"#utility.yul\":5393:5399   */\n      dup5\n        /* \"#utility.yul\":5349:5420   */\n      tag_215\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":5205:5427   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5433:5907   */\n    tag_78:\n        /* \"#utility.yul\":5501:5507   */\n      0x00\n        /* \"#utility.yul\":5509:5515   */\n      0x00\n        /* \"#utility.yul\":5558:5560   */\n      0x40\n        /* \"#utility.yul\":5546:5555   */\n      dup4\n        /* \"#utility.yul\":5537:5544   */\n      dup6\n        /* \"#utility.yul\":5533:5556   */\n      sub\n        /* \"#utility.yul\":5529:5561   */\n      slt\n        /* \"#utility.yul\":5526:5645   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":5564:5643   */\n      tag_297\n      tag_201\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":5526:5645   */\n    tag_296:\n        /* \"#utility.yul\":5684:5685   */\n      0x00\n        /* \"#utility.yul\":5709:5762   */\n      tag_298\n        /* \"#utility.yul\":5754:5761   */\n      dup6\n        /* \"#utility.yul\":5745:5751   */\n      dup3\n        /* \"#utility.yul\":5734:5743   */\n      dup7\n        /* \"#utility.yul\":5730:5752   */\n      add\n        /* \"#utility.yul\":5709:5762   */\n      tag_206\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":5699:5762   */\n      swap3\n      pop\n        /* \"#utility.yul\":5655:5772   */\n      pop\n        /* \"#utility.yul\":5811:5813   */\n      0x20\n        /* \"#utility.yul\":5837:5890   */\n      tag_299\n        /* \"#utility.yul\":5882:5889   */\n      dup6\n        /* \"#utility.yul\":5873:5879   */\n      dup3\n        /* \"#utility.yul\":5862:5871   */\n      dup7\n        /* \"#utility.yul\":5858:5880   */\n      add\n        /* \"#utility.yul\":5837:5890   */\n      tag_206\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":5827:5890   */\n      swap2\n      pop\n        /* \"#utility.yul\":5782:5900   */\n      pop\n        /* \"#utility.yul\":5433:5907   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5913:6093   */\n    tag_216:\n        /* \"#utility.yul\":5961:6038   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":5958:5959   */\n      0x00\n        /* \"#utility.yul\":5951:6039   */\n      mstore\n        /* \"#utility.yul\":6058:6062   */\n      0x22\n        /* \"#utility.yul\":6055:6056   */\n      0x04\n        /* \"#utility.yul\":6048:6063   */\n      mstore\n        /* \"#utility.yul\":6082:6086   */\n      0x24\n        /* \"#utility.yul\":6079:6080   */\n      0x00\n        /* \"#utility.yul\":6072:6087   */\n      revert\n        /* \"#utility.yul\":6099:6419   */\n    tag_89:\n        /* \"#utility.yul\":6143:6149   */\n      0x00\n        /* \"#utility.yul\":6180:6181   */\n      0x02\n        /* \"#utility.yul\":6174:6178   */\n      dup3\n        /* \"#utility.yul\":6170:6182   */\n      div\n        /* \"#utility.yul\":6160:6182   */\n      swap1\n      pop\n        /* \"#utility.yul\":6227:6228   */\n      0x01\n        /* \"#utility.yul\":6221:6225   */\n      dup3\n        /* \"#utility.yul\":6217:6229   */\n      and\n        /* \"#utility.yul\":6248:6266   */\n      dup1\n        /* \"#utility.yul\":6238:6319   */\n      tag_302\n      jumpi\n        /* \"#utility.yul\":6304:6308   */\n      0x7f\n        /* \"#utility.yul\":6296:6302   */\n      dup3\n        /* \"#utility.yul\":6292:6309   */\n      and\n        /* \"#utility.yul\":6282:6309   */\n      swap2\n      pop\n        /* \"#utility.yul\":6238:6319   */\n    tag_302:\n        /* \"#utility.yul\":6366:6368   */\n      0x20\n        /* \"#utility.yul\":6358:6364   */\n      dup3\n        /* \"#utility.yul\":6355:6369   */\n      lt\n        /* \"#utility.yul\":6335:6353   */\n      dup2\n        /* \"#utility.yul\":6332:6370   */\n      sub\n        /* \"#utility.yul\":6329:6413   */\n      tag_303\n      jumpi\n        /* \"#utility.yul\":6385:6403   */\n      tag_304\n      tag_216\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":6329:6413   */\n    tag_303:\n        /* \"#utility.yul\":6150:6419   */\n      pop\n        /* \"#utility.yul\":6099:6419   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6425:6597   */\n    tag_217:\n        /* \"#utility.yul\":6565:6589   */\n      0x5465616d20746f6b656e7320617265206c6f636b656400000000000000000000\n        /* \"#utility.yul\":6561:6562   */\n      0x00\n        /* \"#utility.yul\":6553:6559   */\n      dup3\n        /* \"#utility.yul\":6549:6563   */\n      add\n        /* \"#utility.yul\":6542:6590   */\n      mstore\n        /* \"#utility.yul\":6425:6597   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6603:6969   */\n    tag_218:\n        /* \"#utility.yul\":6745:6748   */\n      0x00\n        /* \"#utility.yul\":6766:6833   */\n      tag_307\n        /* \"#utility.yul\":6830:6832   */\n      0x16\n        /* \"#utility.yul\":6825:6828   */\n      dup4\n        /* \"#utility.yul\":6766:6833   */\n      tag_196\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":6759:6833   */\n      swap2\n      pop\n        /* \"#utility.yul\":6842:6935   */\n      tag_308\n        /* \"#utility.yul\":6931:6934   */\n      dup3\n        /* \"#utility.yul\":6842:6935   */\n      tag_217\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":6960:6962   */\n      0x20\n        /* \"#utility.yul\":6955:6958   */\n      dup3\n        /* \"#utility.yul\":6951:6963   */\n      add\n        /* \"#utility.yul\":6944:6963   */\n      swap1\n      pop\n        /* \"#utility.yul\":6603:6969   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6975:7394   */\n    tag_103:\n        /* \"#utility.yul\":7141:7145   */\n      0x00\n        /* \"#utility.yul\":7179:7181   */\n      0x20\n        /* \"#utility.yul\":7168:7177   */\n      dup3\n        /* \"#utility.yul\":7164:7182   */\n      add\n        /* \"#utility.yul\":7156:7182   */\n      swap1\n      pop\n        /* \"#utility.yul\":7228:7237   */\n      dup2\n        /* \"#utility.yul\":7222:7226   */\n      dup2\n        /* \"#utility.yul\":7218:7238   */\n      sub\n        /* \"#utility.yul\":7214:7215   */\n      0x00\n        /* \"#utility.yul\":7203:7212   */\n      dup4\n        /* \"#utility.yul\":7199:7216   */\n      add\n        /* \"#utility.yul\":7192:7239   */\n      mstore\n        /* \"#utility.yul\":7256:7387   */\n      tag_310\n        /* \"#utility.yul\":7382:7386   */\n      dup2\n        /* \"#utility.yul\":7256:7387   */\n      tag_218\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":7248:7387   */\n      swap1\n      pop\n        /* \"#utility.yul\":6975:7394   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7400:7522   */\n    tag_219:\n        /* \"#utility.yul\":7473:7497   */\n      tag_312\n        /* \"#utility.yul\":7491:7496   */\n      dup2\n        /* \"#utility.yul\":7473:7497   */\n      tag_203\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":7466:7471   */\n      dup2\n        /* \"#utility.yul\":7463:7498   */\n      eq\n        /* \"#utility.yul\":7453:7516   */\n      tag_313\n      jumpi\n        /* \"#utility.yul\":7512:7513   */\n      0x00\n        /* \"#utility.yul\":7509:7510   */\n      0x00\n        /* \"#utility.yul\":7502:7514   */\n      revert\n        /* \"#utility.yul\":7453:7516   */\n    tag_313:\n        /* \"#utility.yul\":7400:7522   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7528:7671   */\n    tag_220:\n        /* \"#utility.yul\":7585:7590   */\n      0x00\n        /* \"#utility.yul\":7616:7622   */\n      dup2\n        /* \"#utility.yul\":7610:7623   */\n      mload\n        /* \"#utility.yul\":7601:7623   */\n      swap1\n      pop\n        /* \"#utility.yul\":7632:7665   */\n      tag_315\n        /* \"#utility.yul\":7659:7664   */\n      dup2\n        /* \"#utility.yul\":7632:7665   */\n      tag_219\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":7528:7671   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7677:7767   */\n    tag_221:\n        /* \"#utility.yul\":7712:7719   */\n      0x00\n        /* \"#utility.yul\":7755:7760   */\n      dup2\n        /* \"#utility.yul\":7752:7753   */\n      0x02\n        /* \"#utility.yul\":7741:7761   */\n      signextend\n        /* \"#utility.yul\":7730:7761   */\n      swap1\n      pop\n        /* \"#utility.yul\":7677:7767   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7773:7891   */\n    tag_222:\n        /* \"#utility.yul\":7844:7866   */\n      tag_318\n        /* \"#utility.yul\":7860:7865   */\n      dup2\n        /* \"#utility.yul\":7844:7866   */\n      tag_221\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":7837:7842   */\n      dup2\n        /* \"#utility.yul\":7834:7867   */\n      eq\n        /* \"#utility.yul\":7824:7885   */\n      tag_319\n      jumpi\n        /* \"#utility.yul\":7881:7882   */\n      0x00\n        /* \"#utility.yul\":7878:7879   */\n      0x00\n        /* \"#utility.yul\":7871:7883   */\n      revert\n        /* \"#utility.yul\":7824:7885   */\n    tag_319:\n        /* \"#utility.yul\":7773:7891   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7897:8036   */\n    tag_223:\n        /* \"#utility.yul\":7952:7957   */\n      0x00\n        /* \"#utility.yul\":7983:7989   */\n      dup2\n        /* \"#utility.yul\":7977:7990   */\n      mload\n        /* \"#utility.yul\":7968:7990   */\n      swap1\n      pop\n        /* \"#utility.yul\":7999:8030   */\n      tag_321\n        /* \"#utility.yul\":8024:8029   */\n      dup2\n        /* \"#utility.yul\":7999:8030   */\n      tag_222\n      jump\t// in\n    tag_321:\n        /* \"#utility.yul\":7897:8036   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8042:8131   */\n    tag_224:\n        /* \"#utility.yul\":8078:8085   */\n      0x00\n        /* \"#utility.yul\":8118:8124   */\n      0xffff\n        /* \"#utility.yul\":8111:8116   */\n      dup3\n        /* \"#utility.yul\":8107:8125   */\n      and\n        /* \"#utility.yul\":8096:8125   */\n      swap1\n      pop\n        /* \"#utility.yul\":8042:8131   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8137:8257   */\n    tag_225:\n        /* \"#utility.yul\":8209:8232   */\n      tag_324\n        /* \"#utility.yul\":8226:8231   */\n      dup2\n        /* \"#utility.yul\":8209:8232   */\n      tag_224\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":8202:8207   */\n      dup2\n        /* \"#utility.yul\":8199:8233   */\n      eq\n        /* \"#utility.yul\":8189:8251   */\n      tag_325\n      jumpi\n        /* \"#utility.yul\":8247:8248   */\n      0x00\n        /* \"#utility.yul\":8244:8245   */\n      0x00\n        /* \"#utility.yul\":8237:8249   */\n      revert\n        /* \"#utility.yul\":8189:8251   */\n    tag_325:\n        /* \"#utility.yul\":8137:8257   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8263:8404   */\n    tag_226:\n        /* \"#utility.yul\":8319:8324   */\n      0x00\n        /* \"#utility.yul\":8350:8356   */\n      dup2\n        /* \"#utility.yul\":8344:8357   */\n      mload\n        /* \"#utility.yul\":8335:8357   */\n      swap1\n      pop\n        /* \"#utility.yul\":8366:8398   */\n      tag_327\n        /* \"#utility.yul\":8392:8397   */\n      dup2\n        /* \"#utility.yul\":8366:8398   */\n      tag_225\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":8263:8404   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8410:8528   */\n    tag_227:\n        /* \"#utility.yul\":8481:8503   */\n      tag_329\n        /* \"#utility.yul\":8497:8502   */\n      dup2\n        /* \"#utility.yul\":8481:8503   */\n      tag_213\n      jump\t// in\n    tag_329:\n        /* \"#utility.yul\":8474:8479   */\n      dup2\n        /* \"#utility.yul\":8471:8504   */\n      eq\n        /* \"#utility.yul\":8461:8522   */\n      tag_330\n      jumpi\n        /* \"#utility.yul\":8518:8519   */\n      0x00\n        /* \"#utility.yul\":8515:8516   */\n      0x00\n        /* \"#utility.yul\":8508:8520   */\n      revert\n        /* \"#utility.yul\":8461:8522   */\n    tag_330:\n        /* \"#utility.yul\":8410:8528   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8534:8673   */\n    tag_228:\n        /* \"#utility.yul\":8589:8594   */\n      0x00\n        /* \"#utility.yul\":8620:8626   */\n      dup2\n        /* \"#utility.yul\":8614:8627   */\n      mload\n        /* \"#utility.yul\":8605:8627   */\n      swap1\n      pop\n        /* \"#utility.yul\":8636:8667   */\n      tag_332\n        /* \"#utility.yul\":8661:8666   */\n      dup2\n        /* \"#utility.yul\":8636:8667   */\n      tag_227\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":8534:8673   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8679:8795   */\n    tag_229:\n        /* \"#utility.yul\":8749:8770   */\n      tag_334\n        /* \"#utility.yul\":8764:8769   */\n      dup2\n        /* \"#utility.yul\":8749:8770   */\n      tag_210\n      jump\t// in\n    tag_334:\n        /* \"#utility.yul\":8742:8747   */\n      dup2\n        /* \"#utility.yul\":8739:8771   */\n      eq\n        /* \"#utility.yul\":8729:8789   */\n      tag_335\n      jumpi\n        /* \"#utility.yul\":8785:8786   */\n      0x00\n        /* \"#utility.yul\":8782:8783   */\n      0x00\n        /* \"#utility.yul\":8775:8787   */\n      revert\n        /* \"#utility.yul\":8729:8789   */\n    tag_335:\n        /* \"#utility.yul\":8679:8795   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8801:8938   */\n    tag_230:\n        /* \"#utility.yul\":8855:8860   */\n      0x00\n        /* \"#utility.yul\":8886:8892   */\n      dup2\n        /* \"#utility.yul\":8880:8893   */\n      mload\n        /* \"#utility.yul\":8871:8893   */\n      swap1\n      pop\n        /* \"#utility.yul\":8902:8932   */\n      tag_337\n        /* \"#utility.yul\":8926:8931   */\n      dup2\n        /* \"#utility.yul\":8902:8932   */\n      tag_229\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":8801:8938   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8944:10215   */\n    tag_133:\n        /* \"#utility.yul\":9058:9064   */\n      0x00\n        /* \"#utility.yul\":9066:9072   */\n      0x00\n        /* \"#utility.yul\":9074:9080   */\n      0x00\n        /* \"#utility.yul\":9082:9088   */\n      0x00\n        /* \"#utility.yul\":9090:9096   */\n      0x00\n        /* \"#utility.yul\":9098:9104   */\n      0x00\n        /* \"#utility.yul\":9106:9112   */\n      0x00\n        /* \"#utility.yul\":9155:9158   */\n      0xe0\n        /* \"#utility.yul\":9143:9152   */\n      dup9\n        /* \"#utility.yul\":9134:9141   */\n      dup11\n        /* \"#utility.yul\":9130:9153   */\n      sub\n        /* \"#utility.yul\":9126:9159   */\n      slt\n        /* \"#utility.yul\":9123:9243   */\n      iszero\n      tag_339\n      jumpi\n        /* \"#utility.yul\":9162:9241   */\n      tag_340\n      tag_201\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":9123:9243   */\n    tag_339:\n        /* \"#utility.yul\":9282:9283   */\n      0x00\n        /* \"#utility.yul\":9307:9371   */\n      tag_341\n        /* \"#utility.yul\":9363:9370   */\n      dup11\n        /* \"#utility.yul\":9354:9360   */\n      dup3\n        /* \"#utility.yul\":9343:9352   */\n      dup12\n        /* \"#utility.yul\":9339:9361   */\n      add\n        /* \"#utility.yul\":9307:9371   */\n      tag_220\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":9297:9371   */\n      swap8\n      pop\n        /* \"#utility.yul\":9253:9381   */\n      pop\n        /* \"#utility.yul\":9420:9422   */\n      0x20\n        /* \"#utility.yul\":9446:9508   */\n      tag_342\n        /* \"#utility.yul\":9500:9507   */\n      dup11\n        /* \"#utility.yul\":9491:9497   */\n      dup3\n        /* \"#utility.yul\":9480:9489   */\n      dup12\n        /* \"#utility.yul\":9476:9498   */\n      add\n        /* \"#utility.yul\":9446:9508   */\n      tag_223\n      jump\t// in\n    tag_342:\n        /* \"#utility.yul\":9436:9508   */\n      swap7\n      pop\n        /* \"#utility.yul\":9391:9518   */\n      pop\n        /* \"#utility.yul\":9557:9559   */\n      0x40\n        /* \"#utility.yul\":9583:9646   */\n      tag_343\n        /* \"#utility.yul\":9638:9645   */\n      dup11\n        /* \"#utility.yul\":9629:9635   */\n      dup3\n        /* \"#utility.yul\":9618:9627   */\n      dup12\n        /* \"#utility.yul\":9614:9636   */\n      add\n        /* \"#utility.yul\":9583:9646   */\n      tag_226\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":9573:9646   */\n      swap6\n      pop\n        /* \"#utility.yul\":9528:9656   */\n      pop\n        /* \"#utility.yul\":9695:9697   */\n      0x60\n        /* \"#utility.yul\":9721:9784   */\n      tag_344\n        /* \"#utility.yul\":9776:9783   */\n      dup11\n        /* \"#utility.yul\":9767:9773   */\n      dup3\n        /* \"#utility.yul\":9756:9765   */\n      dup12\n        /* \"#utility.yul\":9752:9774   */\n      add\n        /* \"#utility.yul\":9721:9784   */\n      tag_226\n      jump\t// in\n    tag_344:\n        /* \"#utility.yul\":9711:9784   */\n      swap5\n      pop\n        /* \"#utility.yul\":9666:9794   */\n      pop\n        /* \"#utility.yul\":9833:9836   */\n      0x80\n        /* \"#utility.yul\":9860:9923   */\n      tag_345\n        /* \"#utility.yul\":9915:9922   */\n      dup11\n        /* \"#utility.yul\":9906:9912   */\n      dup3\n        /* \"#utility.yul\":9895:9904   */\n      dup12\n        /* \"#utility.yul\":9891:9913   */\n      add\n        /* \"#utility.yul\":9860:9923   */\n      tag_226\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":9850:9923   */\n      swap4\n      pop\n        /* \"#utility.yul\":9804:9933   */\n      pop\n        /* \"#utility.yul\":9972:9975   */\n      0xa0\n        /* \"#utility.yul\":9999:10061   */\n      tag_346\n        /* \"#utility.yul\":10053:10060   */\n      dup11\n        /* \"#utility.yul\":10044:10050   */\n      dup3\n        /* \"#utility.yul\":10033:10042   */\n      dup12\n        /* \"#utility.yul\":10029:10051   */\n      add\n        /* \"#utility.yul\":9999:10061   */\n      tag_228\n      jump\t// in\n    tag_346:\n        /* \"#utility.yul\":9989:10061   */\n      swap3\n      pop\n        /* \"#utility.yul\":9943:10071   */\n      pop\n        /* \"#utility.yul\":10110:10113   */\n      0xc0\n        /* \"#utility.yul\":10137:10198   */\n      tag_347\n        /* \"#utility.yul\":10190:10197   */\n      dup11\n        /* \"#utility.yul\":10181:10187   */\n      dup3\n        /* \"#utility.yul\":10170:10179   */\n      dup12\n        /* \"#utility.yul\":10166:10188   */\n      add\n        /* \"#utility.yul\":10137:10198   */\n      tag_230\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":10127:10198   */\n      swap2\n      pop\n        /* \"#utility.yul\":10081:10208   */\n      pop\n        /* \"#utility.yul\":8944:10215   */\n      swap3\n      swap6\n      swap9\n      swap2\n      swap5\n      swap8\n      pop\n      swap3\n      swap6\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10221:10401   */\n    tag_231:\n        /* \"#utility.yul\":10269:10346   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10266:10267   */\n      0x00\n        /* \"#utility.yul\":10259:10347   */\n      mstore\n        /* \"#utility.yul\":10366:10370   */\n      0x11\n        /* \"#utility.yul\":10363:10364   */\n      0x04\n        /* \"#utility.yul\":10356:10371   */\n      mstore\n        /* \"#utility.yul\":10390:10394   */\n      0x24\n        /* \"#utility.yul\":10387:10388   */\n      0x00\n        /* \"#utility.yul\":10380:10395   */\n      revert\n        /* \"#utility.yul\":10407:10817   */\n    tag_135:\n        /* \"#utility.yul\":10447:10454   */\n      0x00\n        /* \"#utility.yul\":10470:10490   */\n      tag_350\n        /* \"#utility.yul\":10488:10489   */\n      dup3\n        /* \"#utility.yul\":10470:10490   */\n      tag_207\n      jump\t// in\n    tag_350:\n        /* \"#utility.yul\":10465:10490   */\n      swap2\n      pop\n        /* \"#utility.yul\":10504:10524   */\n      tag_351\n        /* \"#utility.yul\":10522:10523   */\n      dup4\n        /* \"#utility.yul\":10504:10524   */\n      tag_207\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":10499:10524   */\n      swap3\n      pop\n        /* \"#utility.yul\":10559:10560   */\n      dup3\n        /* \"#utility.yul\":10556:10557   */\n      dup3\n        /* \"#utility.yul\":10552:10561   */\n      mul\n        /* \"#utility.yul\":10581:10611   */\n      tag_352\n        /* \"#utility.yul\":10599:10610   */\n      dup2\n        /* \"#utility.yul\":10581:10611   */\n      tag_207\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":10570:10611   */\n      swap2\n      pop\n        /* \"#utility.yul\":10760:10761   */\n      dup3\n        /* \"#utility.yul\":10751:10758   */\n      dup3\n        /* \"#utility.yul\":10747:10762   */\n      div\n        /* \"#utility.yul\":10744:10745   */\n      dup5\n        /* \"#utility.yul\":10741:10763   */\n      eq\n        /* \"#utility.yul\":10721:10722   */\n      dup4\n        /* \"#utility.yul\":10714:10723   */\n      iszero\n        /* \"#utility.yul\":10694:10777   */\n      or\n        /* \"#utility.yul\":10671:10810   */\n      tag_353\n      jumpi\n        /* \"#utility.yul\":10790:10808   */\n      tag_354\n      tag_231\n      jump\t// in\n    tag_354:\n        /* \"#utility.yul\":10671:10810   */\n    tag_353:\n        /* \"#utility.yul\":10455:10817   */\n      pop\n        /* \"#utility.yul\":10407:10817   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10823:11003   */\n    tag_232:\n        /* \"#utility.yul\":10871:10948   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10868:10869   */\n      0x00\n        /* \"#utility.yul\":10861:10949   */\n      mstore\n        /* \"#utility.yul\":10968:10972   */\n      0x12\n        /* \"#utility.yul\":10965:10966   */\n      0x04\n        /* \"#utility.yul\":10958:10973   */\n      mstore\n        /* \"#utility.yul\":10992:10996   */\n      0x24\n        /* \"#utility.yul\":10989:10990   */\n      0x00\n        /* \"#utility.yul\":10982:10997   */\n      revert\n        /* \"#utility.yul\":11009:11194   */\n    tag_137:\n        /* \"#utility.yul\":11049:11050   */\n      0x00\n        /* \"#utility.yul\":11066:11086   */\n      tag_357\n        /* \"#utility.yul\":11084:11085   */\n      dup3\n        /* \"#utility.yul\":11066:11086   */\n      tag_207\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":11061:11086   */\n      swap2\n      pop\n        /* \"#utility.yul\":11100:11120   */\n      tag_358\n        /* \"#utility.yul\":11118:11119   */\n      dup4\n        /* \"#utility.yul\":11100:11120   */\n      tag_207\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":11095:11120   */\n      swap3\n      pop\n        /* \"#utility.yul\":11139:11140   */\n      dup3\n        /* \"#utility.yul\":11129:11164   */\n      tag_359\n      jumpi\n        /* \"#utility.yul\":11144:11162   */\n      tag_360\n      tag_232\n      jump\t// in\n    tag_360:\n        /* \"#utility.yul\":11129:11164   */\n    tag_359:\n        /* \"#utility.yul\":11186:11187   */\n      dup3\n        /* \"#utility.yul\":11183:11184   */\n      dup3\n        /* \"#utility.yul\":11179:11188   */\n      div\n        /* \"#utility.yul\":11174:11188   */\n      swap1\n      pop\n        /* \"#utility.yul\":11009:11194   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11200:11642   */\n    tag_176:\n        /* \"#utility.yul\":11349:11353   */\n      0x00\n        /* \"#utility.yul\":11387:11389   */\n      0x60\n        /* \"#utility.yul\":11376:11385   */\n      dup3\n        /* \"#utility.yul\":11372:11390   */\n      add\n        /* \"#utility.yul\":11364:11390   */\n      swap1\n      pop\n        /* \"#utility.yul\":11400:11471   */\n      tag_362\n        /* \"#utility.yul\":11468:11469   */\n      0x00\n        /* \"#utility.yul\":11457:11466   */\n      dup4\n        /* \"#utility.yul\":11453:11470   */\n      add\n        /* \"#utility.yul\":11444:11450   */\n      dup7\n        /* \"#utility.yul\":11400:11471   */\n      tag_215\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":11481:11553   */\n      tag_363\n        /* \"#utility.yul\":11549:11551   */\n      0x20\n        /* \"#utility.yul\":11538:11547   */\n      dup4\n        /* \"#utility.yul\":11534:11552   */\n      add\n        /* \"#utility.yul\":11525:11531   */\n      dup6\n        /* \"#utility.yul\":11481:11553   */\n      tag_212\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":11563:11635   */\n      tag_364\n        /* \"#utility.yul\":11631:11633   */\n      0x40\n        /* \"#utility.yul\":11620:11629   */\n      dup4\n        /* \"#utility.yul\":11616:11634   */\n      add\n        /* \"#utility.yul\":11607:11613   */\n      dup5\n        /* \"#utility.yul\":11563:11635   */\n      tag_212\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":11200:11642   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11648:11839   */\n    tag_188:\n        /* \"#utility.yul\":11688:11691   */\n      0x00\n        /* \"#utility.yul\":11707:11727   */\n      tag_366\n        /* \"#utility.yul\":11725:11726   */\n      dup3\n        /* \"#utility.yul\":11707:11727   */\n      tag_207\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":11702:11727   */\n      swap2\n      pop\n        /* \"#utility.yul\":11741:11761   */\n      tag_367\n        /* \"#utility.yul\":11759:11760   */\n      dup4\n        /* \"#utility.yul\":11741:11761   */\n      tag_207\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":11736:11761   */\n      swap3\n      pop\n        /* \"#utility.yul\":11784:11785   */\n      dup3\n        /* \"#utility.yul\":11781:11782   */\n      dup3\n        /* \"#utility.yul\":11777:11786   */\n      add\n        /* \"#utility.yul\":11770:11786   */\n      swap1\n      pop\n        /* \"#utility.yul\":11805:11808   */\n      dup1\n        /* \"#utility.yul\":11802:11803   */\n      dup3\n        /* \"#utility.yul\":11799:11809   */\n      gt\n        /* \"#utility.yul\":11796:11832   */\n      iszero\n      tag_368\n      jumpi\n        /* \"#utility.yul\":11812:11830   */\n      tag_369\n      tag_231\n      jump\t// in\n    tag_369:\n        /* \"#utility.yul\":11796:11832   */\n    tag_368:\n        /* \"#utility.yul\":11648:11839   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122013a47c2a630e2a262f5a64ff4cd65fe42dd9cd2ac1b308af7bb4b5c211f56b4b64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_302": {
									"entryPoint": null,
									"id": 302,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_443": {
									"entryPoint": null,
									"id": 443,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_729": {
									"entryPoint": null,
									"id": 729,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_mint_1032": {
									"entryPoint": 937,
									"id": 1032,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_539": {
									"entryPoint": 742,
									"id": 539,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_update_999": {
									"entryPoint": 1070,
									"id": 999,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory": {
									"entryPoint": 2063,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 2043,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory": {
									"entryPoint": 2167,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_address_fromMemory": {
									"entryPoint": 2212,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 3037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3171,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 3534,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 3052,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 3549,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3205,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 3602,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 1900,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 1769,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_array$_t_address_$dyn_memory_ptr": {
									"entryPoint": 1926,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 2405,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 2302,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 3077,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3483,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3390,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3280,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 2693,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 2004,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 1973,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 2531,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 2659,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 2549,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 2830,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 2423,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2357,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 2803,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 1851,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"identity": {
									"entryPoint": 2540,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 2775,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3235,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 3345,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 2312,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 3438,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1806,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 2582,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 1786,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
									"entryPoint": 1969,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 1782,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 1778,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 1790,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 2438,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 2763,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 2635,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"store_literal_in_memory_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6": {
									"entryPoint": 3093,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 2450,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 2591,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 2021,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 2628,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:12754:23",
										"nodeType": "YulBlock",
										"src": "0:12754:23",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:23",
													"nodeType": "YulBlock",
													"src": "47:35:23",
													"statements": [
														{
															"nativeSrc": "57:19:23",
															"nodeType": "YulAssignment",
															"src": "57:19:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:23",
																		"nodeType": "YulLiteral",
																		"src": "73:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:23"
																},
																"nativeSrc": "67:9:23",
																"nodeType": "YulFunctionCall",
																"src": "67:9:23"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:23"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:23",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:23",
														"nodeType": "YulTypedName",
														"src": "40:6:23",
														"type": ""
													}
												],
												"src": "7:75:23"
											},
											{
												"body": {
													"nativeSrc": "177:28:23",
													"nodeType": "YulBlock",
													"src": "177:28:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:23",
																		"nodeType": "YulLiteral",
																		"src": "194:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:23",
																		"nodeType": "YulLiteral",
																		"src": "197:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:23"
																},
																"nativeSrc": "187:12:23",
																"nodeType": "YulFunctionCall",
																"src": "187:12:23"
															},
															"nativeSrc": "187:12:23",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:23"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:23",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:23"
											},
											{
												"body": {
													"nativeSrc": "300:28:23",
													"nodeType": "YulBlock",
													"src": "300:28:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:23",
																		"nodeType": "YulLiteral",
																		"src": "317:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:23",
																		"nodeType": "YulLiteral",
																		"src": "320:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:23"
																},
																"nativeSrc": "310:12:23",
																"nodeType": "YulFunctionCall",
																"src": "310:12:23"
															},
															"nativeSrc": "310:12:23",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:23"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:23",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:23"
											},
											{
												"body": {
													"nativeSrc": "423:28:23",
													"nodeType": "YulBlock",
													"src": "423:28:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "440:1:23",
																		"nodeType": "YulLiteral",
																		"src": "440:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "443:1:23",
																		"nodeType": "YulLiteral",
																		"src": "443:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "433:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "433:6:23"
																},
																"nativeSrc": "433:12:23",
																"nodeType": "YulFunctionCall",
																"src": "433:12:23"
															},
															"nativeSrc": "433:12:23",
															"nodeType": "YulExpressionStatement",
															"src": "433:12:23"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nativeSrc": "334:117:23",
												"nodeType": "YulFunctionDefinition",
												"src": "334:117:23"
											},
											{
												"body": {
													"nativeSrc": "505:54:23",
													"nodeType": "YulBlock",
													"src": "505:54:23",
													"statements": [
														{
															"nativeSrc": "515:38:23",
															"nodeType": "YulAssignment",
															"src": "515:38:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "533:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "533:5:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "540:2:23",
																				"nodeType": "YulLiteral",
																				"src": "540:2:23",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "529:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "529:3:23"
																		},
																		"nativeSrc": "529:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "529:14:23"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "549:2:23",
																				"nodeType": "YulLiteral",
																				"src": "549:2:23",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "545:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "545:3:23"
																		},
																		"nativeSrc": "545:7:23",
																		"nodeType": "YulFunctionCall",
																		"src": "545:7:23"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "525:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "525:3:23"
																},
																"nativeSrc": "525:28:23",
																"nodeType": "YulFunctionCall",
																"src": "525:28:23"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "515:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "515:6:23"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "457:102:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "488:5:23",
														"nodeType": "YulTypedName",
														"src": "488:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "498:6:23",
														"nodeType": "YulTypedName",
														"src": "498:6:23",
														"type": ""
													}
												],
												"src": "457:102:23"
											},
											{
												"body": {
													"nativeSrc": "593:152:23",
													"nodeType": "YulBlock",
													"src": "593:152:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "610:1:23",
																		"nodeType": "YulLiteral",
																		"src": "610:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "613:77:23",
																		"nodeType": "YulLiteral",
																		"src": "613:77:23",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "603:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "603:6:23"
																},
																"nativeSrc": "603:88:23",
																"nodeType": "YulFunctionCall",
																"src": "603:88:23"
															},
															"nativeSrc": "603:88:23",
															"nodeType": "YulExpressionStatement",
															"src": "603:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "707:1:23",
																		"nodeType": "YulLiteral",
																		"src": "707:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "710:4:23",
																		"nodeType": "YulLiteral",
																		"src": "710:4:23",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "700:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "700:6:23"
																},
																"nativeSrc": "700:15:23",
																"nodeType": "YulFunctionCall",
																"src": "700:15:23"
															},
															"nativeSrc": "700:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "700:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "731:1:23",
																		"nodeType": "YulLiteral",
																		"src": "731:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "734:4:23",
																		"nodeType": "YulLiteral",
																		"src": "734:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "724:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "724:6:23"
																},
																"nativeSrc": "724:15:23",
																"nodeType": "YulFunctionCall",
																"src": "724:15:23"
															},
															"nativeSrc": "724:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "724:15:23"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "565:180:23",
												"nodeType": "YulFunctionDefinition",
												"src": "565:180:23"
											},
											{
												"body": {
													"nativeSrc": "794:238:23",
													"nodeType": "YulBlock",
													"src": "794:238:23",
													"statements": [
														{
															"nativeSrc": "804:58:23",
															"nodeType": "YulVariableDeclaration",
															"src": "804:58:23",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "826:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "826:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nativeSrc": "856:4:23",
																				"nodeType": "YulIdentifier",
																				"src": "856:4:23"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "834:21:23",
																			"nodeType": "YulIdentifier",
																			"src": "834:21:23"
																		},
																		"nativeSrc": "834:27:23",
																		"nodeType": "YulFunctionCall",
																		"src": "834:27:23"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "822:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "822:3:23"
																},
																"nativeSrc": "822:40:23",
																"nodeType": "YulFunctionCall",
																"src": "822:40:23"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nativeSrc": "808:10:23",
																	"nodeType": "YulTypedName",
																	"src": "808:10:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "973:22:23",
																"nodeType": "YulBlock",
																"src": "973:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "975:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "975:16:23"
																			},
																			"nativeSrc": "975:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "975:18:23"
																		},
																		"nativeSrc": "975:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "975:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "916:10:23",
																				"nodeType": "YulIdentifier",
																				"src": "916:10:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "928:18:23",
																				"nodeType": "YulLiteral",
																				"src": "928:18:23",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "913:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "913:2:23"
																		},
																		"nativeSrc": "913:34:23",
																		"nodeType": "YulFunctionCall",
																		"src": "913:34:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "952:10:23",
																				"nodeType": "YulIdentifier",
																				"src": "952:10:23"
																			},
																			{
																				"name": "memPtr",
																				"nativeSrc": "964:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "964:6:23"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "949:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "949:2:23"
																		},
																		"nativeSrc": "949:22:23",
																		"nodeType": "YulFunctionCall",
																		"src": "949:22:23"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "910:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "910:2:23"
																},
																"nativeSrc": "910:62:23",
																"nodeType": "YulFunctionCall",
																"src": "910:62:23"
															},
															"nativeSrc": "907:88:23",
															"nodeType": "YulIf",
															"src": "907:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1011:2:23",
																		"nodeType": "YulLiteral",
																		"src": "1011:2:23",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nativeSrc": "1015:10:23",
																		"nodeType": "YulIdentifier",
																		"src": "1015:10:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1004:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1004:6:23"
																},
																"nativeSrc": "1004:22:23",
																"nodeType": "YulFunctionCall",
																"src": "1004:22:23"
															},
															"nativeSrc": "1004:22:23",
															"nodeType": "YulExpressionStatement",
															"src": "1004:22:23"
														}
													]
												},
												"name": "finalize_allocation",
												"nativeSrc": "751:281:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "780:6:23",
														"nodeType": "YulTypedName",
														"src": "780:6:23",
														"type": ""
													},
													{
														"name": "size",
														"nativeSrc": "788:4:23",
														"nodeType": "YulTypedName",
														"src": "788:4:23",
														"type": ""
													}
												],
												"src": "751:281:23"
											},
											{
												"body": {
													"nativeSrc": "1079:88:23",
													"nodeType": "YulBlock",
													"src": "1079:88:23",
													"statements": [
														{
															"nativeSrc": "1089:30:23",
															"nodeType": "YulAssignment",
															"src": "1089:30:23",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nativeSrc": "1099:18:23",
																	"nodeType": "YulIdentifier",
																	"src": "1099:18:23"
																},
																"nativeSrc": "1099:20:23",
																"nodeType": "YulFunctionCall",
																"src": "1099:20:23"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1089:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1089:6:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "1148:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "1148:6:23"
																	},
																	{
																		"name": "size",
																		"nativeSrc": "1156:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "1156:4:23"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nativeSrc": "1128:19:23",
																	"nodeType": "YulIdentifier",
																	"src": "1128:19:23"
																},
																"nativeSrc": "1128:33:23",
																"nodeType": "YulFunctionCall",
																"src": "1128:33:23"
															},
															"nativeSrc": "1128:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "1128:33:23"
														}
													]
												},
												"name": "allocate_memory",
												"nativeSrc": "1038:129:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nativeSrc": "1063:4:23",
														"nodeType": "YulTypedName",
														"src": "1063:4:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1072:6:23",
														"nodeType": "YulTypedName",
														"src": "1072:6:23",
														"type": ""
													}
												],
												"src": "1038:129:23"
											},
											{
												"body": {
													"nativeSrc": "1255:229:23",
													"nodeType": "YulBlock",
													"src": "1255:229:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "1360:22:23",
																"nodeType": "YulBlock",
																"src": "1360:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1362:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "1362:16:23"
																			},
																			"nativeSrc": "1362:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1362:18:23"
																		},
																		"nativeSrc": "1362:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "1362:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "1332:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "1332:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1340:18:23",
																		"nodeType": "YulLiteral",
																		"src": "1340:18:23",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1329:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "1329:2:23"
																},
																"nativeSrc": "1329:30:23",
																"nodeType": "YulFunctionCall",
																"src": "1329:30:23"
															},
															"nativeSrc": "1326:56:23",
															"nodeType": "YulIf",
															"src": "1326:56:23"
														},
														{
															"nativeSrc": "1392:25:23",
															"nodeType": "YulAssignment",
															"src": "1392:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "1404:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "1404:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1412:4:23",
																		"nodeType": "YulLiteral",
																		"src": "1412:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "1400:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "1400:3:23"
																},
																"nativeSrc": "1400:17:23",
																"nodeType": "YulFunctionCall",
																"src": "1400:17:23"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nativeSrc": "1392:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "1392:4:23"
																}
															]
														},
														{
															"nativeSrc": "1454:23:23",
															"nodeType": "YulAssignment",
															"src": "1454:23:23",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nativeSrc": "1466:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "1466:4:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1472:4:23",
																		"nodeType": "YulLiteral",
																		"src": "1472:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1462:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "1462:3:23"
																},
																"nativeSrc": "1462:15:23",
																"nodeType": "YulFunctionCall",
																"src": "1462:15:23"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nativeSrc": "1454:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "1454:4:23"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_array$_t_address_$dyn_memory_ptr",
												"nativeSrc": "1173:311:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nativeSrc": "1239:6:23",
														"nodeType": "YulTypedName",
														"src": "1239:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nativeSrc": "1250:4:23",
														"nodeType": "YulTypedName",
														"src": "1250:4:23",
														"type": ""
													}
												],
												"src": "1173:311:23"
											},
											{
												"body": {
													"nativeSrc": "1579:28:23",
													"nodeType": "YulBlock",
													"src": "1579:28:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1596:1:23",
																		"nodeType": "YulLiteral",
																		"src": "1596:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1599:1:23",
																		"nodeType": "YulLiteral",
																		"src": "1599:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1589:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1589:6:23"
																},
																"nativeSrc": "1589:12:23",
																"nodeType": "YulFunctionCall",
																"src": "1589:12:23"
															},
															"nativeSrc": "1589:12:23",
															"nodeType": "YulExpressionStatement",
															"src": "1589:12:23"
														}
													]
												},
												"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
												"nativeSrc": "1490:117:23",
												"nodeType": "YulFunctionDefinition",
												"src": "1490:117:23"
											},
											{
												"body": {
													"nativeSrc": "1658:81:23",
													"nodeType": "YulBlock",
													"src": "1658:81:23",
													"statements": [
														{
															"nativeSrc": "1668:65:23",
															"nodeType": "YulAssignment",
															"src": "1668:65:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1683:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "1683:5:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1690:42:23",
																		"nodeType": "YulLiteral",
																		"src": "1690:42:23",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1679:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "1679:3:23"
																},
																"nativeSrc": "1679:54:23",
																"nodeType": "YulFunctionCall",
																"src": "1679:54:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1668:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "1668:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "1613:126:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1640:5:23",
														"nodeType": "YulTypedName",
														"src": "1640:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1650:7:23",
														"nodeType": "YulTypedName",
														"src": "1650:7:23",
														"type": ""
													}
												],
												"src": "1613:126:23"
											},
											{
												"body": {
													"nativeSrc": "1790:51:23",
													"nodeType": "YulBlock",
													"src": "1790:51:23",
													"statements": [
														{
															"nativeSrc": "1800:35:23",
															"nodeType": "YulAssignment",
															"src": "1800:35:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1829:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "1829:5:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "1811:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "1811:17:23"
																},
																"nativeSrc": "1811:24:23",
																"nodeType": "YulFunctionCall",
																"src": "1811:24:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1800:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "1800:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "1745:96:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1772:5:23",
														"nodeType": "YulTypedName",
														"src": "1772:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1782:7:23",
														"nodeType": "YulTypedName",
														"src": "1782:7:23",
														"type": ""
													}
												],
												"src": "1745:96:23"
											},
											{
												"body": {
													"nativeSrc": "1890:79:23",
													"nodeType": "YulBlock",
													"src": "1890:79:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "1947:16:23",
																"nodeType": "YulBlock",
																"src": "1947:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1956:1:23",
																					"nodeType": "YulLiteral",
																					"src": "1956:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1959:1:23",
																					"nodeType": "YulLiteral",
																					"src": "1959:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1949:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "1949:6:23"
																			},
																			"nativeSrc": "1949:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1949:12:23"
																		},
																		"nativeSrc": "1949:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "1949:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1913:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "1913:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1938:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "1938:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "1920:17:23",
																					"nodeType": "YulIdentifier",
																					"src": "1920:17:23"
																				},
																				"nativeSrc": "1920:24:23",
																				"nodeType": "YulFunctionCall",
																				"src": "1920:24:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1910:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "1910:2:23"
																		},
																		"nativeSrc": "1910:35:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1910:35:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1903:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1903:6:23"
																},
																"nativeSrc": "1903:43:23",
																"nodeType": "YulFunctionCall",
																"src": "1903:43:23"
															},
															"nativeSrc": "1900:63:23",
															"nodeType": "YulIf",
															"src": "1900:63:23"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "1847:122:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1883:5:23",
														"nodeType": "YulTypedName",
														"src": "1883:5:23",
														"type": ""
													}
												],
												"src": "1847:122:23"
											},
											{
												"body": {
													"nativeSrc": "2038:80:23",
													"nodeType": "YulBlock",
													"src": "2038:80:23",
													"statements": [
														{
															"nativeSrc": "2048:22:23",
															"nodeType": "YulAssignment",
															"src": "2048:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2063:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2063:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "2057:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "2057:5:23"
																},
																"nativeSrc": "2057:13:23",
																"nodeType": "YulFunctionCall",
																"src": "2057:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2048:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "2048:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2106:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "2106:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "2079:26:23",
																	"nodeType": "YulIdentifier",
																	"src": "2079:26:23"
																},
																"nativeSrc": "2079:33:23",
																"nodeType": "YulFunctionCall",
																"src": "2079:33:23"
															},
															"nativeSrc": "2079:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "2079:33:23"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nativeSrc": "1975:143:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2016:6:23",
														"nodeType": "YulTypedName",
														"src": "2016:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2024:3:23",
														"nodeType": "YulTypedName",
														"src": "2024:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2032:5:23",
														"nodeType": "YulTypedName",
														"src": "2032:5:23",
														"type": ""
													}
												],
												"src": "1975:143:23"
											},
											{
												"body": {
													"nativeSrc": "2254:619:23",
													"nodeType": "YulBlock",
													"src": "2254:619:23",
													"statements": [
														{
															"nativeSrc": "2264:90:23",
															"nodeType": "YulAssignment",
															"src": "2264:90:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2346:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "2346:6:23"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_array$_t_address_$dyn_memory_ptr",
																			"nativeSrc": "2289:56:23",
																			"nodeType": "YulIdentifier",
																			"src": "2289:56:23"
																		},
																		"nativeSrc": "2289:64:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2289:64:23"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nativeSrc": "2273:15:23",
																	"nodeType": "YulIdentifier",
																	"src": "2273:15:23"
																},
																"nativeSrc": "2273:81:23",
																"nodeType": "YulFunctionCall",
																"src": "2273:81:23"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "2264:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "2264:5:23"
																}
															]
														},
														{
															"nativeSrc": "2363:16:23",
															"nodeType": "YulVariableDeclaration",
															"src": "2363:16:23",
															"value": {
																"name": "array",
																"nativeSrc": "2374:5:23",
																"nodeType": "YulIdentifier",
																"src": "2374:5:23"
															},
															"variables": [
																{
																	"name": "dst",
																	"nativeSrc": "2367:3:23",
																	"nodeType": "YulTypedName",
																	"src": "2367:3:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "2396:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "2396:5:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2403:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2403:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2389:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2389:6:23"
																},
																"nativeSrc": "2389:21:23",
																"nodeType": "YulFunctionCall",
																"src": "2389:21:23"
															},
															"nativeSrc": "2389:21:23",
															"nodeType": "YulExpressionStatement",
															"src": "2389:21:23"
														},
														{
															"nativeSrc": "2419:23:23",
															"nodeType": "YulAssignment",
															"src": "2419:23:23",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "2430:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "2430:5:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2437:4:23",
																		"nodeType": "YulLiteral",
																		"src": "2437:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2426:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "2426:3:23"
																},
																"nativeSrc": "2426:16:23",
																"nodeType": "YulFunctionCall",
																"src": "2426:16:23"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nativeSrc": "2419:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "2419:3:23"
																}
															]
														},
														{
															"nativeSrc": "2452:44:23",
															"nodeType": "YulVariableDeclaration",
															"src": "2452:44:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2470:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2470:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2482:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "2482:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2490:4:23",
																				"nodeType": "YulLiteral",
																				"src": "2490:4:23",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "2478:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "2478:3:23"
																		},
																		"nativeSrc": "2478:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2478:17:23"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2466:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "2466:3:23"
																},
																"nativeSrc": "2466:30:23",
																"nodeType": "YulFunctionCall",
																"src": "2466:30:23"
															},
															"variables": [
																{
																	"name": "srcEnd",
																	"nativeSrc": "2456:6:23",
																	"nodeType": "YulTypedName",
																	"src": "2456:6:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2524:103:23",
																"nodeType": "YulBlock",
																"src": "2524:103:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
																				"nativeSrc": "2538:77:23",
																				"nodeType": "YulIdentifier",
																				"src": "2538:77:23"
																			},
																			"nativeSrc": "2538:79:23",
																			"nodeType": "YulFunctionCall",
																			"src": "2538:79:23"
																		},
																		"nativeSrc": "2538:79:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "2538:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "srcEnd",
																		"nativeSrc": "2511:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2511:6:23"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "2519:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "2519:3:23"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2508:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "2508:2:23"
																},
																"nativeSrc": "2508:15:23",
																"nodeType": "YulFunctionCall",
																"src": "2508:15:23"
															},
															"nativeSrc": "2505:122:23",
															"nodeType": "YulIf",
															"src": "2505:122:23"
														},
														{
															"body": {
																"nativeSrc": "2712:155:23",
																"nodeType": "YulBlock",
																"src": "2712:155:23",
																"statements": [
																	{
																		"nativeSrc": "2727:21:23",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2727:21:23",
																		"value": {
																			"name": "src",
																			"nativeSrc": "2745:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "2745:3:23"
																		},
																		"variables": [
																			{
																				"name": "elementPos",
																				"nativeSrc": "2731:10:23",
																				"nodeType": "YulTypedName",
																				"src": "2731:10:23",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nativeSrc": "2769:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "2769:3:23"
																				},
																				{
																					"arguments": [
																						{
																							"name": "elementPos",
																							"nativeSrc": "2806:10:23",
																							"nodeType": "YulIdentifier",
																							"src": "2806:10:23"
																						},
																						{
																							"name": "end",
																							"nativeSrc": "2818:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "2818:3:23"
																						}
																					],
																					"functionName": {
																						"name": "abi_decode_t_address_fromMemory",
																						"nativeSrc": "2774:31:23",
																						"nodeType": "YulIdentifier",
																						"src": "2774:31:23"
																					},
																					"nativeSrc": "2774:48:23",
																					"nodeType": "YulFunctionCall",
																					"src": "2774:48:23"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2762:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "2762:6:23"
																			},
																			"nativeSrc": "2762:61:23",
																			"nodeType": "YulFunctionCall",
																			"src": "2762:61:23"
																		},
																		"nativeSrc": "2762:61:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "2762:61:23"
																	},
																	{
																		"nativeSrc": "2836:21:23",
																		"nodeType": "YulAssignment",
																		"src": "2836:21:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nativeSrc": "2847:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "2847:3:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2852:4:23",
																					"nodeType": "YulLiteral",
																					"src": "2852:4:23",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2843:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "2843:3:23"
																			},
																			"nativeSrc": "2843:14:23",
																			"nodeType": "YulFunctionCall",
																			"src": "2843:14:23"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nativeSrc": "2836:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "2836:3:23"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "2665:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "2665:3:23"
																	},
																	{
																		"name": "srcEnd",
																		"nativeSrc": "2670:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2670:6:23"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "2662:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "2662:2:23"
																},
																"nativeSrc": "2662:15:23",
																"nodeType": "YulFunctionCall",
																"src": "2662:15:23"
															},
															"nativeSrc": "2636:231:23",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "2678:25:23",
																"nodeType": "YulBlock",
																"src": "2678:25:23",
																"statements": [
																	{
																		"nativeSrc": "2680:21:23",
																		"nodeType": "YulAssignment",
																		"src": "2680:21:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nativeSrc": "2691:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "2691:3:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2696:4:23",
																					"nodeType": "YulLiteral",
																					"src": "2696:4:23",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2687:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "2687:3:23"
																			},
																			"nativeSrc": "2687:14:23",
																			"nodeType": "YulFunctionCall",
																			"src": "2687:14:23"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nativeSrc": "2680:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "2680:3:23"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "2640:21:23",
																"nodeType": "YulBlock",
																"src": "2640:21:23",
																"statements": [
																	{
																		"nativeSrc": "2642:17:23",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2642:17:23",
																		"value": {
																			"name": "offset",
																			"nativeSrc": "2653:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "2653:6:23"
																		},
																		"variables": [
																			{
																				"name": "src",
																				"nativeSrc": "2646:3:23",
																				"nodeType": "YulTypedName",
																				"src": "2646:3:23",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "2636:231:23"
														}
													]
												},
												"name": "abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory",
												"nativeSrc": "2141:732:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2224:6:23",
														"nodeType": "YulTypedName",
														"src": "2224:6:23",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "2232:6:23",
														"nodeType": "YulTypedName",
														"src": "2232:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2240:3:23",
														"nodeType": "YulTypedName",
														"src": "2240:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "2248:5:23",
														"nodeType": "YulTypedName",
														"src": "2248:5:23",
														"type": ""
													}
												],
												"src": "2141:732:23"
											},
											{
												"body": {
													"nativeSrc": "2984:297:23",
													"nodeType": "YulBlock",
													"src": "2984:297:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "3033:83:23",
																"nodeType": "YulBlock",
																"src": "3033:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nativeSrc": "3035:77:23",
																				"nodeType": "YulIdentifier",
																				"src": "3035:77:23"
																			},
																			"nativeSrc": "3035:79:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3035:79:23"
																		},
																		"nativeSrc": "3035:79:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3035:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "3012:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "3012:6:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3020:4:23",
																						"nodeType": "YulLiteral",
																						"src": "3020:4:23",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3008:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "3008:3:23"
																				},
																				"nativeSrc": "3008:17:23",
																				"nodeType": "YulFunctionCall",
																				"src": "3008:17:23"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "3027:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "3027:3:23"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "3004:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3004:3:23"
																		},
																		"nativeSrc": "3004:27:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3004:27:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2997:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2997:6:23"
																},
																"nativeSrc": "2997:35:23",
																"nodeType": "YulFunctionCall",
																"src": "2997:35:23"
															},
															"nativeSrc": "2994:122:23",
															"nodeType": "YulIf",
															"src": "2994:122:23"
														},
														{
															"nativeSrc": "3125:27:23",
															"nodeType": "YulVariableDeclaration",
															"src": "3125:27:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3145:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3145:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3139:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "3139:5:23"
																},
																"nativeSrc": "3139:13:23",
																"nodeType": "YulFunctionCall",
																"src": "3139:13:23"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3129:6:23",
																	"nodeType": "YulTypedName",
																	"src": "3129:6:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3161:114:23",
															"nodeType": "YulAssignment",
															"src": "3161:114:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "3248:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3248:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3256:4:23",
																				"nodeType": "YulLiteral",
																				"src": "3256:4:23",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3244:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3244:3:23"
																		},
																		"nativeSrc": "3244:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3244:17:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3263:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3263:6:23"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "3271:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "3271:3:23"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory",
																	"nativeSrc": "3170:73:23",
																	"nodeType": "YulIdentifier",
																	"src": "3170:73:23"
																},
																"nativeSrc": "3170:105:23",
																"nodeType": "YulFunctionCall",
																"src": "3170:105:23"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "3161:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "3161:5:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory",
												"nativeSrc": "2896:385:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2962:6:23",
														"nodeType": "YulTypedName",
														"src": "2962:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2970:3:23",
														"nodeType": "YulTypedName",
														"src": "2970:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "2978:5:23",
														"nodeType": "YulTypedName",
														"src": "2978:5:23",
														"type": ""
													}
												],
												"src": "2896:385:23"
											},
											{
												"body": {
													"nativeSrc": "3406:591:23",
													"nodeType": "YulBlock",
													"src": "3406:591:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "3452:83:23",
																"nodeType": "YulBlock",
																"src": "3452:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3454:77:23",
																				"nodeType": "YulIdentifier",
																				"src": "3454:77:23"
																			},
																			"nativeSrc": "3454:79:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3454:79:23"
																		},
																		"nativeSrc": "3454:79:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3454:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3427:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "3427:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3436:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3436:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3423:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3423:3:23"
																		},
																		"nativeSrc": "3423:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3423:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3448:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3448:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3419:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3419:3:23"
																},
																"nativeSrc": "3419:32:23",
																"nodeType": "YulFunctionCall",
																"src": "3419:32:23"
															},
															"nativeSrc": "3416:119:23",
															"nodeType": "YulIf",
															"src": "3416:119:23"
														},
														{
															"nativeSrc": "3545:306:23",
															"nodeType": "YulBlock",
															"src": "3545:306:23",
															"statements": [
																{
																	"nativeSrc": "3560:38:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3560:38:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3584:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "3584:9:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3595:1:23",
																						"nodeType": "YulLiteral",
																						"src": "3595:1:23",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3580:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "3580:3:23"
																				},
																				"nativeSrc": "3580:17:23",
																				"nodeType": "YulFunctionCall",
																				"src": "3580:17:23"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "3574:5:23",
																			"nodeType": "YulIdentifier",
																			"src": "3574:5:23"
																		},
																		"nativeSrc": "3574:24:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3574:24:23"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3564:6:23",
																			"nodeType": "YulTypedName",
																			"src": "3564:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nativeSrc": "3645:83:23",
																		"nodeType": "YulBlock",
																		"src": "3645:83:23",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nativeSrc": "3647:77:23",
																						"nodeType": "YulIdentifier",
																						"src": "3647:77:23"
																					},
																					"nativeSrc": "3647:79:23",
																					"nodeType": "YulFunctionCall",
																					"src": "3647:79:23"
																				},
																				"nativeSrc": "3647:79:23",
																				"nodeType": "YulExpressionStatement",
																				"src": "3647:79:23"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "3617:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3617:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3625:18:23",
																				"nodeType": "YulLiteral",
																				"src": "3625:18:23",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "3614:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "3614:2:23"
																		},
																		"nativeSrc": "3614:30:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3614:30:23"
																	},
																	"nativeSrc": "3611:117:23",
																	"nodeType": "YulIf",
																	"src": "3611:117:23"
																},
																{
																	"nativeSrc": "3742:99:23",
																	"nodeType": "YulAssignment",
																	"src": "3742:99:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3813:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "3813:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3824:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "3824:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3809:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "3809:3:23"
																				},
																				"nativeSrc": "3809:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "3809:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3833:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "3833:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory",
																			"nativeSrc": "3752:56:23",
																			"nodeType": "YulIdentifier",
																			"src": "3752:56:23"
																		},
																		"nativeSrc": "3752:89:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3752:89:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3742:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "3742:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "3861:129:23",
															"nodeType": "YulBlock",
															"src": "3861:129:23",
															"statements": [
																{
																	"nativeSrc": "3876:16:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3876:16:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3890:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3890:2:23",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3880:6:23",
																			"nodeType": "YulTypedName",
																			"src": "3880:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3906:74:23",
																	"nodeType": "YulAssignment",
																	"src": "3906:74:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3952:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "3952:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3963:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "3963:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3948:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "3948:3:23"
																				},
																				"nativeSrc": "3948:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "3948:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3972:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "3972:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nativeSrc": "3916:31:23",
																			"nodeType": "YulIdentifier",
																			"src": "3916:31:23"
																		},
																		"nativeSrc": "3916:64:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3916:64:23"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "3906:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "3906:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_address_fromMemory",
												"nativeSrc": "3287:710:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3368:9:23",
														"nodeType": "YulTypedName",
														"src": "3368:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3379:7:23",
														"nodeType": "YulTypedName",
														"src": "3379:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3391:6:23",
														"nodeType": "YulTypedName",
														"src": "3391:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3399:6:23",
														"nodeType": "YulTypedName",
														"src": "3399:6:23",
														"type": ""
													}
												],
												"src": "3287:710:23"
											},
											{
												"body": {
													"nativeSrc": "4062:40:23",
													"nodeType": "YulBlock",
													"src": "4062:40:23",
													"statements": [
														{
															"nativeSrc": "4073:22:23",
															"nodeType": "YulAssignment",
															"src": "4073:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4089:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "4089:5:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4083:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "4083:5:23"
																},
																"nativeSrc": "4083:12:23",
																"nodeType": "YulFunctionCall",
																"src": "4083:12:23"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "4073:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4073:6:23"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "4003:99:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4045:5:23",
														"nodeType": "YulTypedName",
														"src": "4045:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "4055:6:23",
														"nodeType": "YulTypedName",
														"src": "4055:6:23",
														"type": ""
													}
												],
												"src": "4003:99:23"
											},
											{
												"body": {
													"nativeSrc": "4136:152:23",
													"nodeType": "YulBlock",
													"src": "4136:152:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4153:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4153:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4156:77:23",
																		"nodeType": "YulLiteral",
																		"src": "4156:77:23",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4146:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4146:6:23"
																},
																"nativeSrc": "4146:88:23",
																"nodeType": "YulFunctionCall",
																"src": "4146:88:23"
															},
															"nativeSrc": "4146:88:23",
															"nodeType": "YulExpressionStatement",
															"src": "4146:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4250:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4250:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4253:4:23",
																		"nodeType": "YulLiteral",
																		"src": "4253:4:23",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4243:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4243:6:23"
																},
																"nativeSrc": "4243:15:23",
																"nodeType": "YulFunctionCall",
																"src": "4243:15:23"
															},
															"nativeSrc": "4243:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "4243:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4274:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4274:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4277:4:23",
																		"nodeType": "YulLiteral",
																		"src": "4277:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "4267:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4267:6:23"
																},
																"nativeSrc": "4267:15:23",
																"nodeType": "YulFunctionCall",
																"src": "4267:15:23"
															},
															"nativeSrc": "4267:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "4267:15:23"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "4108:180:23",
												"nodeType": "YulFunctionDefinition",
												"src": "4108:180:23"
											},
											{
												"body": {
													"nativeSrc": "4345:269:23",
													"nodeType": "YulBlock",
													"src": "4345:269:23",
													"statements": [
														{
															"nativeSrc": "4355:22:23",
															"nodeType": "YulAssignment",
															"src": "4355:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4369:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "4369:4:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4375:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4375:1:23",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "4365:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4365:3:23"
																},
																"nativeSrc": "4365:12:23",
																"nodeType": "YulFunctionCall",
																"src": "4365:12:23"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "4355:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4355:6:23"
																}
															]
														},
														{
															"nativeSrc": "4386:38:23",
															"nodeType": "YulVariableDeclaration",
															"src": "4386:38:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4416:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "4416:4:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4422:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4422:1:23",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4412:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4412:3:23"
																},
																"nativeSrc": "4412:12:23",
																"nodeType": "YulFunctionCall",
																"src": "4412:12:23"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "4390:18:23",
																	"nodeType": "YulTypedName",
																	"src": "4390:18:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4463:51:23",
																"nodeType": "YulBlock",
																"src": "4463:51:23",
																"statements": [
																	{
																		"nativeSrc": "4477:27:23",
																		"nodeType": "YulAssignment",
																		"src": "4477:27:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "4491:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "4491:6:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4499:4:23",
																					"nodeType": "YulLiteral",
																					"src": "4499:4:23",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "4487:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "4487:3:23"
																			},
																			"nativeSrc": "4487:17:23",
																			"nodeType": "YulFunctionCall",
																			"src": "4487:17:23"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "4477:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "4477:6:23"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "4443:18:23",
																		"nodeType": "YulIdentifier",
																		"src": "4443:18:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4436:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4436:6:23"
																},
																"nativeSrc": "4436:26:23",
																"nodeType": "YulFunctionCall",
																"src": "4436:26:23"
															},
															"nativeSrc": "4433:81:23",
															"nodeType": "YulIf",
															"src": "4433:81:23"
														},
														{
															"body": {
																"nativeSrc": "4566:42:23",
																"nodeType": "YulBlock",
																"src": "4566:42:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "4580:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "4580:16:23"
																			},
																			"nativeSrc": "4580:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "4580:18:23"
																		},
																		"nativeSrc": "4580:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "4580:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "4530:18:23",
																		"nodeType": "YulIdentifier",
																		"src": "4530:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "4553:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "4553:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4561:2:23",
																				"nodeType": "YulLiteral",
																				"src": "4561:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "4550:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "4550:2:23"
																		},
																		"nativeSrc": "4550:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4550:14:23"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "4527:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "4527:2:23"
																},
																"nativeSrc": "4527:38:23",
																"nodeType": "YulFunctionCall",
																"src": "4527:38:23"
															},
															"nativeSrc": "4524:84:23",
															"nodeType": "YulIf",
															"src": "4524:84:23"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "4294:320:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4329:4:23",
														"nodeType": "YulTypedName",
														"src": "4329:4:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "4338:6:23",
														"nodeType": "YulTypedName",
														"src": "4338:6:23",
														"type": ""
													}
												],
												"src": "4294:320:23"
											},
											{
												"body": {
													"nativeSrc": "4674:87:23",
													"nodeType": "YulBlock",
													"src": "4674:87:23",
													"statements": [
														{
															"nativeSrc": "4684:11:23",
															"nodeType": "YulAssignment",
															"src": "4684:11:23",
															"value": {
																"name": "ptr",
																"nativeSrc": "4692:3:23",
																"nodeType": "YulIdentifier",
																"src": "4692:3:23"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4684:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "4684:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4712:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4712:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "4715:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "4715:3:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4705:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4705:6:23"
																},
																"nativeSrc": "4705:14:23",
																"nodeType": "YulFunctionCall",
																"src": "4705:14:23"
															},
															"nativeSrc": "4705:14:23",
															"nodeType": "YulExpressionStatement",
															"src": "4705:14:23"
														},
														{
															"nativeSrc": "4728:26:23",
															"nodeType": "YulAssignment",
															"src": "4728:26:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4746:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4746:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4749:4:23",
																		"nodeType": "YulLiteral",
																		"src": "4749:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "4736:9:23",
																	"nodeType": "YulIdentifier",
																	"src": "4736:9:23"
																},
																"nativeSrc": "4736:18:23",
																"nodeType": "YulFunctionCall",
																"src": "4736:18:23"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4728:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "4728:4:23"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nativeSrc": "4620:141:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "4661:3:23",
														"nodeType": "YulTypedName",
														"src": "4661:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "4669:4:23",
														"nodeType": "YulTypedName",
														"src": "4669:4:23",
														"type": ""
													}
												],
												"src": "4620:141:23"
											},
											{
												"body": {
													"nativeSrc": "4811:49:23",
													"nodeType": "YulBlock",
													"src": "4811:49:23",
													"statements": [
														{
															"nativeSrc": "4821:33:23",
															"nodeType": "YulAssignment",
															"src": "4821:33:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4839:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "4839:5:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4846:2:23",
																				"nodeType": "YulLiteral",
																				"src": "4846:2:23",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4835:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4835:3:23"
																		},
																		"nativeSrc": "4835:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4835:14:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4851:2:23",
																		"nodeType": "YulLiteral",
																		"src": "4851:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "4831:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4831:3:23"
																},
																"nativeSrc": "4831:23:23",
																"nodeType": "YulFunctionCall",
																"src": "4831:23:23"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "4821:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4821:6:23"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nativeSrc": "4767:93:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4794:5:23",
														"nodeType": "YulTypedName",
														"src": "4794:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "4804:6:23",
														"nodeType": "YulTypedName",
														"src": "4804:6:23",
														"type": ""
													}
												],
												"src": "4767:93:23"
											},
											{
												"body": {
													"nativeSrc": "4919:54:23",
													"nodeType": "YulBlock",
													"src": "4919:54:23",
													"statements": [
														{
															"nativeSrc": "4929:37:23",
															"nodeType": "YulAssignment",
															"src": "4929:37:23",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "4954:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "4954:4:23"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "4960:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "4960:5:23"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "4950:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4950:3:23"
																},
																"nativeSrc": "4950:16:23",
																"nodeType": "YulFunctionCall",
																"src": "4950:16:23"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "4929:8:23",
																	"nodeType": "YulIdentifier",
																	"src": "4929:8:23"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nativeSrc": "4866:107:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "4894:4:23",
														"nodeType": "YulTypedName",
														"src": "4894:4:23",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "4900:5:23",
														"nodeType": "YulTypedName",
														"src": "4900:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "4910:8:23",
														"nodeType": "YulTypedName",
														"src": "4910:8:23",
														"type": ""
													}
												],
												"src": "4866:107:23"
											},
											{
												"body": {
													"nativeSrc": "5055:317:23",
													"nodeType": "YulBlock",
													"src": "5055:317:23",
													"statements": [
														{
															"nativeSrc": "5065:35:23",
															"nodeType": "YulVariableDeclaration",
															"src": "5065:35:23",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nativeSrc": "5086:10:23",
																		"nodeType": "YulIdentifier",
																		"src": "5086:10:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5098:1:23",
																		"nodeType": "YulLiteral",
																		"src": "5098:1:23",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "5082:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "5082:3:23"
																},
																"nativeSrc": "5082:18:23",
																"nodeType": "YulFunctionCall",
																"src": "5082:18:23"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nativeSrc": "5069:9:23",
																	"nodeType": "YulTypedName",
																	"src": "5069:9:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5109:109:23",
															"nodeType": "YulVariableDeclaration",
															"src": "5109:109:23",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "5140:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "5140:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5151:66:23",
																		"nodeType": "YulLiteral",
																		"src": "5151:66:23",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "5121:18:23",
																	"nodeType": "YulIdentifier",
																	"src": "5121:18:23"
																},
																"nativeSrc": "5121:97:23",
																"nodeType": "YulFunctionCall",
																"src": "5121:97:23"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "5113:4:23",
																	"nodeType": "YulTypedName",
																	"src": "5113:4:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5227:51:23",
															"nodeType": "YulAssignment",
															"src": "5227:51:23",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "5258:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "5258:9:23"
																	},
																	{
																		"name": "toInsert",
																		"nativeSrc": "5269:8:23",
																		"nodeType": "YulIdentifier",
																		"src": "5269:8:23"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "5239:18:23",
																	"nodeType": "YulIdentifier",
																	"src": "5239:18:23"
																},
																"nativeSrc": "5239:39:23",
																"nodeType": "YulFunctionCall",
																"src": "5239:39:23"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nativeSrc": "5227:8:23",
																	"nodeType": "YulIdentifier",
																	"src": "5227:8:23"
																}
															]
														},
														{
															"nativeSrc": "5287:30:23",
															"nodeType": "YulAssignment",
															"src": "5287:30:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "5300:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "5300:5:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nativeSrc": "5311:4:23",
																				"nodeType": "YulIdentifier",
																				"src": "5311:4:23"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "5307:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5307:3:23"
																		},
																		"nativeSrc": "5307:9:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5307:9:23"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5296:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "5296:3:23"
																},
																"nativeSrc": "5296:21:23",
																"nodeType": "YulFunctionCall",
																"src": "5296:21:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "5287:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "5287:5:23"
																}
															]
														},
														{
															"nativeSrc": "5326:40:23",
															"nodeType": "YulAssignment",
															"src": "5326:40:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "5339:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "5339:5:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nativeSrc": "5350:8:23",
																				"nodeType": "YulIdentifier",
																				"src": "5350:8:23"
																			},
																			{
																				"name": "mask",
																				"nativeSrc": "5360:4:23",
																				"nodeType": "YulIdentifier",
																				"src": "5360:4:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5346:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5346:3:23"
																		},
																		"nativeSrc": "5346:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5346:19:23"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "5336:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "5336:2:23"
																},
																"nativeSrc": "5336:30:23",
																"nodeType": "YulFunctionCall",
																"src": "5336:30:23"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "5326:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "5326:6:23"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nativeSrc": "4979:393:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5016:5:23",
														"nodeType": "YulTypedName",
														"src": "5016:5:23",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nativeSrc": "5023:10:23",
														"nodeType": "YulTypedName",
														"src": "5023:10:23",
														"type": ""
													},
													{
														"name": "toInsert",
														"nativeSrc": "5035:8:23",
														"nodeType": "YulTypedName",
														"src": "5035:8:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "5048:6:23",
														"nodeType": "YulTypedName",
														"src": "5048:6:23",
														"type": ""
													}
												],
												"src": "4979:393:23"
											},
											{
												"body": {
													"nativeSrc": "5423:32:23",
													"nodeType": "YulBlock",
													"src": "5423:32:23",
													"statements": [
														{
															"nativeSrc": "5433:16:23",
															"nodeType": "YulAssignment",
															"src": "5433:16:23",
															"value": {
																"name": "value",
																"nativeSrc": "5444:5:23",
																"nodeType": "YulIdentifier",
																"src": "5444:5:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "5433:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "5433:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "5378:77:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5405:5:23",
														"nodeType": "YulTypedName",
														"src": "5405:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "5415:7:23",
														"nodeType": "YulTypedName",
														"src": "5415:7:23",
														"type": ""
													}
												],
												"src": "5378:77:23"
											},
											{
												"body": {
													"nativeSrc": "5493:28:23",
													"nodeType": "YulBlock",
													"src": "5493:28:23",
													"statements": [
														{
															"nativeSrc": "5503:12:23",
															"nodeType": "YulAssignment",
															"src": "5503:12:23",
															"value": {
																"name": "value",
																"nativeSrc": "5510:5:23",
																"nodeType": "YulIdentifier",
																"src": "5510:5:23"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "5503:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "5503:3:23"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "5461:60:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5479:5:23",
														"nodeType": "YulTypedName",
														"src": "5479:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "5489:3:23",
														"nodeType": "YulTypedName",
														"src": "5489:3:23",
														"type": ""
													}
												],
												"src": "5461:60:23"
											},
											{
												"body": {
													"nativeSrc": "5587:82:23",
													"nodeType": "YulBlock",
													"src": "5587:82:23",
													"statements": [
														{
															"nativeSrc": "5597:66:23",
															"nodeType": "YulAssignment",
															"src": "5597:66:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "5655:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "5655:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "5637:17:23",
																					"nodeType": "YulIdentifier",
																					"src": "5637:17:23"
																				},
																				"nativeSrc": "5637:24:23",
																				"nodeType": "YulFunctionCall",
																				"src": "5637:24:23"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "5628:8:23",
																			"nodeType": "YulIdentifier",
																			"src": "5628:8:23"
																		},
																		"nativeSrc": "5628:34:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5628:34:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "5610:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "5610:17:23"
																},
																"nativeSrc": "5610:53:23",
																"nodeType": "YulFunctionCall",
																"src": "5610:53:23"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "5597:9:23",
																	"nodeType": "YulIdentifier",
																	"src": "5597:9:23"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "5527:142:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5567:5:23",
														"nodeType": "YulTypedName",
														"src": "5567:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "5577:9:23",
														"nodeType": "YulTypedName",
														"src": "5577:9:23",
														"type": ""
													}
												],
												"src": "5527:142:23"
											},
											{
												"body": {
													"nativeSrc": "5722:28:23",
													"nodeType": "YulBlock",
													"src": "5722:28:23",
													"statements": [
														{
															"nativeSrc": "5732:12:23",
															"nodeType": "YulAssignment",
															"src": "5732:12:23",
															"value": {
																"name": "value",
																"nativeSrc": "5739:5:23",
																"nodeType": "YulIdentifier",
																"src": "5739:5:23"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "5732:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "5732:3:23"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nativeSrc": "5675:75:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5708:5:23",
														"nodeType": "YulTypedName",
														"src": "5708:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "5718:3:23",
														"nodeType": "YulTypedName",
														"src": "5718:3:23",
														"type": ""
													}
												],
												"src": "5675:75:23"
											},
											{
												"body": {
													"nativeSrc": "5832:193:23",
													"nodeType": "YulBlock",
													"src": "5832:193:23",
													"statements": [
														{
															"nativeSrc": "5842:63:23",
															"nodeType": "YulVariableDeclaration",
															"src": "5842:63:23",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nativeSrc": "5897:7:23",
																		"nodeType": "YulIdentifier",
																		"src": "5897:7:23"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nativeSrc": "5866:30:23",
																	"nodeType": "YulIdentifier",
																	"src": "5866:30:23"
																},
																"nativeSrc": "5866:39:23",
																"nodeType": "YulFunctionCall",
																"src": "5866:39:23"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "5846:16:23",
																	"nodeType": "YulTypedName",
																	"src": "5846:16:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5921:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "5921:4:23"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "5961:4:23",
																						"nodeType": "YulIdentifier",
																						"src": "5961:4:23"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "5955:5:23",
																					"nodeType": "YulIdentifier",
																					"src": "5955:5:23"
																				},
																				"nativeSrc": "5955:11:23",
																				"nodeType": "YulFunctionCall",
																				"src": "5955:11:23"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "5968:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "5968:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nativeSrc": "6000:16:23",
																						"nodeType": "YulIdentifier",
																						"src": "6000:16:23"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nativeSrc": "5976:23:23",
																					"nodeType": "YulIdentifier",
																					"src": "5976:23:23"
																				},
																				"nativeSrc": "5976:41:23",
																				"nodeType": "YulFunctionCall",
																				"src": "5976:41:23"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nativeSrc": "5927:27:23",
																			"nodeType": "YulIdentifier",
																			"src": "5927:27:23"
																		},
																		"nativeSrc": "5927:91:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5927:91:23"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "5914:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "5914:6:23"
																},
																"nativeSrc": "5914:105:23",
																"nodeType": "YulFunctionCall",
																"src": "5914:105:23"
															},
															"nativeSrc": "5914:105:23",
															"nodeType": "YulExpressionStatement",
															"src": "5914:105:23"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "5756:269:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5809:4:23",
														"nodeType": "YulTypedName",
														"src": "5809:4:23",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "5815:6:23",
														"nodeType": "YulTypedName",
														"src": "5815:6:23",
														"type": ""
													},
													{
														"name": "value_0",
														"nativeSrc": "5823:7:23",
														"nodeType": "YulTypedName",
														"src": "5823:7:23",
														"type": ""
													}
												],
												"src": "5756:269:23"
											},
											{
												"body": {
													"nativeSrc": "6080:24:23",
													"nodeType": "YulBlock",
													"src": "6080:24:23",
													"statements": [
														{
															"nativeSrc": "6090:8:23",
															"nodeType": "YulAssignment",
															"src": "6090:8:23",
															"value": {
																"kind": "number",
																"nativeSrc": "6097:1:23",
																"nodeType": "YulLiteral",
																"src": "6097:1:23",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "6090:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6090:3:23"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "6031:73:23",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "6076:3:23",
														"nodeType": "YulTypedName",
														"src": "6076:3:23",
														"type": ""
													}
												],
												"src": "6031:73:23"
											},
											{
												"body": {
													"nativeSrc": "6163:136:23",
													"nodeType": "YulBlock",
													"src": "6163:136:23",
													"statements": [
														{
															"nativeSrc": "6173:46:23",
															"nodeType": "YulVariableDeclaration",
															"src": "6173:46:23",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nativeSrc": "6187:30:23",
																	"nodeType": "YulIdentifier",
																	"src": "6187:30:23"
																},
																"nativeSrc": "6187:32:23",
																"nodeType": "YulFunctionCall",
																"src": "6187:32:23"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nativeSrc": "6177:6:23",
																	"nodeType": "YulTypedName",
																	"src": "6177:6:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "6272:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "6272:4:23"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "6278:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "6278:6:23"
																	},
																	{
																		"name": "zero_0",
																		"nativeSrc": "6286:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "6286:6:23"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nativeSrc": "6228:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "6228:43:23"
																},
																"nativeSrc": "6228:65:23",
																"nodeType": "YulFunctionCall",
																"src": "6228:65:23"
															},
															"nativeSrc": "6228:65:23",
															"nodeType": "YulExpressionStatement",
															"src": "6228:65:23"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nativeSrc": "6110:189:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "6149:4:23",
														"nodeType": "YulTypedName",
														"src": "6149:4:23",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "6155:6:23",
														"nodeType": "YulTypedName",
														"src": "6155:6:23",
														"type": ""
													}
												],
												"src": "6110:189:23"
											},
											{
												"body": {
													"nativeSrc": "6355:136:23",
													"nodeType": "YulBlock",
													"src": "6355:136:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "6422:63:23",
																"nodeType": "YulBlock",
																"src": "6422:63:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "6466:5:23",
																					"nodeType": "YulIdentifier",
																					"src": "6466:5:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6473:1:23",
																					"nodeType": "YulLiteral",
																					"src": "6473:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nativeSrc": "6436:29:23",
																				"nodeType": "YulIdentifier",
																				"src": "6436:29:23"
																			},
																			"nativeSrc": "6436:39:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6436:39:23"
																		},
																		"nativeSrc": "6436:39:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "6436:39:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "6375:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "6375:5:23"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "6382:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "6382:3:23"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "6372:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "6372:2:23"
																},
																"nativeSrc": "6372:14:23",
																"nodeType": "YulFunctionCall",
																"src": "6372:14:23"
															},
															"nativeSrc": "6365:120:23",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "6387:26:23",
																"nodeType": "YulBlock",
																"src": "6387:26:23",
																"statements": [
																	{
																		"nativeSrc": "6389:22:23",
																		"nodeType": "YulAssignment",
																		"src": "6389:22:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "6402:5:23",
																					"nodeType": "YulIdentifier",
																					"src": "6402:5:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6409:1:23",
																					"nodeType": "YulLiteral",
																					"src": "6409:1:23",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "6398:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "6398:3:23"
																			},
																			"nativeSrc": "6398:13:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6398:13:23"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nativeSrc": "6389:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "6389:5:23"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "6369:2:23",
																"nodeType": "YulBlock",
																"src": "6369:2:23",
																"statements": []
															},
															"src": "6365:120:23"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nativeSrc": "6305:186:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nativeSrc": "6343:5:23",
														"nodeType": "YulTypedName",
														"src": "6343:5:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "6350:3:23",
														"nodeType": "YulTypedName",
														"src": "6350:3:23",
														"type": ""
													}
												],
												"src": "6305:186:23"
											},
											{
												"body": {
													"nativeSrc": "6576:464:23",
													"nodeType": "YulBlock",
													"src": "6576:464:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "6602:431:23",
																"nodeType": "YulBlock",
																"src": "6602:431:23",
																"statements": [
																	{
																		"nativeSrc": "6616:54:23",
																		"nodeType": "YulVariableDeclaration",
																		"src": "6616:54:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nativeSrc": "6664:5:23",
																					"nodeType": "YulIdentifier",
																					"src": "6664:5:23"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nativeSrc": "6632:31:23",
																				"nodeType": "YulIdentifier",
																				"src": "6632:31:23"
																			},
																			"nativeSrc": "6632:38:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6632:38:23"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nativeSrc": "6620:8:23",
																				"nodeType": "YulTypedName",
																				"src": "6620:8:23",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "6683:63:23",
																		"nodeType": "YulVariableDeclaration",
																		"src": "6683:63:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nativeSrc": "6706:8:23",
																					"nodeType": "YulIdentifier",
																					"src": "6706:8:23"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nativeSrc": "6734:10:23",
																							"nodeType": "YulIdentifier",
																							"src": "6734:10:23"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nativeSrc": "6716:17:23",
																						"nodeType": "YulIdentifier",
																						"src": "6716:17:23"
																					},
																					"nativeSrc": "6716:29:23",
																					"nodeType": "YulFunctionCall",
																					"src": "6716:29:23"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "6702:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "6702:3:23"
																			},
																			"nativeSrc": "6702:44:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6702:44:23"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "6687:11:23",
																				"nodeType": "YulTypedName",
																				"src": "6687:11:23",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "6903:27:23",
																			"nodeType": "YulBlock",
																			"src": "6903:27:23",
																			"statements": [
																				{
																					"nativeSrc": "6905:23:23",
																					"nodeType": "YulAssignment",
																					"src": "6905:23:23",
																					"value": {
																						"name": "dataArea",
																						"nativeSrc": "6920:8:23",
																						"nodeType": "YulIdentifier",
																						"src": "6920:8:23"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "6905:11:23",
																							"nodeType": "YulIdentifier",
																							"src": "6905:11:23"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "6887:10:23",
																					"nodeType": "YulIdentifier",
																					"src": "6887:10:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6899:2:23",
																					"nodeType": "YulLiteral",
																					"src": "6899:2:23",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "6884:2:23",
																				"nodeType": "YulIdentifier",
																				"src": "6884:2:23"
																			},
																			"nativeSrc": "6884:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6884:18:23"
																		},
																		"nativeSrc": "6881:49:23",
																		"nodeType": "YulIf",
																		"src": "6881:49:23"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nativeSrc": "6972:11:23",
																					"nodeType": "YulIdentifier",
																					"src": "6972:11:23"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nativeSrc": "6989:8:23",
																							"nodeType": "YulIdentifier",
																							"src": "6989:8:23"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "7017:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "7017:3:23"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nativeSrc": "6999:17:23",
																								"nodeType": "YulIdentifier",
																								"src": "6999:17:23"
																							},
																							"nativeSrc": "6999:22:23",
																							"nodeType": "YulFunctionCall",
																							"src": "6999:22:23"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6985:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "6985:3:23"
																					},
																					"nativeSrc": "6985:37:23",
																					"nodeType": "YulFunctionCall",
																					"src": "6985:37:23"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nativeSrc": "6943:28:23",
																				"nodeType": "YulIdentifier",
																				"src": "6943:28:23"
																			},
																			"nativeSrc": "6943:80:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6943:80:23"
																		},
																		"nativeSrc": "6943:80:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "6943:80:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "6593:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "6593:3:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6598:2:23",
																		"nodeType": "YulLiteral",
																		"src": "6598:2:23",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6590:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "6590:2:23"
																},
																"nativeSrc": "6590:11:23",
																"nodeType": "YulFunctionCall",
																"src": "6590:11:23"
															},
															"nativeSrc": "6587:446:23",
															"nodeType": "YulIf",
															"src": "6587:446:23"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "6497:543:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "6552:5:23",
														"nodeType": "YulTypedName",
														"src": "6552:5:23",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "6559:3:23",
														"nodeType": "YulTypedName",
														"src": "6559:3:23",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "6564:10:23",
														"nodeType": "YulTypedName",
														"src": "6564:10:23",
														"type": ""
													}
												],
												"src": "6497:543:23"
											},
											{
												"body": {
													"nativeSrc": "7109:54:23",
													"nodeType": "YulBlock",
													"src": "7109:54:23",
													"statements": [
														{
															"nativeSrc": "7119:37:23",
															"nodeType": "YulAssignment",
															"src": "7119:37:23",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "7144:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "7144:4:23"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "7150:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "7150:5:23"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "7140:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "7140:3:23"
																},
																"nativeSrc": "7140:16:23",
																"nodeType": "YulFunctionCall",
																"src": "7140:16:23"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "7119:8:23",
																	"nodeType": "YulIdentifier",
																	"src": "7119:8:23"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nativeSrc": "7046:117:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "7084:4:23",
														"nodeType": "YulTypedName",
														"src": "7084:4:23",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "7090:5:23",
														"nodeType": "YulTypedName",
														"src": "7090:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "7100:8:23",
														"nodeType": "YulTypedName",
														"src": "7100:8:23",
														"type": ""
													}
												],
												"src": "7046:117:23"
											},
											{
												"body": {
													"nativeSrc": "7220:118:23",
													"nodeType": "YulBlock",
													"src": "7220:118:23",
													"statements": [
														{
															"nativeSrc": "7230:68:23",
															"nodeType": "YulVariableDeclaration",
															"src": "7230:68:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "7279:1:23",
																						"nodeType": "YulLiteral",
																						"src": "7279:1:23",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nativeSrc": "7282:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "7282:5:23"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "7275:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "7275:3:23"
																				},
																				"nativeSrc": "7275:13:23",
																				"nodeType": "YulFunctionCall",
																				"src": "7275:13:23"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "7294:1:23",
																						"nodeType": "YulLiteral",
																						"src": "7294:1:23",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "7290:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "7290:3:23"
																				},
																				"nativeSrc": "7290:6:23",
																				"nodeType": "YulFunctionCall",
																				"src": "7290:6:23"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nativeSrc": "7246:28:23",
																			"nodeType": "YulIdentifier",
																			"src": "7246:28:23"
																		},
																		"nativeSrc": "7246:51:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7246:51:23"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "7242:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "7242:3:23"
																},
																"nativeSrc": "7242:56:23",
																"nodeType": "YulFunctionCall",
																"src": "7242:56:23"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "7234:4:23",
																	"nodeType": "YulTypedName",
																	"src": "7234:4:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7307:25:23",
															"nodeType": "YulAssignment",
															"src": "7307:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "7321:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "7321:4:23"
																	},
																	{
																		"name": "mask",
																		"nativeSrc": "7327:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "7327:4:23"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "7317:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "7317:3:23"
																},
																"nativeSrc": "7317:15:23",
																"nodeType": "YulFunctionCall",
																"src": "7317:15:23"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "7307:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7307:6:23"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nativeSrc": "7169:169:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "7197:4:23",
														"nodeType": "YulTypedName",
														"src": "7197:4:23",
														"type": ""
													},
													{
														"name": "bytes",
														"nativeSrc": "7203:5:23",
														"nodeType": "YulTypedName",
														"src": "7203:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "7213:6:23",
														"nodeType": "YulTypedName",
														"src": "7213:6:23",
														"type": ""
													}
												],
												"src": "7169:169:23"
											},
											{
												"body": {
													"nativeSrc": "7424:214:23",
													"nodeType": "YulBlock",
													"src": "7424:214:23",
													"statements": [
														{
															"nativeSrc": "7557:37:23",
															"nodeType": "YulAssignment",
															"src": "7557:37:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "7584:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "7584:4:23"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "7590:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "7590:3:23"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nativeSrc": "7565:18:23",
																	"nodeType": "YulIdentifier",
																	"src": "7565:18:23"
																},
																"nativeSrc": "7565:29:23",
																"nodeType": "YulFunctionCall",
																"src": "7565:29:23"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "7557:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "7557:4:23"
																}
															]
														},
														{
															"nativeSrc": "7603:29:23",
															"nodeType": "YulAssignment",
															"src": "7603:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "7614:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "7614:4:23"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "7624:1:23",
																				"nodeType": "YulLiteral",
																				"src": "7624:1:23",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "7627:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "7627:3:23"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "7620:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7620:3:23"
																		},
																		"nativeSrc": "7620:11:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7620:11:23"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "7611:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "7611:2:23"
																},
																"nativeSrc": "7611:21:23",
																"nodeType": "YulFunctionCall",
																"src": "7611:21:23"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "7603:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "7603:4:23"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "7343:295:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "7405:4:23",
														"nodeType": "YulTypedName",
														"src": "7405:4:23",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "7411:3:23",
														"nodeType": "YulTypedName",
														"src": "7411:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "7419:4:23",
														"nodeType": "YulTypedName",
														"src": "7419:4:23",
														"type": ""
													}
												],
												"src": "7343:295:23"
											},
											{
												"body": {
													"nativeSrc": "7735:1303:23",
													"nodeType": "YulBlock",
													"src": "7735:1303:23",
													"statements": [
														{
															"nativeSrc": "7746:51:23",
															"nodeType": "YulVariableDeclaration",
															"src": "7746:51:23",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "7793:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "7793:3:23"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "7760:32:23",
																	"nodeType": "YulIdentifier",
																	"src": "7760:32:23"
																},
																"nativeSrc": "7760:37:23",
																"nodeType": "YulFunctionCall",
																"src": "7760:37:23"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "7750:6:23",
																	"nodeType": "YulTypedName",
																	"src": "7750:6:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7882:22:23",
																"nodeType": "YulBlock",
																"src": "7882:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "7884:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "7884:16:23"
																			},
																			"nativeSrc": "7884:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "7884:18:23"
																		},
																		"nativeSrc": "7884:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "7884:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "7854:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "7854:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7862:18:23",
																		"nodeType": "YulLiteral",
																		"src": "7862:18:23",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7851:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "7851:2:23"
																},
																"nativeSrc": "7851:30:23",
																"nodeType": "YulFunctionCall",
																"src": "7851:30:23"
															},
															"nativeSrc": "7848:56:23",
															"nodeType": "YulIf",
															"src": "7848:56:23"
														},
														{
															"nativeSrc": "7914:52:23",
															"nodeType": "YulVariableDeclaration",
															"src": "7914:52:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nativeSrc": "7960:4:23",
																				"nodeType": "YulIdentifier",
																				"src": "7960:4:23"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nativeSrc": "7954:5:23",
																			"nodeType": "YulIdentifier",
																			"src": "7954:5:23"
																		},
																		"nativeSrc": "7954:11:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7954:11:23"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nativeSrc": "7928:25:23",
																	"nodeType": "YulIdentifier",
																	"src": "7928:25:23"
																},
																"nativeSrc": "7928:38:23",
																"nodeType": "YulFunctionCall",
																"src": "7928:38:23"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nativeSrc": "7918:6:23",
																	"nodeType": "YulTypedName",
																	"src": "7918:6:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "8059:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "8059:4:23"
																	},
																	{
																		"name": "oldLen",
																		"nativeSrc": "8065:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "8065:6:23"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "8073:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "8073:6:23"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nativeSrc": "8013:45:23",
																	"nodeType": "YulIdentifier",
																	"src": "8013:45:23"
																},
																"nativeSrc": "8013:67:23",
																"nodeType": "YulFunctionCall",
																"src": "8013:67:23"
															},
															"nativeSrc": "8013:67:23",
															"nodeType": "YulExpressionStatement",
															"src": "8013:67:23"
														},
														{
															"nativeSrc": "8090:18:23",
															"nodeType": "YulVariableDeclaration",
															"src": "8090:18:23",
															"value": {
																"kind": "number",
																"nativeSrc": "8107:1:23",
																"nodeType": "YulLiteral",
																"src": "8107:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "8094:9:23",
																	"nodeType": "YulTypedName",
																	"src": "8094:9:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "8118:17:23",
															"nodeType": "YulAssignment",
															"src": "8118:17:23",
															"value": {
																"kind": "number",
																"nativeSrc": "8131:4:23",
																"nodeType": "YulLiteral",
																"src": "8131:4:23",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "8118:9:23",
																	"nodeType": "YulIdentifier",
																	"src": "8118:9:23"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "8182:611:23",
																		"nodeType": "YulBlock",
																		"src": "8182:611:23",
																		"statements": [
																			{
																				"nativeSrc": "8196:37:23",
																				"nodeType": "YulVariableDeclaration",
																				"src": "8196:37:23",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "8215:6:23",
																							"nodeType": "YulIdentifier",
																							"src": "8215:6:23"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "8227:4:23",
																									"nodeType": "YulLiteral",
																									"src": "8227:4:23",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "8223:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "8223:3:23"
																							},
																							"nativeSrc": "8223:9:23",
																							"nodeType": "YulFunctionCall",
																							"src": "8223:9:23"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "8211:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "8211:3:23"
																					},
																					"nativeSrc": "8211:22:23",
																					"nodeType": "YulFunctionCall",
																					"src": "8211:22:23"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "8200:7:23",
																						"nodeType": "YulTypedName",
																						"src": "8200:7:23",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "8247:51:23",
																				"nodeType": "YulVariableDeclaration",
																				"src": "8247:51:23",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "8293:4:23",
																							"nodeType": "YulIdentifier",
																							"src": "8293:4:23"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nativeSrc": "8261:31:23",
																						"nodeType": "YulIdentifier",
																						"src": "8261:31:23"
																					},
																					"nativeSrc": "8261:37:23",
																					"nodeType": "YulFunctionCall",
																					"src": "8261:37:23"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "8251:6:23",
																						"nodeType": "YulTypedName",
																						"src": "8251:6:23",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "8311:10:23",
																				"nodeType": "YulVariableDeclaration",
																				"src": "8311:10:23",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "8320:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8320:1:23",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "8315:1:23",
																						"nodeType": "YulTypedName",
																						"src": "8315:1:23",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "8379:163:23",
																					"nodeType": "YulBlock",
																					"src": "8379:163:23",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "8404:6:23",
																										"nodeType": "YulIdentifier",
																										"src": "8404:6:23"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "8422:3:23",
																														"nodeType": "YulIdentifier",
																														"src": "8422:3:23"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "8427:9:23",
																														"nodeType": "YulIdentifier",
																														"src": "8427:9:23"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "8418:3:23",
																													"nodeType": "YulIdentifier",
																													"src": "8418:3:23"
																												},
																												"nativeSrc": "8418:19:23",
																												"nodeType": "YulFunctionCall",
																												"src": "8418:19:23"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "8412:5:23",
																											"nodeType": "YulIdentifier",
																											"src": "8412:5:23"
																										},
																										"nativeSrc": "8412:26:23",
																										"nodeType": "YulFunctionCall",
																										"src": "8412:26:23"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "8397:6:23",
																									"nodeType": "YulIdentifier",
																									"src": "8397:6:23"
																								},
																								"nativeSrc": "8397:42:23",
																								"nodeType": "YulFunctionCall",
																								"src": "8397:42:23"
																							},
																							"nativeSrc": "8397:42:23",
																							"nodeType": "YulExpressionStatement",
																							"src": "8397:42:23"
																						},
																						{
																							"nativeSrc": "8456:24:23",
																							"nodeType": "YulAssignment",
																							"src": "8456:24:23",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "8470:6:23",
																										"nodeType": "YulIdentifier",
																										"src": "8470:6:23"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "8478:1:23",
																										"nodeType": "YulLiteral",
																										"src": "8478:1:23",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "8466:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "8466:3:23"
																								},
																								"nativeSrc": "8466:14:23",
																								"nodeType": "YulFunctionCall",
																								"src": "8466:14:23"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "8456:6:23",
																									"nodeType": "YulIdentifier",
																									"src": "8456:6:23"
																								}
																							]
																						},
																						{
																							"nativeSrc": "8497:31:23",
																							"nodeType": "YulAssignment",
																							"src": "8497:31:23",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "8514:9:23",
																										"nodeType": "YulIdentifier",
																										"src": "8514:9:23"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "8525:2:23",
																										"nodeType": "YulLiteral",
																										"src": "8525:2:23",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "8510:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "8510:3:23"
																								},
																								"nativeSrc": "8510:18:23",
																								"nodeType": "YulFunctionCall",
																								"src": "8510:18:23"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "8497:9:23",
																									"nodeType": "YulIdentifier",
																									"src": "8497:9:23"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "8345:1:23",
																							"nodeType": "YulIdentifier",
																							"src": "8345:1:23"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "8348:7:23",
																							"nodeType": "YulIdentifier",
																							"src": "8348:7:23"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "8342:2:23",
																						"nodeType": "YulIdentifier",
																						"src": "8342:2:23"
																					},
																					"nativeSrc": "8342:14:23",
																					"nodeType": "YulFunctionCall",
																					"src": "8342:14:23"
																				},
																				"nativeSrc": "8334:208:23",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "8357:21:23",
																					"nodeType": "YulBlock",
																					"src": "8357:21:23",
																					"statements": [
																						{
																							"nativeSrc": "8359:17:23",
																							"nodeType": "YulAssignment",
																							"src": "8359:17:23",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "8368:1:23",
																										"nodeType": "YulIdentifier",
																										"src": "8368:1:23"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "8371:4:23",
																										"nodeType": "YulLiteral",
																										"src": "8371:4:23",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "8364:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "8364:3:23"
																								},
																								"nativeSrc": "8364:12:23",
																								"nodeType": "YulFunctionCall",
																								"src": "8364:12:23"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "8359:1:23",
																									"nodeType": "YulIdentifier",
																									"src": "8359:1:23"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "8338:3:23",
																					"nodeType": "YulBlock",
																					"src": "8338:3:23",
																					"statements": []
																				},
																				"src": "8334:208:23"
																			},
																			{
																				"body": {
																					"nativeSrc": "8578:156:23",
																					"nodeType": "YulBlock",
																					"src": "8578:156:23",
																					"statements": [
																						{
																							"nativeSrc": "8596:43:23",
																							"nodeType": "YulVariableDeclaration",
																							"src": "8596:43:23",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "8623:3:23",
																												"nodeType": "YulIdentifier",
																												"src": "8623:3:23"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "8628:9:23",
																												"nodeType": "YulIdentifier",
																												"src": "8628:9:23"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "8619:3:23",
																											"nodeType": "YulIdentifier",
																											"src": "8619:3:23"
																										},
																										"nativeSrc": "8619:19:23",
																										"nodeType": "YulFunctionCall",
																										"src": "8619:19:23"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "8613:5:23",
																									"nodeType": "YulIdentifier",
																									"src": "8613:5:23"
																								},
																								"nativeSrc": "8613:26:23",
																								"nodeType": "YulFunctionCall",
																								"src": "8613:26:23"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "8600:9:23",
																									"nodeType": "YulTypedName",
																									"src": "8600:9:23",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "8663:6:23",
																										"nodeType": "YulIdentifier",
																										"src": "8663:6:23"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "8690:9:23",
																												"nodeType": "YulIdentifier",
																												"src": "8690:9:23"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nativeSrc": "8705:6:23",
																														"nodeType": "YulIdentifier",
																														"src": "8705:6:23"
																													},
																													{
																														"kind": "number",
																														"nativeSrc": "8713:4:23",
																														"nodeType": "YulLiteral",
																														"src": "8713:4:23",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nativeSrc": "8701:3:23",
																													"nodeType": "YulIdentifier",
																													"src": "8701:3:23"
																												},
																												"nativeSrc": "8701:17:23",
																												"nodeType": "YulFunctionCall",
																												"src": "8701:17:23"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nativeSrc": "8671:18:23",
																											"nodeType": "YulIdentifier",
																											"src": "8671:18:23"
																										},
																										"nativeSrc": "8671:48:23",
																										"nodeType": "YulFunctionCall",
																										"src": "8671:48:23"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "8656:6:23",
																									"nodeType": "YulIdentifier",
																									"src": "8656:6:23"
																								},
																								"nativeSrc": "8656:64:23",
																								"nodeType": "YulFunctionCall",
																								"src": "8656:64:23"
																							},
																							"nativeSrc": "8656:64:23",
																							"nodeType": "YulExpressionStatement",
																							"src": "8656:64:23"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "8561:7:23",
																							"nodeType": "YulIdentifier",
																							"src": "8561:7:23"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "8570:6:23",
																							"nodeType": "YulIdentifier",
																							"src": "8570:6:23"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "8558:2:23",
																						"nodeType": "YulIdentifier",
																						"src": "8558:2:23"
																					},
																					"nativeSrc": "8558:19:23",
																					"nodeType": "YulFunctionCall",
																					"src": "8558:19:23"
																				},
																				"nativeSrc": "8555:179:23",
																				"nodeType": "YulIf",
																				"src": "8555:179:23"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "8754:4:23",
																							"nodeType": "YulIdentifier",
																							"src": "8754:4:23"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nativeSrc": "8768:6:23",
																											"nodeType": "YulIdentifier",
																											"src": "8768:6:23"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "8776:1:23",
																											"nodeType": "YulLiteral",
																											"src": "8776:1:23",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nativeSrc": "8764:3:23",
																										"nodeType": "YulIdentifier",
																										"src": "8764:3:23"
																									},
																									"nativeSrc": "8764:14:23",
																									"nodeType": "YulFunctionCall",
																									"src": "8764:14:23"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "8780:1:23",
																									"nodeType": "YulLiteral",
																									"src": "8780:1:23",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "8760:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "8760:3:23"
																							},
																							"nativeSrc": "8760:22:23",
																							"nodeType": "YulFunctionCall",
																							"src": "8760:22:23"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "8747:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "8747:6:23"
																					},
																					"nativeSrc": "8747:36:23",
																					"nodeType": "YulFunctionCall",
																					"src": "8747:36:23"
																				},
																				"nativeSrc": "8747:36:23",
																				"nodeType": "YulExpressionStatement",
																				"src": "8747:36:23"
																			}
																		]
																	},
																	"nativeSrc": "8175:618:23",
																	"nodeType": "YulCase",
																	"src": "8175:618:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "8180:1:23",
																		"nodeType": "YulLiteral",
																		"src": "8180:1:23",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "8810:222:23",
																		"nodeType": "YulBlock",
																		"src": "8810:222:23",
																		"statements": [
																			{
																				"nativeSrc": "8824:14:23",
																				"nodeType": "YulVariableDeclaration",
																				"src": "8824:14:23",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "8837:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8837:1:23",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "8828:5:23",
																						"nodeType": "YulTypedName",
																						"src": "8828:5:23",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "8861:67:23",
																					"nodeType": "YulBlock",
																					"src": "8861:67:23",
																					"statements": [
																						{
																							"nativeSrc": "8879:35:23",
																							"nodeType": "YulAssignment",
																							"src": "8879:35:23",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "8898:3:23",
																												"nodeType": "YulIdentifier",
																												"src": "8898:3:23"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "8903:9:23",
																												"nodeType": "YulIdentifier",
																												"src": "8903:9:23"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "8894:3:23",
																											"nodeType": "YulIdentifier",
																											"src": "8894:3:23"
																										},
																										"nativeSrc": "8894:19:23",
																										"nodeType": "YulFunctionCall",
																										"src": "8894:19:23"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "8888:5:23",
																									"nodeType": "YulIdentifier",
																									"src": "8888:5:23"
																								},
																								"nativeSrc": "8888:26:23",
																								"nodeType": "YulFunctionCall",
																								"src": "8888:26:23"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "8879:5:23",
																									"nodeType": "YulIdentifier",
																									"src": "8879:5:23"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "8854:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "8854:6:23"
																				},
																				"nativeSrc": "8851:77:23",
																				"nodeType": "YulIf",
																				"src": "8851:77:23"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "8948:4:23",
																							"nodeType": "YulIdentifier",
																							"src": "8948:4:23"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "9007:5:23",
																									"nodeType": "YulIdentifier",
																									"src": "9007:5:23"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "9014:6:23",
																									"nodeType": "YulIdentifier",
																									"src": "9014:6:23"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "8954:52:23",
																								"nodeType": "YulIdentifier",
																								"src": "8954:52:23"
																							},
																							"nativeSrc": "8954:67:23",
																							"nodeType": "YulFunctionCall",
																							"src": "8954:67:23"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "8941:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "8941:6:23"
																					},
																					"nativeSrc": "8941:81:23",
																					"nodeType": "YulFunctionCall",
																					"src": "8941:81:23"
																				},
																				"nativeSrc": "8941:81:23",
																				"nodeType": "YulExpressionStatement",
																				"src": "8941:81:23"
																			}
																		]
																	},
																	"nativeSrc": "8802:230:23",
																	"nodeType": "YulCase",
																	"src": "8802:230:23",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "8155:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "8155:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8163:2:23",
																		"nodeType": "YulLiteral",
																		"src": "8163:2:23",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "8152:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "8152:2:23"
																},
																"nativeSrc": "8152:14:23",
																"nodeType": "YulFunctionCall",
																"src": "8152:14:23"
															},
															"nativeSrc": "8145:887:23",
															"nodeType": "YulSwitch",
															"src": "8145:887:23"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "7643:1395:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "7724:4:23",
														"nodeType": "YulTypedName",
														"src": "7724:4:23",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "7730:3:23",
														"nodeType": "YulTypedName",
														"src": "7730:3:23",
														"type": ""
													}
												],
												"src": "7643:1395:23"
											},
											{
												"body": {
													"nativeSrc": "9109:53:23",
													"nodeType": "YulBlock",
													"src": "9109:53:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "9126:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "9126:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9149:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "9149:5:23"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "9131:17:23",
																			"nodeType": "YulIdentifier",
																			"src": "9131:17:23"
																		},
																		"nativeSrc": "9131:24:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9131:24:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9119:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9119:6:23"
																},
																"nativeSrc": "9119:37:23",
																"nodeType": "YulFunctionCall",
																"src": "9119:37:23"
															},
															"nativeSrc": "9119:37:23",
															"nodeType": "YulExpressionStatement",
															"src": "9119:37:23"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "9044:118:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9097:5:23",
														"nodeType": "YulTypedName",
														"src": "9097:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "9104:3:23",
														"nodeType": "YulTypedName",
														"src": "9104:3:23",
														"type": ""
													}
												],
												"src": "9044:118:23"
											},
											{
												"body": {
													"nativeSrc": "9266:124:23",
													"nodeType": "YulBlock",
													"src": "9266:124:23",
													"statements": [
														{
															"nativeSrc": "9276:26:23",
															"nodeType": "YulAssignment",
															"src": "9276:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9288:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "9288:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9299:2:23",
																		"nodeType": "YulLiteral",
																		"src": "9299:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9284:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "9284:3:23"
																},
																"nativeSrc": "9284:18:23",
																"nodeType": "YulFunctionCall",
																"src": "9284:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9276:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "9276:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "9356:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "9356:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9369:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9369:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9380:1:23",
																				"nodeType": "YulLiteral",
																				"src": "9380:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9365:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9365:3:23"
																		},
																		"nativeSrc": "9365:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9365:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "9312:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "9312:43:23"
																},
																"nativeSrc": "9312:71:23",
																"nodeType": "YulFunctionCall",
																"src": "9312:71:23"
															},
															"nativeSrc": "9312:71:23",
															"nodeType": "YulExpressionStatement",
															"src": "9312:71:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "9168:222:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9238:9:23",
														"nodeType": "YulTypedName",
														"src": "9238:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9250:6:23",
														"nodeType": "YulTypedName",
														"src": "9250:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9261:4:23",
														"nodeType": "YulTypedName",
														"src": "9261:4:23",
														"type": ""
													}
												],
												"src": "9168:222:23"
											},
											{
												"body": {
													"nativeSrc": "9492:73:23",
													"nodeType": "YulBlock",
													"src": "9492:73:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "9509:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "9509:3:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "9514:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "9514:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9502:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9502:6:23"
																},
																"nativeSrc": "9502:19:23",
																"nodeType": "YulFunctionCall",
																"src": "9502:19:23"
															},
															"nativeSrc": "9502:19:23",
															"nodeType": "YulExpressionStatement",
															"src": "9502:19:23"
														},
														{
															"nativeSrc": "9530:29:23",
															"nodeType": "YulAssignment",
															"src": "9530:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "9549:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "9549:3:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9554:4:23",
																		"nodeType": "YulLiteral",
																		"src": "9554:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9545:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "9545:3:23"
																},
																"nativeSrc": "9545:14:23",
																"nodeType": "YulFunctionCall",
																"src": "9545:14:23"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "9530:11:23",
																	"nodeType": "YulIdentifier",
																	"src": "9530:11:23"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "9396:169:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "9464:3:23",
														"nodeType": "YulTypedName",
														"src": "9464:3:23",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "9469:6:23",
														"nodeType": "YulTypedName",
														"src": "9469:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "9480:11:23",
														"nodeType": "YulTypedName",
														"src": "9480:11:23",
														"type": ""
													}
												],
												"src": "9396:169:23"
											},
											{
												"body": {
													"nativeSrc": "9677:115:23",
													"nodeType": "YulBlock",
													"src": "9677:115:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "9699:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "9699:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9707:1:23",
																				"nodeType": "YulLiteral",
																				"src": "9707:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9695:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9695:3:23"
																		},
																		"nativeSrc": "9695:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9695:14:23"
																	},
																	{
																		"hexValue": "4174206c65617374206f6e65207465616d206164647265737320726571756972",
																		"kind": "string",
																		"nativeSrc": "9711:34:23",
																		"nodeType": "YulLiteral",
																		"src": "9711:34:23",
																		"type": "",
																		"value": "At least one team address requir"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9688:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9688:6:23"
																},
																"nativeSrc": "9688:58:23",
																"nodeType": "YulFunctionCall",
																"src": "9688:58:23"
															},
															"nativeSrc": "9688:58:23",
															"nodeType": "YulExpressionStatement",
															"src": "9688:58:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "9767:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "9767:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9775:2:23",
																				"nodeType": "YulLiteral",
																				"src": "9775:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9763:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9763:3:23"
																		},
																		"nativeSrc": "9763:15:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9763:15:23"
																	},
																	{
																		"hexValue": "6564",
																		"kind": "string",
																		"nativeSrc": "9780:4:23",
																		"nodeType": "YulLiteral",
																		"src": "9780:4:23",
																		"type": "",
																		"value": "ed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9756:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9756:6:23"
																},
																"nativeSrc": "9756:29:23",
																"nodeType": "YulFunctionCall",
																"src": "9756:29:23"
															},
															"nativeSrc": "9756:29:23",
															"nodeType": "YulExpressionStatement",
															"src": "9756:29:23"
														}
													]
												},
												"name": "store_literal_in_memory_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6",
												"nativeSrc": "9571:221:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "9669:6:23",
														"nodeType": "YulTypedName",
														"src": "9669:6:23",
														"type": ""
													}
												],
												"src": "9571:221:23"
											},
											{
												"body": {
													"nativeSrc": "9944:220:23",
													"nodeType": "YulBlock",
													"src": "9944:220:23",
													"statements": [
														{
															"nativeSrc": "9954:74:23",
															"nodeType": "YulAssignment",
															"src": "9954:74:23",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10020:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "10020:3:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10025:2:23",
																		"nodeType": "YulLiteral",
																		"src": "10025:2:23",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "9961:58:23",
																	"nodeType": "YulIdentifier",
																	"src": "9961:58:23"
																},
																"nativeSrc": "9961:67:23",
																"nodeType": "YulFunctionCall",
																"src": "9961:67:23"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "9954:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "9954:3:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10126:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "10126:3:23"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6",
																	"nativeSrc": "10037:88:23",
																	"nodeType": "YulIdentifier",
																	"src": "10037:88:23"
																},
																"nativeSrc": "10037:93:23",
																"nodeType": "YulFunctionCall",
																"src": "10037:93:23"
															},
															"nativeSrc": "10037:93:23",
															"nodeType": "YulExpressionStatement",
															"src": "10037:93:23"
														},
														{
															"nativeSrc": "10139:19:23",
															"nodeType": "YulAssignment",
															"src": "10139:19:23",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10150:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "10150:3:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10155:2:23",
																		"nodeType": "YulLiteral",
																		"src": "10155:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10146:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "10146:3:23"
																},
																"nativeSrc": "10146:12:23",
																"nodeType": "YulFunctionCall",
																"src": "10146:12:23"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "10139:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "10139:3:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "9798:366:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "9932:3:23",
														"nodeType": "YulTypedName",
														"src": "9932:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "9940:3:23",
														"nodeType": "YulTypedName",
														"src": "9940:3:23",
														"type": ""
													}
												],
												"src": "9798:366:23"
											},
											{
												"body": {
													"nativeSrc": "10341:248:23",
													"nodeType": "YulBlock",
													"src": "10341:248:23",
													"statements": [
														{
															"nativeSrc": "10351:26:23",
															"nodeType": "YulAssignment",
															"src": "10351:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10363:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "10363:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10374:2:23",
																		"nodeType": "YulLiteral",
																		"src": "10374:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10359:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "10359:3:23"
																},
																"nativeSrc": "10359:18:23",
																"nodeType": "YulFunctionCall",
																"src": "10359:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10351:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "10351:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10398:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10398:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10409:1:23",
																				"nodeType": "YulLiteral",
																				"src": "10409:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10394:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10394:3:23"
																		},
																		"nativeSrc": "10394:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10394:17:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "10417:4:23",
																				"nodeType": "YulIdentifier",
																				"src": "10417:4:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "10423:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10423:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "10413:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10413:3:23"
																		},
																		"nativeSrc": "10413:20:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10413:20:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10387:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10387:6:23"
																},
																"nativeSrc": "10387:47:23",
																"nodeType": "YulFunctionCall",
																"src": "10387:47:23"
															},
															"nativeSrc": "10387:47:23",
															"nodeType": "YulExpressionStatement",
															"src": "10387:47:23"
														},
														{
															"nativeSrc": "10443:139:23",
															"nodeType": "YulAssignment",
															"src": "10443:139:23",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "10577:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "10577:4:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10451:124:23",
																	"nodeType": "YulIdentifier",
																	"src": "10451:124:23"
																},
																"nativeSrc": "10451:131:23",
																"nodeType": "YulFunctionCall",
																"src": "10451:131:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10443:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "10443:4:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "10170:419:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10321:9:23",
														"nodeType": "YulTypedName",
														"src": "10321:9:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10336:4:23",
														"nodeType": "YulTypedName",
														"src": "10336:4:23",
														"type": ""
													}
												],
												"src": "10170:419:23"
											},
											{
												"body": {
													"nativeSrc": "10623:152:23",
													"nodeType": "YulBlock",
													"src": "10623:152:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10640:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10640:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10643:77:23",
																		"nodeType": "YulLiteral",
																		"src": "10643:77:23",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10633:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10633:6:23"
																},
																"nativeSrc": "10633:88:23",
																"nodeType": "YulFunctionCall",
																"src": "10633:88:23"
															},
															"nativeSrc": "10633:88:23",
															"nodeType": "YulExpressionStatement",
															"src": "10633:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10737:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10737:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10740:4:23",
																		"nodeType": "YulLiteral",
																		"src": "10740:4:23",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10730:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10730:6:23"
																},
																"nativeSrc": "10730:15:23",
																"nodeType": "YulFunctionCall",
																"src": "10730:15:23"
															},
															"nativeSrc": "10730:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "10730:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10761:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10761:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10764:4:23",
																		"nodeType": "YulLiteral",
																		"src": "10764:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "10754:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10754:6:23"
																},
																"nativeSrc": "10754:15:23",
																"nodeType": "YulFunctionCall",
																"src": "10754:15:23"
															},
															"nativeSrc": "10754:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "10754:15:23"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "10595:180:23",
												"nodeType": "YulFunctionDefinition",
												"src": "10595:180:23"
											},
											{
												"body": {
													"nativeSrc": "10829:362:23",
													"nodeType": "YulBlock",
													"src": "10829:362:23",
													"statements": [
														{
															"nativeSrc": "10839:25:23",
															"nodeType": "YulAssignment",
															"src": "10839:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "10862:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "10862:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "10844:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "10844:17:23"
																},
																"nativeSrc": "10844:20:23",
																"nodeType": "YulFunctionCall",
																"src": "10844:20:23"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "10839:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "10839:1:23"
																}
															]
														},
														{
															"nativeSrc": "10873:25:23",
															"nodeType": "YulAssignment",
															"src": "10873:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "10896:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "10896:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "10878:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "10878:17:23"
																},
																"nativeSrc": "10878:20:23",
																"nodeType": "YulFunctionCall",
																"src": "10878:20:23"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "10873:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "10873:1:23"
																}
															]
														},
														{
															"nativeSrc": "10907:28:23",
															"nodeType": "YulVariableDeclaration",
															"src": "10907:28:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "10930:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "10930:1:23"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "10933:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "10933:1:23"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "10926:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "10926:3:23"
																},
																"nativeSrc": "10926:9:23",
																"nodeType": "YulFunctionCall",
																"src": "10926:9:23"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nativeSrc": "10911:11:23",
																	"nodeType": "YulTypedName",
																	"src": "10911:11:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "10944:41:23",
															"nodeType": "YulAssignment",
															"src": "10944:41:23",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nativeSrc": "10973:11:23",
																		"nodeType": "YulIdentifier",
																		"src": "10973:11:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "10955:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "10955:17:23"
																},
																"nativeSrc": "10955:30:23",
																"nodeType": "YulFunctionCall",
																"src": "10955:30:23"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "10944:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "10944:7:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "11162:22:23",
																"nodeType": "YulBlock",
																"src": "11162:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "11164:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "11164:16:23"
																			},
																			"nativeSrc": "11164:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "11164:18:23"
																		},
																		"nativeSrc": "11164:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "11164:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "11095:1:23",
																						"nodeType": "YulIdentifier",
																						"src": "11095:1:23"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "11088:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "11088:6:23"
																				},
																				"nativeSrc": "11088:9:23",
																				"nodeType": "YulFunctionCall",
																				"src": "11088:9:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "11118:1:23",
																						"nodeType": "YulIdentifier",
																						"src": "11118:1:23"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "11125:7:23",
																								"nodeType": "YulIdentifier",
																								"src": "11125:7:23"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "11134:1:23",
																								"nodeType": "YulIdentifier",
																								"src": "11134:1:23"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "11121:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "11121:3:23"
																						},
																						"nativeSrc": "11121:15:23",
																						"nodeType": "YulFunctionCall",
																						"src": "11121:15:23"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "11115:2:23",
																					"nodeType": "YulIdentifier",
																					"src": "11115:2:23"
																				},
																				"nativeSrc": "11115:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "11115:22:23"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "11068:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "11068:2:23"
																		},
																		"nativeSrc": "11068:83:23",
																		"nodeType": "YulFunctionCall",
																		"src": "11068:83:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "11048:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11048:6:23"
																},
																"nativeSrc": "11048:113:23",
																"nodeType": "YulFunctionCall",
																"src": "11048:113:23"
															},
															"nativeSrc": "11045:139:23",
															"nodeType": "YulIf",
															"src": "11045:139:23"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "10781:410:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "10812:1:23",
														"nodeType": "YulTypedName",
														"src": "10812:1:23",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "10815:1:23",
														"nodeType": "YulTypedName",
														"src": "10815:1:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "10821:7:23",
														"nodeType": "YulTypedName",
														"src": "10821:7:23",
														"type": ""
													}
												],
												"src": "10781:410:23"
											},
											{
												"body": {
													"nativeSrc": "11225:152:23",
													"nodeType": "YulBlock",
													"src": "11225:152:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11242:1:23",
																		"nodeType": "YulLiteral",
																		"src": "11242:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11245:77:23",
																		"nodeType": "YulLiteral",
																		"src": "11245:77:23",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11235:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11235:6:23"
																},
																"nativeSrc": "11235:88:23",
																"nodeType": "YulFunctionCall",
																"src": "11235:88:23"
															},
															"nativeSrc": "11235:88:23",
															"nodeType": "YulExpressionStatement",
															"src": "11235:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11339:1:23",
																		"nodeType": "YulLiteral",
																		"src": "11339:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11342:4:23",
																		"nodeType": "YulLiteral",
																		"src": "11342:4:23",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11332:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11332:6:23"
																},
																"nativeSrc": "11332:15:23",
																"nodeType": "YulFunctionCall",
																"src": "11332:15:23"
															},
															"nativeSrc": "11332:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "11332:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11363:1:23",
																		"nodeType": "YulLiteral",
																		"src": "11363:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11366:4:23",
																		"nodeType": "YulLiteral",
																		"src": "11366:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "11356:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11356:6:23"
																},
																"nativeSrc": "11356:15:23",
																"nodeType": "YulFunctionCall",
																"src": "11356:15:23"
															},
															"nativeSrc": "11356:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "11356:15:23"
														}
													]
												},
												"name": "panic_error_0x12",
												"nativeSrc": "11197:180:23",
												"nodeType": "YulFunctionDefinition",
												"src": "11197:180:23"
											},
											{
												"body": {
													"nativeSrc": "11425:143:23",
													"nodeType": "YulBlock",
													"src": "11425:143:23",
													"statements": [
														{
															"nativeSrc": "11435:25:23",
															"nodeType": "YulAssignment",
															"src": "11435:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11458:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11458:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11440:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "11440:17:23"
																},
																"nativeSrc": "11440:20:23",
																"nodeType": "YulFunctionCall",
																"src": "11440:20:23"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "11435:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11435:1:23"
																}
															]
														},
														{
															"nativeSrc": "11469:25:23",
															"nodeType": "YulAssignment",
															"src": "11469:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "11492:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11492:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11474:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "11474:17:23"
																},
																"nativeSrc": "11474:20:23",
																"nodeType": "YulFunctionCall",
																"src": "11474:20:23"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "11469:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11469:1:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "11516:22:23",
																"nodeType": "YulBlock",
																"src": "11516:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nativeSrc": "11518:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "11518:16:23"
																			},
																			"nativeSrc": "11518:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "11518:18:23"
																		},
																		"nativeSrc": "11518:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "11518:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "11513:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11513:1:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "11506:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11506:6:23"
																},
																"nativeSrc": "11506:9:23",
																"nodeType": "YulFunctionCall",
																"src": "11506:9:23"
															},
															"nativeSrc": "11503:35:23",
															"nodeType": "YulIf",
															"src": "11503:35:23"
														},
														{
															"nativeSrc": "11548:14:23",
															"nodeType": "YulAssignment",
															"src": "11548:14:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11557:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11557:1:23"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "11560:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11560:1:23"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "11553:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "11553:3:23"
																},
																"nativeSrc": "11553:9:23",
																"nodeType": "YulFunctionCall",
																"src": "11553:9:23"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "11548:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11548:1:23"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "11383:185:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "11414:1:23",
														"nodeType": "YulTypedName",
														"src": "11414:1:23",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "11417:1:23",
														"nodeType": "YulTypedName",
														"src": "11417:1:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "11423:1:23",
														"nodeType": "YulTypedName",
														"src": "11423:1:23",
														"type": ""
													}
												],
												"src": "11383:185:23"
											},
											{
												"body": {
													"nativeSrc": "11602:152:23",
													"nodeType": "YulBlock",
													"src": "11602:152:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11619:1:23",
																		"nodeType": "YulLiteral",
																		"src": "11619:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11622:77:23",
																		"nodeType": "YulLiteral",
																		"src": "11622:77:23",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11612:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11612:6:23"
																},
																"nativeSrc": "11612:88:23",
																"nodeType": "YulFunctionCall",
																"src": "11612:88:23"
															},
															"nativeSrc": "11612:88:23",
															"nodeType": "YulExpressionStatement",
															"src": "11612:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11716:1:23",
																		"nodeType": "YulLiteral",
																		"src": "11716:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11719:4:23",
																		"nodeType": "YulLiteral",
																		"src": "11719:4:23",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11709:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11709:6:23"
																},
																"nativeSrc": "11709:15:23",
																"nodeType": "YulFunctionCall",
																"src": "11709:15:23"
															},
															"nativeSrc": "11709:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "11709:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11740:1:23",
																		"nodeType": "YulLiteral",
																		"src": "11740:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11743:4:23",
																		"nodeType": "YulLiteral",
																		"src": "11743:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "11733:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11733:6:23"
																},
																"nativeSrc": "11733:15:23",
																"nodeType": "YulFunctionCall",
																"src": "11733:15:23"
															},
															"nativeSrc": "11733:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "11733:15:23"
														}
													]
												},
												"name": "panic_error_0x32",
												"nativeSrc": "11574:180:23",
												"nodeType": "YulFunctionDefinition",
												"src": "11574:180:23"
											},
											{
												"body": {
													"nativeSrc": "11804:147:23",
													"nodeType": "YulBlock",
													"src": "11804:147:23",
													"statements": [
														{
															"nativeSrc": "11814:25:23",
															"nodeType": "YulAssignment",
															"src": "11814:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11837:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11837:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11819:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "11819:17:23"
																},
																"nativeSrc": "11819:20:23",
																"nodeType": "YulFunctionCall",
																"src": "11819:20:23"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "11814:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11814:1:23"
																}
															]
														},
														{
															"nativeSrc": "11848:25:23",
															"nodeType": "YulAssignment",
															"src": "11848:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "11871:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11871:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11853:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "11853:17:23"
																},
																"nativeSrc": "11853:20:23",
																"nodeType": "YulFunctionCall",
																"src": "11853:20:23"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "11848:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11848:1:23"
																}
															]
														},
														{
															"nativeSrc": "11882:16:23",
															"nodeType": "YulAssignment",
															"src": "11882:16:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11893:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11893:1:23"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "11896:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11896:1:23"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11889:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "11889:3:23"
																},
																"nativeSrc": "11889:9:23",
																"nodeType": "YulFunctionCall",
																"src": "11889:9:23"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "11882:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "11882:3:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "11922:22:23",
																"nodeType": "YulBlock",
																"src": "11922:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "11924:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "11924:16:23"
																			},
																			"nativeSrc": "11924:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "11924:18:23"
																		},
																		"nativeSrc": "11924:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "11924:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11914:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11914:1:23"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "11917:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "11917:3:23"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "11911:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "11911:2:23"
																},
																"nativeSrc": "11911:10:23",
																"nodeType": "YulFunctionCall",
																"src": "11911:10:23"
															},
															"nativeSrc": "11908:36:23",
															"nodeType": "YulIf",
															"src": "11908:36:23"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "11760:191:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "11791:1:23",
														"nodeType": "YulTypedName",
														"src": "11791:1:23",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "11794:1:23",
														"nodeType": "YulTypedName",
														"src": "11794:1:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "11800:3:23",
														"nodeType": "YulTypedName",
														"src": "11800:3:23",
														"type": ""
													}
												],
												"src": "11760:191:23"
											},
											{
												"body": {
													"nativeSrc": "12022:53:23",
													"nodeType": "YulBlock",
													"src": "12022:53:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "12039:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "12039:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "12062:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "12062:5:23"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "12044:17:23",
																			"nodeType": "YulIdentifier",
																			"src": "12044:17:23"
																		},
																		"nativeSrc": "12044:24:23",
																		"nodeType": "YulFunctionCall",
																		"src": "12044:24:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12032:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "12032:6:23"
																},
																"nativeSrc": "12032:37:23",
																"nodeType": "YulFunctionCall",
																"src": "12032:37:23"
															},
															"nativeSrc": "12032:37:23",
															"nodeType": "YulExpressionStatement",
															"src": "12032:37:23"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "11957:118:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "12010:5:23",
														"nodeType": "YulTypedName",
														"src": "12010:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "12017:3:23",
														"nodeType": "YulTypedName",
														"src": "12017:3:23",
														"type": ""
													}
												],
												"src": "11957:118:23"
											},
											{
												"body": {
													"nativeSrc": "12235:288:23",
													"nodeType": "YulBlock",
													"src": "12235:288:23",
													"statements": [
														{
															"nativeSrc": "12245:26:23",
															"nodeType": "YulAssignment",
															"src": "12245:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "12257:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "12257:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12268:2:23",
																		"nodeType": "YulLiteral",
																		"src": "12268:2:23",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12253:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "12253:3:23"
																},
																"nativeSrc": "12253:18:23",
																"nodeType": "YulFunctionCall",
																"src": "12253:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "12245:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "12245:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "12325:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "12325:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12338:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "12338:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12349:1:23",
																				"nodeType": "YulLiteral",
																				"src": "12349:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12334:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "12334:3:23"
																		},
																		"nativeSrc": "12334:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "12334:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "12281:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "12281:43:23"
																},
																"nativeSrc": "12281:71:23",
																"nodeType": "YulFunctionCall",
																"src": "12281:71:23"
															},
															"nativeSrc": "12281:71:23",
															"nodeType": "YulExpressionStatement",
															"src": "12281:71:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "12406:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "12406:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12419:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "12419:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12430:2:23",
																				"nodeType": "YulLiteral",
																				"src": "12430:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12415:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "12415:3:23"
																		},
																		"nativeSrc": "12415:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "12415:18:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "12362:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "12362:43:23"
																},
																"nativeSrc": "12362:72:23",
																"nodeType": "YulFunctionCall",
																"src": "12362:72:23"
															},
															"nativeSrc": "12362:72:23",
															"nodeType": "YulExpressionStatement",
															"src": "12362:72:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "12488:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "12488:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12501:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "12501:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12512:2:23",
																				"nodeType": "YulLiteral",
																				"src": "12512:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12497:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "12497:3:23"
																		},
																		"nativeSrc": "12497:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "12497:18:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "12444:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "12444:43:23"
																},
																"nativeSrc": "12444:72:23",
																"nodeType": "YulFunctionCall",
																"src": "12444:72:23"
															},
															"nativeSrc": "12444:72:23",
															"nodeType": "YulExpressionStatement",
															"src": "12444:72:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "12081:442:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "12191:9:23",
														"nodeType": "YulTypedName",
														"src": "12191:9:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "12203:6:23",
														"nodeType": "YulTypedName",
														"src": "12203:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "12211:6:23",
														"nodeType": "YulTypedName",
														"src": "12211:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "12219:6:23",
														"nodeType": "YulTypedName",
														"src": "12219:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "12230:4:23",
														"nodeType": "YulTypedName",
														"src": "12230:4:23",
														"type": ""
													}
												],
												"src": "12081:442:23"
											},
											{
												"body": {
													"nativeSrc": "12627:124:23",
													"nodeType": "YulBlock",
													"src": "12627:124:23",
													"statements": [
														{
															"nativeSrc": "12637:26:23",
															"nodeType": "YulAssignment",
															"src": "12637:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "12649:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "12649:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12660:2:23",
																		"nodeType": "YulLiteral",
																		"src": "12660:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12645:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "12645:3:23"
																},
																"nativeSrc": "12645:18:23",
																"nodeType": "YulFunctionCall",
																"src": "12645:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "12637:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "12637:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "12717:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "12717:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12730:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "12730:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12741:1:23",
																				"nodeType": "YulLiteral",
																				"src": "12741:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12726:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "12726:3:23"
																		},
																		"nativeSrc": "12726:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "12726:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "12673:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "12673:43:23"
																},
																"nativeSrc": "12673:71:23",
																"nodeType": "YulFunctionCall",
																"src": "12673:71:23"
															},
															"nativeSrc": "12673:71:23",
															"nodeType": "YulExpressionStatement",
															"src": "12673:71:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "12529:222:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "12599:9:23",
														"nodeType": "YulTypedName",
														"src": "12599:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "12611:6:23",
														"nodeType": "YulTypedName",
														"src": "12611:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "12622:4:23",
														"nodeType": "YulTypedName",
														"src": "12622:4:23",
														"type": ""
													}
												],
												"src": "12529:222:23"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // address[]\n    function abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_address_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_address_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6(memPtr) {\n\n        mstore(add(memPtr, 0), \"At least one team address requir\")\n\n        mstore(add(memPtr, 32), \"ed\")\n\n    }\n\n    function abi_encode_t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
									"id": 23,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x23EF CODESIZE SUB DUP1 PUSH2 0x23EF DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x31 SWAP2 SWAP1 PUSH2 0x8A4 JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x6373796400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4353594400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xAD SWAP2 SWAP1 PUSH2 0xB0E JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0xBD SWAP2 SWAP1 PUSH2 0xB0E JUMP JUMPDEST POP POP POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x130 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x127 SWAP2 SWAP1 PUSH2 0xBEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13F DUP2 PUSH2 0x2E6 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH0 DUP3 MLOAD GT PUSH2 0x183 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17A SWAP1 PUSH2 0xC85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x6 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x199 SWAP3 SWAP2 SWAP1 PUSH2 0x647 JUMP JUMPDEST POP DUP1 PUSH1 0x8 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x206 CALLER PUSH1 0x64 PUSH1 0x50 PUSH4 0x59682F00 PUSH2 0x1F1 SWAP2 SWAP1 PUSH2 0xCD0 JUMP JUMPDEST PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x3A9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH0 PUSH0 SWAP1 POP JUMPDEST PUSH1 0x6 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x29C JUMPI PUSH2 0x28F PUSH1 0x6 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x22F JUMPI PUSH2 0x22E PUSH2 0xD6E JUMP JUMPDEST JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 DUP1 SLOAD SWAP1 POP PUSH1 0x64 PUSH1 0xA PUSH4 0x59682F00 PUSH2 0x270 SWAP2 SWAP1 PUSH2 0xCD0 JUMP JUMPDEST PUSH2 0x27A SWAP2 SWAP1 PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x284 SWAP2 SWAP1 PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x3A9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x20B JUMP JUMPDEST POP PUSH2 0x2C9 ADDRESS PUSH1 0x64 PUSH1 0xA PUSH4 0x59682F00 PUSH2 0x2B4 SWAP2 SWAP1 PUSH2 0xCD0 JUMP JUMPDEST PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0xD3E JUMP JUMPDEST PUSH2 0x3A9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH4 0x5A39A80 TIMESTAMP PUSH2 0x2D9 SWAP2 SWAP1 PUSH2 0xD9B JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE POP POP POP PUSH2 0xE2B JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x419 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x410 SWAP2 SWAP1 PUSH2 0xBEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x42A PUSH0 DUP4 DUP4 PUSH2 0x42E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x47E JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x472 SWAP2 SWAP1 PUSH2 0xD9B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x54C JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x507 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FE SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x593 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x5DD JUMP JUMPDEST DUP1 PUSH0 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x63A SWAP2 SWAP1 PUSH2 0xE12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x6BD JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x6BC JUMPI DUP3 MLOAD DUP3 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x665 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x6CA SWAP2 SWAP1 PUSH2 0x6CE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x6E5 JUMPI PUSH0 DUP2 PUSH0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x6CF JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x744 DUP3 PUSH2 0x6FE JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x763 JUMPI PUSH2 0x762 PUSH2 0x70E JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x775 PUSH2 0x6E9 JUMP JUMPDEST SWAP1 POP PUSH2 0x781 DUP3 DUP3 PUSH2 0x73B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x7A0 JUMPI PUSH2 0x79F PUSH2 0x70E JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x7DE DUP3 PUSH2 0x7B5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7EE DUP2 PUSH2 0x7D4 JUMP JUMPDEST DUP2 EQ PUSH2 0x7F8 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x809 DUP2 PUSH2 0x7E5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x821 PUSH2 0x81C DUP5 PUSH2 0x786 JUMP JUMPDEST PUSH2 0x76C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x844 JUMPI PUSH2 0x843 PUSH2 0x7B1 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x86D JUMPI DUP1 PUSH2 0x859 DUP9 DUP3 PUSH2 0x7FB JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x846 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x88B JUMPI PUSH2 0x88A PUSH2 0x6FA JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x89B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x80F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8BA JUMPI PUSH2 0x8B9 PUSH2 0x6F2 JUMP JUMPDEST JUMPDEST PUSH0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8D7 JUMPI PUSH2 0x8D6 PUSH2 0x6F6 JUMP JUMPDEST JUMPDEST PUSH2 0x8E3 DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x8F4 DUP6 DUP3 DUP7 ADD PUSH2 0x7FB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x94C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x95F JUMPI PUSH2 0x95E PUSH2 0x908 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x9C1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x986 JUMP JUMPDEST PUSH2 0x9CB DUP7 DUP4 PUSH2 0x986 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xA0F PUSH2 0xA0A PUSH2 0xA05 DUP5 PUSH2 0x9E3 JUMP JUMPDEST PUSH2 0x9EC JUMP JUMPDEST PUSH2 0x9E3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA28 DUP4 PUSH2 0x9F5 JUMP JUMPDEST PUSH2 0xA3C PUSH2 0xA34 DUP3 PUSH2 0xA16 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x992 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA53 PUSH2 0xA44 JUMP JUMPDEST PUSH2 0xA5E DUP2 DUP5 DUP5 PUSH2 0xA1F JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA81 JUMPI PUSH2 0xA76 PUSH0 DUP3 PUSH2 0xA4B JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xA64 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xAC6 JUMPI PUSH2 0xA97 DUP2 PUSH2 0x965 JUMP JUMPDEST PUSH2 0xAA0 DUP5 PUSH2 0x977 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xAAF JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0xAC3 PUSH2 0xABB DUP6 PUSH2 0x977 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xA63 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xAE6 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0xACB JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xAFE DUP4 DUP4 PUSH2 0xAD7 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB17 DUP3 PUSH2 0x8FE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB30 JUMPI PUSH2 0xB2F PUSH2 0x70E JUMP JUMPDEST JUMPDEST PUSH2 0xB3A DUP3 SLOAD PUSH2 0x935 JUMP JUMPDEST PUSH2 0xB45 DUP3 DUP3 DUP6 PUSH2 0xA85 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xB76 JUMPI PUSH0 DUP5 ISZERO PUSH2 0xB64 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0xB6E DUP6 DUP3 PUSH2 0xAF3 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0xB84 DUP7 PUSH2 0x965 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xBAB JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB86 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0xBC8 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0xBC4 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0xAD7 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBE6 DUP2 PUSH2 0x7D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBFF PUSH0 DUP4 ADD DUP5 PUSH2 0xBDD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4174206C65617374206F6E65207465616D206164647265737320726571756972 PUSH0 DUP3 ADD MSTORE PUSH32 0x6564000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xC6F PUSH1 0x22 DUP4 PUSH2 0xC05 JUMP JUMPDEST SWAP2 POP PUSH2 0xC7A DUP3 PUSH2 0xC15 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xC9C DUP2 PUSH2 0xC63 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xCDA DUP3 PUSH2 0x9E3 JUMP JUMPDEST SWAP2 POP PUSH2 0xCE5 DUP4 PUSH2 0x9E3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xCF3 DUP2 PUSH2 0x9E3 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xD0A JUMPI PUSH2 0xD09 PUSH2 0xCA3 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xD48 DUP3 PUSH2 0x9E3 JUMP JUMPDEST SWAP2 POP PUSH2 0xD53 DUP4 PUSH2 0x9E3 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xD63 JUMPI PUSH2 0xD62 PUSH2 0xD11 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xDA5 DUP3 PUSH2 0x9E3 JUMP JUMPDEST SWAP2 POP PUSH2 0xDB0 DUP4 PUSH2 0x9E3 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xDC8 JUMPI PUSH2 0xDC7 PUSH2 0xCA3 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDD7 DUP2 PUSH2 0x9E3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xDF0 PUSH0 DUP4 ADD DUP7 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0xDFD PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xDCE JUMP JUMPDEST PUSH2 0xE0A PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDCE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE25 PUSH0 DUP4 ADD DUP5 PUSH2 0xDCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x15B7 DUP1 PUSH2 0xE38 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x109 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x76AE9B2D GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xBDD3D825 EQ PUSH2 0x2C7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xEB91D37E EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x333 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x76AE9B2D EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x902D55A5 EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x279 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x35928998 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x215 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x179 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x115 PUSH2 0x34F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x122 SWAP2 SWAP1 PUSH2 0xFA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x145 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x140 SWAP2 SWAP1 PUSH2 0x1053 JUMP JUMPDEST PUSH2 0x3DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x163 PUSH2 0x401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x193 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18E SWAP2 SWAP1 PUSH2 0x10EC JUMP JUMPDEST PUSH2 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B1 PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0x1157 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CF PUSH2 0x46C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DC SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FA SWAP2 SWAP1 PUSH2 0x1170 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20C SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21D PUSH2 0x4B9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x227 PUSH2 0x4CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x245 PUSH2 0x4D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x252 SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x263 PUSH2 0x4FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x270 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x281 PUSH2 0x502 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28E SWAP2 SWAP1 PUSH2 0xFA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AC SWAP2 SWAP1 PUSH2 0x1053 JUMP JUMPDEST PUSH2 0x592 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CF PUSH2 0x5EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DC SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x11C3 JUMP JUMPDEST PUSH2 0x60F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x348 SWAP2 SWAP1 PUSH2 0x1170 JUMP JUMPDEST PUSH2 0x790 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x35E SWAP1 PUSH2 0x122E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x38A SWAP1 PUSH2 0x122E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3AC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x3E9 PUSH2 0x814 JUMP JUMPDEST SWAP1 POP PUSH2 0x3F6 DUP2 DUP6 DUP6 PUSH2 0x81B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x7 SLOAD TIMESTAMP LT ISZERO PUSH2 0x450 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x447 SWAP1 PUSH2 0x12A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x45B DUP5 DUP5 DUP5 PUSH2 0x82D JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0x5A39A80 DUP2 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x85B JUMP JUMPDEST PUSH2 0x4CA PUSH0 PUSH2 0x8E2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0x59682F00 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x511 SWAP1 PUSH2 0x122E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x53D SWAP1 PUSH2 0x122E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x588 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x55F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x588 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x56B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x7 SLOAD TIMESTAMP LT ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CF SWAP1 PUSH2 0x12A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E2 DUP4 DUP4 PUSH2 0x9A5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x701 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x725 SWAP2 SWAP1 PUSH2 0x13B1 JUMP JUMPDEST POP POP POP POP POP POP SWAP1 POP PUSH25 0x1000000000000000000000000000000000000000000000000 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x77F SWAP2 SWAP1 PUSH2 0x147B JUMP JUMPDEST PUSH2 0x789 SWAP2 SWAP1 PUSH2 0x14E9 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x798 PUSH2 0x85B JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x808 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7FF SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x811 DUP2 PUSH2 0x8E2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x828 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x9C7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x837 PUSH2 0x814 JUMP JUMPDEST SWAP1 POP PUSH2 0x844 DUP6 DUP3 DUP6 PUSH2 0xB96 JUMP JUMPDEST PUSH2 0x84F DUP6 DUP6 DUP6 PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x863 PUSH2 0x814 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x881 PUSH2 0x4D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8E0 JUMPI PUSH2 0x8A4 PUSH2 0x814 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D7 SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x9AF PUSH2 0x814 JUMP JUMPDEST SWAP1 POP PUSH2 0x9BC DUP2 DUP6 DUP6 PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA37 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2E SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAA7 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9E SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xB90 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB87 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xBA1 DUP5 DUP5 PUSH2 0x60F JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 LT ISZERO PUSH2 0xC23 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xC14 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC0B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC22 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x9C7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC99 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC90 SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD09 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD00 SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD14 DUP4 DUP4 DUP4 PUSH2 0xD19 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD69 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xD5D SWAP2 SWAP1 PUSH2 0x154E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xE37 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xDF2 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE7E JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xEC8 JUMP JUMPDEST DUP1 PUSH0 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xF25 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xF74 DUP3 PUSH2 0xF32 JUMP JUMPDEST PUSH2 0xF7E DUP2 DUP6 PUSH2 0xF3C JUMP JUMPDEST SWAP4 POP PUSH2 0xF8E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xF4C JUMP JUMPDEST PUSH2 0xF97 DUP2 PUSH2 0xF5A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xFBA DUP2 DUP5 PUSH2 0xF6A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xFEF DUP3 PUSH2 0xFC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFF DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1009 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x101A DUP2 PUSH2 0xFF6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1032 DUP2 PUSH2 0x1020 JUMP JUMPDEST DUP2 EQ PUSH2 0x103C JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x104D DUP2 PUSH2 0x1029 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1069 JUMPI PUSH2 0x1068 PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1076 DUP6 DUP3 DUP7 ADD PUSH2 0x100C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1087 DUP6 DUP3 DUP7 ADD PUSH2 0x103F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10A5 DUP2 PUSH2 0x1091 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10BE PUSH0 DUP4 ADD DUP5 PUSH2 0x109C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10CD DUP2 PUSH2 0x1020 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10E6 PUSH0 DUP4 ADD DUP5 PUSH2 0x10C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1103 JUMPI PUSH2 0x1102 PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1110 DUP7 DUP3 DUP8 ADD PUSH2 0x100C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1121 DUP7 DUP3 DUP8 ADD PUSH2 0x100C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1132 DUP7 DUP3 DUP8 ADD PUSH2 0x103F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1151 DUP2 PUSH2 0x113C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x116A PUSH0 DUP4 ADD DUP5 PUSH2 0x1148 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1185 JUMPI PUSH2 0x1184 PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1192 DUP5 DUP3 DUP6 ADD PUSH2 0x100C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11A4 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11BD PUSH0 DUP4 ADD DUP5 PUSH2 0x119B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11D9 JUMPI PUSH2 0x11D8 PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x11E6 DUP6 DUP3 DUP7 ADD PUSH2 0x100C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x11F7 DUP6 DUP3 DUP7 ADD PUSH2 0x100C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1245 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1258 JUMPI PUSH2 0x1257 PUSH2 0x1201 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5465616D20746F6B656E7320617265206C6F636B656400000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1292 PUSH1 0x16 DUP4 PUSH2 0xF3C JUMP JUMPDEST SWAP2 POP PUSH2 0x129D DUP3 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x12BF DUP2 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12CF DUP2 PUSH2 0xFC6 JUMP JUMPDEST DUP2 EQ PUSH2 0x12D9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x12EA DUP2 PUSH2 0x12C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x2 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1305 DUP2 PUSH2 0x12F0 JUMP JUMPDEST DUP2 EQ PUSH2 0x130F JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x1320 DUP2 PUSH2 0x12FC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x133C DUP2 PUSH2 0x1326 JUMP JUMPDEST DUP2 EQ PUSH2 0x1346 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x1357 DUP2 PUSH2 0x1333 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1366 DUP2 PUSH2 0x113C JUMP JUMPDEST DUP2 EQ PUSH2 0x1370 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x1381 DUP2 PUSH2 0x135D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1390 DUP2 PUSH2 0x1091 JUMP JUMPDEST DUP2 EQ PUSH2 0x139A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x13AB DUP2 PUSH2 0x1387 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x13CC JUMPI PUSH2 0x13CB PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x13D9 DUP11 DUP3 DUP12 ADD PUSH2 0x12DC JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x13EA DUP11 DUP3 DUP12 ADD PUSH2 0x1312 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x13FB DUP11 DUP3 DUP12 ADD PUSH2 0x1349 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x140C DUP11 DUP3 DUP12 ADD PUSH2 0x1349 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x141D DUP11 DUP3 DUP12 ADD PUSH2 0x1349 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x142E DUP11 DUP3 DUP12 ADD PUSH2 0x1373 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x143F DUP11 DUP3 DUP12 ADD PUSH2 0x139D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x1485 DUP3 PUSH2 0x1020 JUMP JUMPDEST SWAP2 POP PUSH2 0x1490 DUP4 PUSH2 0x1020 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x149E DUP2 PUSH2 0x1020 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x14B5 JUMPI PUSH2 0x14B4 PUSH2 0x144E JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x14F3 DUP3 PUSH2 0x1020 JUMP JUMPDEST SWAP2 POP PUSH2 0x14FE DUP4 PUSH2 0x1020 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x150E JUMPI PUSH2 0x150D PUSH2 0x14BC JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x152C PUSH0 DUP4 ADD DUP7 PUSH2 0x119B JUMP JUMPDEST PUSH2 0x1539 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x10C4 JUMP JUMPDEST PUSH2 0x1546 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x10C4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1558 DUP3 PUSH2 0x1020 JUMP JUMPDEST SWAP2 POP PUSH2 0x1563 DUP4 PUSH2 0x1020 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x157B JUMPI PUSH2 0x157A PUSH2 0x144E JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT LOG4 PUSH29 0x2A630E2A262F5A64FF4CD65FE42DD9CD2AC1B308AF7BB4B5C211F56B4B PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "489:1868:4:-:0;;;884:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;999:10;1582:113:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1656:5;1648;:13;;;;;;:::i;:::-;;1681:7;1671;:17;;;;;;:::i;:::-;;1582:113;;1297:1:5;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;1059:1:4::2;1035:14;:21;:25;1027:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;1126:14;1110:13;:30;;;;;;;;;;;;:::i;:::-;;1165:12;1151:11;;:26;;;;;;;;;;;;;;;;;;1190:42;1196:10;1228:3;1223:2;654:16;1208:17;;;;:::i;:::-;:23;;;;:::i;:::-;1190:5;;;:42;;:::i;:::-;1261:9;1273:1;1261:13;;1256:162;1280:13;:20;;;;1276:1;:24;1256:162;;;1322:71;1328:13;1342:1;1328:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1372:13;:20;;;;1366:3;1361:2;654:16;1346:17;;;;:::i;:::-;:23;;;;:::i;:::-;:46;;;;:::i;:::-;1322:5;;;:71;;:::i;:::-;1302:3;;;;;;;1256:162;;;;1428:45;1442:4;1469:3;1464:2;654:16;1449:17;;;;:::i;:::-;:23;;;;:::i;:::-;1428:5;;;:45;;:::i;:::-;733:12;1520:15;:34;;;;:::i;:::-;1502:15;:52;;;;884:694:::0;;489:1868;;2912:187:5;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;7362:208:7:-;7451:1;7432:21;;:7;:21;;;7428:91;;7505:1;7476:32;;;;;;;;;;;:::i;:::-;;;;;;;;7428:91;7528:35;7544:1;7548:7;7557:5;7528:7;;;:35;;:::i;:::-;7362:208;;:::o;5912:1107::-;6017:1;6001:18;;:4;:18;;;5997:540;;6153:5;6137:12;;:21;;;;;;;:::i;:::-;;;;;;;;5997:540;;;6189:19;6211:9;:15;6221:4;6211:15;;;;;;;;;;;;;;;;6189:37;;6258:5;6244:11;:19;6240:115;;;6315:4;6321:11;6334:5;6290:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6240:115;6507:5;6493:11;:19;6475:9;:15;6485:4;6475:15;;;;;;;;;;;;;;;:37;;;;6175:362;5997:540;6565:1;6551:16;;:2;:16;;;6547:425;;6730:5;6714:12;;:21;;;;;;;;;;;6547:425;;;6942:5;6925:9;:13;6935:2;6925:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6547:425;7002:2;6987:25;;6996:4;6987:25;;;7006:5;6987:25;;;;;;:::i;:::-;;;;;;;;5912:1107;;;:::o;489:1868:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:23:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:102;498:6;549:2;545:7;540:2;533:5;529:14;525:28;515:38;;457:102;;;:::o;565:180::-;613:77;610:1;603:88;710:4;707:1;700:15;734:4;731:1;724:15;751:281;834:27;856:4;834:27;:::i;:::-;826:6;822:40;964:6;952:10;949:22;928:18;916:10;913:34;910:62;907:88;;;975:18;;:::i;:::-;907:88;1015:10;1011:2;1004:22;794:238;751:281;;:::o;1038:129::-;1072:6;1099:20;;:::i;:::-;1089:30;;1128:33;1156:4;1148:6;1128:33;:::i;:::-;1038:129;;;:::o;1173:311::-;1250:4;1340:18;1332:6;1329:30;1326:56;;;1362:18;;:::i;:::-;1326:56;1412:4;1404:6;1400:17;1392:25;;1472:4;1466;1462:15;1454:23;;1173:311;;;:::o;1490:117::-;1599:1;1596;1589:12;1613:126;1650:7;1690:42;1683:5;1679:54;1668:65;;1613:126;;;:::o;1745:96::-;1782:7;1811:24;1829:5;1811:24;:::i;:::-;1800:35;;1745:96;;;:::o;1847:122::-;1920:24;1938:5;1920:24;:::i;:::-;1913:5;1910:35;1900:63;;1959:1;1956;1949:12;1900:63;1847:122;:::o;1975:143::-;2032:5;2063:6;2057:13;2048:22;;2079:33;2106:5;2079:33;:::i;:::-;1975:143;;;;:::o;2141:732::-;2248:5;2273:81;2289:64;2346:6;2289:64;:::i;:::-;2273:81;:::i;:::-;2264:90;;2374:5;2403:6;2396:5;2389:21;2437:4;2430:5;2426:16;2419:23;;2490:4;2482:6;2478:17;2470:6;2466:30;2519:3;2511:6;2508:15;2505:122;;;2538:79;;:::i;:::-;2505:122;2653:6;2636:231;2670:6;2665:3;2662:15;2636:231;;;2745:3;2774:48;2818:3;2806:10;2774:48;:::i;:::-;2769:3;2762:61;2852:4;2847:3;2843:14;2836:21;;2712:155;2696:4;2691:3;2687:14;2680:21;;2636:231;;;2640:21;2254:619;;2141:732;;;;;:::o;2896:385::-;2978:5;3027:3;3020:4;3012:6;3008:17;3004:27;2994:122;;3035:79;;:::i;:::-;2994:122;3145:6;3139:13;3170:105;3271:3;3263:6;3256:4;3248:6;3244:17;3170:105;:::i;:::-;3161:114;;2984:297;2896:385;;;;:::o;3287:710::-;3391:6;3399;3448:2;3436:9;3427:7;3423:23;3419:32;3416:119;;;3454:79;;:::i;:::-;3416:119;3595:1;3584:9;3580:17;3574:24;3625:18;3617:6;3614:30;3611:117;;;3647:79;;:::i;:::-;3611:117;3752:89;3833:7;3824:6;3813:9;3809:22;3752:89;:::i;:::-;3742:99;;3545:306;3890:2;3916:64;3972:7;3963:6;3952:9;3948:22;3916:64;:::i;:::-;3906:74;;3861:129;3287:710;;;;;:::o;4003:99::-;4055:6;4089:5;4083:12;4073:22;;4003:99;;;:::o;4108:180::-;4156:77;4153:1;4146:88;4253:4;4250:1;4243:15;4277:4;4274:1;4267:15;4294:320;4338:6;4375:1;4369:4;4365:12;4355:22;;4422:1;4416:4;4412:12;4443:18;4433:81;;4499:4;4491:6;4487:17;4477:27;;4433:81;4561:2;4553:6;4550:14;4530:18;4527:38;4524:84;;4580:18;;:::i;:::-;4524:84;4345:269;4294:320;;;:::o;4620:141::-;4669:4;4692:3;4684:11;;4715:3;4712:1;4705:14;4749:4;4746:1;4736:18;4728:26;;4620:141;;;:::o;4767:93::-;4804:6;4851:2;4846;4839:5;4835:14;4831:23;4821:33;;4767:93;;;:::o;4866:107::-;4910:8;4960:5;4954:4;4950:16;4929:37;;4866:107;;;;:::o;4979:393::-;5048:6;5098:1;5086:10;5082:18;5121:97;5151:66;5140:9;5121:97;:::i;:::-;5239:39;5269:8;5258:9;5239:39;:::i;:::-;5227:51;;5311:4;5307:9;5300:5;5296:21;5287:30;;5360:4;5350:8;5346:19;5339:5;5336:30;5326:40;;5055:317;;4979:393;;;;;:::o;5378:77::-;5415:7;5444:5;5433:16;;5378:77;;;:::o;5461:60::-;5489:3;5510:5;5503:12;;5461:60;;;:::o;5527:142::-;5577:9;5610:53;5628:34;5637:24;5655:5;5637:24;:::i;:::-;5628:34;:::i;:::-;5610:53;:::i;:::-;5597:66;;5527:142;;;:::o;5675:75::-;5718:3;5739:5;5732:12;;5675:75;;;:::o;5756:269::-;5866:39;5897:7;5866:39;:::i;:::-;5927:91;5976:41;6000:16;5976:41;:::i;:::-;5968:6;5961:4;5955:11;5927:91;:::i;:::-;5921:4;5914:105;5832:193;5756:269;;;:::o;6031:73::-;6076:3;6097:1;6090:8;;6031:73;:::o;6110:189::-;6187:32;;:::i;:::-;6228:65;6286:6;6278;6272:4;6228:65;:::i;:::-;6163:136;6110:189;;:::o;6305:186::-;6365:120;6382:3;6375:5;6372:14;6365:120;;;6436:39;6473:1;6466:5;6436:39;:::i;:::-;6409:1;6402:5;6398:13;6389:22;;6365:120;;;6305:186;;:::o;6497:543::-;6598:2;6593:3;6590:11;6587:446;;;6632:38;6664:5;6632:38;:::i;:::-;6716:29;6734:10;6716:29;:::i;:::-;6706:8;6702:44;6899:2;6887:10;6884:18;6881:49;;;6920:8;6905:23;;6881:49;6943:80;6999:22;7017:3;6999:22;:::i;:::-;6989:8;6985:37;6972:11;6943:80;:::i;:::-;6602:431;;6587:446;6497:543;;;:::o;7046:117::-;7100:8;7150:5;7144:4;7140:16;7119:37;;7046:117;;;;:::o;7169:169::-;7213:6;7246:51;7294:1;7290:6;7282:5;7279:1;7275:13;7246:51;:::i;:::-;7242:56;7327:4;7321;7317:15;7307:25;;7220:118;7169:169;;;;:::o;7343:295::-;7419:4;7565:29;7590:3;7584:4;7565:29;:::i;:::-;7557:37;;7627:3;7624:1;7620:11;7614:4;7611:21;7603:29;;7343:295;;;;:::o;7643:1395::-;7760:37;7793:3;7760:37;:::i;:::-;7862:18;7854:6;7851:30;7848:56;;;7884:18;;:::i;:::-;7848:56;7928:38;7960:4;7954:11;7928:38;:::i;:::-;8013:67;8073:6;8065;8059:4;8013:67;:::i;:::-;8107:1;8131:4;8118:17;;8163:2;8155:6;8152:14;8180:1;8175:618;;;;8837:1;8854:6;8851:77;;;8903:9;8898:3;8894:19;8888:26;8879:35;;8851:77;8954:67;9014:6;9007:5;8954:67;:::i;:::-;8948:4;8941:81;8810:222;8145:887;;8175:618;8227:4;8223:9;8215:6;8211:22;8261:37;8293:4;8261:37;:::i;:::-;8320:1;8334:208;8348:7;8345:1;8342:14;8334:208;;;8427:9;8422:3;8418:19;8412:26;8404:6;8397:42;8478:1;8470:6;8466:14;8456:24;;8525:2;8514:9;8510:18;8497:31;;8371:4;8368:1;8364:12;8359:17;;8334:208;;;8570:6;8561:7;8558:19;8555:179;;;8628:9;8623:3;8619:19;8613:26;8671:48;8713:4;8705:6;8701:17;8690:9;8671:48;:::i;:::-;8663:6;8656:64;8578:156;8555:179;8780:1;8776;8768:6;8764:14;8760:22;8754:4;8747:36;8182:611;;;8145:887;;7735:1303;;;7643:1395;;:::o;9044:118::-;9131:24;9149:5;9131:24;:::i;:::-;9126:3;9119:37;9044:118;;:::o;9168:222::-;9261:4;9299:2;9288:9;9284:18;9276:26;;9312:71;9380:1;9369:9;9365:17;9356:6;9312:71;:::i;:::-;9168:222;;;;:::o;9396:169::-;9480:11;9514:6;9509:3;9502:19;9554:4;9549:3;9545:14;9530:29;;9396:169;;;;:::o;9571:221::-;9711:34;9707:1;9699:6;9695:14;9688:58;9780:4;9775:2;9767:6;9763:15;9756:29;9571:221;:::o;9798:366::-;9940:3;9961:67;10025:2;10020:3;9961:67;:::i;:::-;9954:74;;10037:93;10126:3;10037:93;:::i;:::-;10155:2;10150:3;10146:12;10139:19;;9798:366;;;:::o;10170:419::-;10336:4;10374:2;10363:9;10359:18;10351:26;;10423:9;10417:4;10413:20;10409:1;10398:9;10394:17;10387:47;10451:131;10577:4;10451:131;:::i;:::-;10443:139;;10170:419;;;:::o;10595:180::-;10643:77;10640:1;10633:88;10740:4;10737:1;10730:15;10764:4;10761:1;10754:15;10781:410;10821:7;10844:20;10862:1;10844:20;:::i;:::-;10839:25;;10878:20;10896:1;10878:20;:::i;:::-;10873:25;;10933:1;10930;10926:9;10955:30;10973:11;10955:30;:::i;:::-;10944:41;;11134:1;11125:7;11121:15;11118:1;11115:22;11095:1;11088:9;11068:83;11045:139;;11164:18;;:::i;:::-;11045:139;10829:362;10781:410;;;;:::o;11197:180::-;11245:77;11242:1;11235:88;11342:4;11339:1;11332:15;11366:4;11363:1;11356:15;11383:185;11423:1;11440:20;11458:1;11440:20;:::i;:::-;11435:25;;11474:20;11492:1;11474:20;:::i;:::-;11469:25;;11513:1;11503:35;;11518:18;;:::i;:::-;11503:35;11560:1;11557;11553:9;11548:14;;11383:185;;;;:::o;11574:180::-;11622:77;11619:1;11612:88;11719:4;11716:1;11709:15;11743:4;11740:1;11733:15;11760:191;11800:3;11819:20;11837:1;11819:20;:::i;:::-;11814:25;;11853:20;11871:1;11853:20;:::i;:::-;11848:25;;11896:1;11893;11889:9;11882:16;;11917:3;11914:1;11911:10;11908:36;;;11924:18;;:::i;:::-;11908:36;11760:191;;;;:::o;11957:118::-;12044:24;12062:5;12044:24;:::i;:::-;12039:3;12032:37;11957:118;;:::o;12081:442::-;12230:4;12268:2;12257:9;12253:18;12245:26;;12281:71;12349:1;12338:9;12334:17;12325:6;12281:71;:::i;:::-;12362:72;12430:2;12419:9;12415:18;12406:6;12362:72;:::i;:::-;12444;12512:2;12501:9;12497:18;12488:6;12444:72;:::i;:::-;12081:442;;;;;;:::o;12529:222::-;12622:4;12660:2;12649:9;12645:18;12637:26;;12673:71;12741:1;12730:9;12726:17;12717:6;12673:71;:::i;:::-;12529:222;;;;:::o;489:1868:4:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@TEAM_LOCK_PERIOD_206": {
									"entryPoint": 1132,
									"id": 206,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@TOTAL_SUPPLY_201": {
									"entryPoint": 1274,
									"id": 201,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_approve_1083": {
									"entryPoint": 2075,
									"id": 1083,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1143": {
									"entryPoint": 2503,
									"id": 1143,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkOwner_477": {
									"entryPoint": 2139,
									"id": 477,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1308": {
									"entryPoint": 2068,
									"id": 1308,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1191": {
									"entryPoint": 2966,
									"id": 1191,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_539": {
									"entryPoint": 2274,
									"id": 539,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_922": {
									"entryPoint": 3113,
									"id": 922,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_999": {
									"entryPoint": 3353,
									"id": 999,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_819": {
									"entryPoint": 1551,
									"id": 819,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_843": {
									"entryPoint": 991,
									"id": 843,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_778": {
									"entryPoint": 1140,
									"id": 778,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_756": {
									"entryPoint": 1124,
									"id": 756,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getCurrentPrice_391": {
									"entryPoint": 1681,
									"id": 391,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@name_738": {
									"entryPoint": 847,
									"id": 738,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_460": {
									"entryPoint": 1234,
									"id": 460,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_491": {
									"entryPoint": 1209,
									"id": 491,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_747": {
									"entryPoint": 1282,
									"id": 747,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@teamLockedUntil_211": {
									"entryPoint": 1228,
									"id": 211,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalSupply_765": {
									"entryPoint": 1025,
									"id": 765,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_355": {
									"entryPoint": 1034,
									"id": 355,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferFrom_875": {
									"entryPoint": 2093,
									"id": 875,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_519": {
									"entryPoint": 1936,
									"id": 519,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_333": {
									"entryPoint": 1426,
									"id": 333,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@transfer_802": {
									"entryPoint": 2469,
									"id": 802,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@uniswapPool_213": {
									"entryPoint": 1514,
									"id": 213,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 4108,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 5021,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_int24_fromMemory": {
									"entryPoint": 4882,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint160_fromMemory": {
									"entryPoint": 4828,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint16_fromMemory": {
									"entryPoint": 4937,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 4159,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint8_fromMemory": {
									"entryPoint": 4979,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4464,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 4547,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4332,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 4179,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory": {
									"entryPoint": 5041,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 4507,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 4252,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3946,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4742,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 4292,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 4424,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 4522,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 5401,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 4267,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4002,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4776,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 4307,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 4439,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 3890,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 3900,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5454,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 5353,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 5243,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 4069,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 4241,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_int24": {
									"entryPoint": 4848,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint16": {
									"entryPoint": 4902,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 4038,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 4128,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 4412,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 3916,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 4654,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5198,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 5308,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 4609,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 4034,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 3930,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf": {
									"entryPoint": 4702,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 4086,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 4999,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_int24": {
									"entryPoint": 4860,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint16": {
									"entryPoint": 4915,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint160": {
									"entryPoint": 4806,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 4137,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint8": {
									"entryPoint": 4957,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:11842:23",
										"nodeType": "YulBlock",
										"src": "0:11842:23",
										"statements": [
											{
												"body": {
													"nativeSrc": "66:40:23",
													"nodeType": "YulBlock",
													"src": "66:40:23",
													"statements": [
														{
															"nativeSrc": "77:22:23",
															"nodeType": "YulAssignment",
															"src": "77:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "93:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "87:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:23"
																},
																"nativeSrc": "87:12:23",
																"nodeType": "YulFunctionCall",
																"src": "87:12:23"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "77:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:23"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "7:99:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "49:5:23",
														"nodeType": "YulTypedName",
														"src": "49:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "59:6:23",
														"nodeType": "YulTypedName",
														"src": "59:6:23",
														"type": ""
													}
												],
												"src": "7:99:23"
											},
											{
												"body": {
													"nativeSrc": "208:73:23",
													"nodeType": "YulBlock",
													"src": "208:73:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "225:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "230:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "218:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:23"
																},
																"nativeSrc": "218:19:23",
																"nodeType": "YulFunctionCall",
																"src": "218:19:23"
															},
															"nativeSrc": "218:19:23",
															"nodeType": "YulExpressionStatement",
															"src": "218:19:23"
														},
														{
															"nativeSrc": "246:29:23",
															"nodeType": "YulAssignment",
															"src": "246:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "265:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "270:4:23",
																		"nodeType": "YulLiteral",
																		"src": "270:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "261:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:23"
																},
																"nativeSrc": "261:14:23",
																"nodeType": "YulFunctionCall",
																"src": "261:14:23"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "246:11:23",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:23"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "112:169:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "180:3:23",
														"nodeType": "YulTypedName",
														"src": "180:3:23",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "185:6:23",
														"nodeType": "YulTypedName",
														"src": "185:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "196:11:23",
														"nodeType": "YulTypedName",
														"src": "196:11:23",
														"type": ""
													}
												],
												"src": "112:169:23"
											},
											{
												"body": {
													"nativeSrc": "349:77:23",
													"nodeType": "YulBlock",
													"src": "349:77:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "366:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "366:3:23"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "371:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "371:3:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "376:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "376:6:23"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "360:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "360:5:23"
																},
																"nativeSrc": "360:23:23",
																"nodeType": "YulFunctionCall",
																"src": "360:23:23"
															},
															"nativeSrc": "360:23:23",
															"nodeType": "YulExpressionStatement",
															"src": "360:23:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "403:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "403:3:23"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "408:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "408:6:23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "399:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "399:3:23"
																		},
																		"nativeSrc": "399:16:23",
																		"nodeType": "YulFunctionCall",
																		"src": "399:16:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "417:1:23",
																		"nodeType": "YulLiteral",
																		"src": "417:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "392:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "392:6:23"
																},
																"nativeSrc": "392:27:23",
																"nodeType": "YulFunctionCall",
																"src": "392:27:23"
															},
															"nativeSrc": "392:27:23",
															"nodeType": "YulExpressionStatement",
															"src": "392:27:23"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "287:139:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "331:3:23",
														"nodeType": "YulTypedName",
														"src": "331:3:23",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "336:3:23",
														"nodeType": "YulTypedName",
														"src": "336:3:23",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "341:6:23",
														"nodeType": "YulTypedName",
														"src": "341:6:23",
														"type": ""
													}
												],
												"src": "287:139:23"
											},
											{
												"body": {
													"nativeSrc": "480:54:23",
													"nodeType": "YulBlock",
													"src": "480:54:23",
													"statements": [
														{
															"nativeSrc": "490:38:23",
															"nodeType": "YulAssignment",
															"src": "490:38:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "508:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "508:5:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "515:2:23",
																				"nodeType": "YulLiteral",
																				"src": "515:2:23",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "504:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "504:3:23"
																		},
																		"nativeSrc": "504:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "504:14:23"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "524:2:23",
																				"nodeType": "YulLiteral",
																				"src": "524:2:23",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "520:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "520:3:23"
																		},
																		"nativeSrc": "520:7:23",
																		"nodeType": "YulFunctionCall",
																		"src": "520:7:23"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "500:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "500:3:23"
																},
																"nativeSrc": "500:28:23",
																"nodeType": "YulFunctionCall",
																"src": "500:28:23"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "490:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "490:6:23"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "432:102:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "463:5:23",
														"nodeType": "YulTypedName",
														"src": "463:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "473:6:23",
														"nodeType": "YulTypedName",
														"src": "473:6:23",
														"type": ""
													}
												],
												"src": "432:102:23"
											},
											{
												"body": {
													"nativeSrc": "632:285:23",
													"nodeType": "YulBlock",
													"src": "632:285:23",
													"statements": [
														{
															"nativeSrc": "642:53:23",
															"nodeType": "YulVariableDeclaration",
															"src": "642:53:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "689:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "689:5:23"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "656:32:23",
																	"nodeType": "YulIdentifier",
																	"src": "656:32:23"
																},
																"nativeSrc": "656:39:23",
																"nodeType": "YulFunctionCall",
																"src": "656:39:23"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "646:6:23",
																	"nodeType": "YulTypedName",
																	"src": "646:6:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "704:78:23",
															"nodeType": "YulAssignment",
															"src": "704:78:23",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "770:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "770:3:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "775:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "775:6:23"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "711:58:23",
																	"nodeType": "YulIdentifier",
																	"src": "711:58:23"
																},
																"nativeSrc": "711:71:23",
																"nodeType": "YulFunctionCall",
																"src": "711:71:23"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "704:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "704:3:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "830:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "830:5:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "837:4:23",
																				"nodeType": "YulLiteral",
																				"src": "837:4:23",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "826:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "826:3:23"
																		},
																		"nativeSrc": "826:16:23",
																		"nodeType": "YulFunctionCall",
																		"src": "826:16:23"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "844:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "844:3:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "849:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "849:6:23"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "791:34:23",
																	"nodeType": "YulIdentifier",
																	"src": "791:34:23"
																},
																"nativeSrc": "791:65:23",
																"nodeType": "YulFunctionCall",
																"src": "791:65:23"
															},
															"nativeSrc": "791:65:23",
															"nodeType": "YulExpressionStatement",
															"src": "791:65:23"
														},
														{
															"nativeSrc": "865:46:23",
															"nodeType": "YulAssignment",
															"src": "865:46:23",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "876:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "876:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "903:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "903:6:23"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "881:21:23",
																			"nodeType": "YulIdentifier",
																			"src": "881:21:23"
																		},
																		"nativeSrc": "881:29:23",
																		"nodeType": "YulFunctionCall",
																		"src": "881:29:23"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "872:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "872:3:23"
																},
																"nativeSrc": "872:39:23",
																"nodeType": "YulFunctionCall",
																"src": "872:39:23"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "865:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "865:3:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "540:377:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "613:5:23",
														"nodeType": "YulTypedName",
														"src": "613:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "620:3:23",
														"nodeType": "YulTypedName",
														"src": "620:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "628:3:23",
														"nodeType": "YulTypedName",
														"src": "628:3:23",
														"type": ""
													}
												],
												"src": "540:377:23"
											},
											{
												"body": {
													"nativeSrc": "1041:195:23",
													"nodeType": "YulBlock",
													"src": "1041:195:23",
													"statements": [
														{
															"nativeSrc": "1051:26:23",
															"nodeType": "YulAssignment",
															"src": "1051:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1063:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "1063:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1074:2:23",
																		"nodeType": "YulLiteral",
																		"src": "1074:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1059:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "1059:3:23"
																},
																"nativeSrc": "1059:18:23",
																"nodeType": "YulFunctionCall",
																"src": "1059:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1051:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "1051:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1098:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "1098:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1109:1:23",
																				"nodeType": "YulLiteral",
																				"src": "1109:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1094:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1094:3:23"
																		},
																		"nativeSrc": "1094:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1094:17:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1117:4:23",
																				"nodeType": "YulIdentifier",
																				"src": "1117:4:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1123:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "1123:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1113:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1113:3:23"
																		},
																		"nativeSrc": "1113:20:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1113:20:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1087:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1087:6:23"
																},
																"nativeSrc": "1087:47:23",
																"nodeType": "YulFunctionCall",
																"src": "1087:47:23"
															},
															"nativeSrc": "1087:47:23",
															"nodeType": "YulExpressionStatement",
															"src": "1087:47:23"
														},
														{
															"nativeSrc": "1143:86:23",
															"nodeType": "YulAssignment",
															"src": "1143:86:23",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1215:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "1215:6:23"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1224:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "1224:4:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1151:63:23",
																	"nodeType": "YulIdentifier",
																	"src": "1151:63:23"
																},
																"nativeSrc": "1151:78:23",
																"nodeType": "YulFunctionCall",
																"src": "1151:78:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1143:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "1143:4:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "923:313:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1013:9:23",
														"nodeType": "YulTypedName",
														"src": "1013:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1025:6:23",
														"nodeType": "YulTypedName",
														"src": "1025:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1036:4:23",
														"nodeType": "YulTypedName",
														"src": "1036:4:23",
														"type": ""
													}
												],
												"src": "923:313:23"
											},
											{
												"body": {
													"nativeSrc": "1282:35:23",
													"nodeType": "YulBlock",
													"src": "1282:35:23",
													"statements": [
														{
															"nativeSrc": "1292:19:23",
															"nodeType": "YulAssignment",
															"src": "1292:19:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1308:2:23",
																		"nodeType": "YulLiteral",
																		"src": "1308:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1302:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "1302:5:23"
																},
																"nativeSrc": "1302:9:23",
																"nodeType": "YulFunctionCall",
																"src": "1302:9:23"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1292:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1292:6:23"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "1242:75:23",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1275:6:23",
														"nodeType": "YulTypedName",
														"src": "1275:6:23",
														"type": ""
													}
												],
												"src": "1242:75:23"
											},
											{
												"body": {
													"nativeSrc": "1412:28:23",
													"nodeType": "YulBlock",
													"src": "1412:28:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1429:1:23",
																		"nodeType": "YulLiteral",
																		"src": "1429:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1432:1:23",
																		"nodeType": "YulLiteral",
																		"src": "1432:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1422:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1422:6:23"
																},
																"nativeSrc": "1422:12:23",
																"nodeType": "YulFunctionCall",
																"src": "1422:12:23"
															},
															"nativeSrc": "1422:12:23",
															"nodeType": "YulExpressionStatement",
															"src": "1422:12:23"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "1323:117:23",
												"nodeType": "YulFunctionDefinition",
												"src": "1323:117:23"
											},
											{
												"body": {
													"nativeSrc": "1535:28:23",
													"nodeType": "YulBlock",
													"src": "1535:28:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1552:1:23",
																		"nodeType": "YulLiteral",
																		"src": "1552:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1555:1:23",
																		"nodeType": "YulLiteral",
																		"src": "1555:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1545:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1545:6:23"
																},
																"nativeSrc": "1545:12:23",
																"nodeType": "YulFunctionCall",
																"src": "1545:12:23"
															},
															"nativeSrc": "1545:12:23",
															"nodeType": "YulExpressionStatement",
															"src": "1545:12:23"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "1446:117:23",
												"nodeType": "YulFunctionDefinition",
												"src": "1446:117:23"
											},
											{
												"body": {
													"nativeSrc": "1614:81:23",
													"nodeType": "YulBlock",
													"src": "1614:81:23",
													"statements": [
														{
															"nativeSrc": "1624:65:23",
															"nodeType": "YulAssignment",
															"src": "1624:65:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1639:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "1639:5:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1646:42:23",
																		"nodeType": "YulLiteral",
																		"src": "1646:42:23",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1635:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "1635:3:23"
																},
																"nativeSrc": "1635:54:23",
																"nodeType": "YulFunctionCall",
																"src": "1635:54:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1624:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "1624:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "1569:126:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1596:5:23",
														"nodeType": "YulTypedName",
														"src": "1596:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1606:7:23",
														"nodeType": "YulTypedName",
														"src": "1606:7:23",
														"type": ""
													}
												],
												"src": "1569:126:23"
											},
											{
												"body": {
													"nativeSrc": "1746:51:23",
													"nodeType": "YulBlock",
													"src": "1746:51:23",
													"statements": [
														{
															"nativeSrc": "1756:35:23",
															"nodeType": "YulAssignment",
															"src": "1756:35:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1785:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "1785:5:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "1767:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "1767:17:23"
																},
																"nativeSrc": "1767:24:23",
																"nodeType": "YulFunctionCall",
																"src": "1767:24:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1756:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "1756:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "1701:96:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1728:5:23",
														"nodeType": "YulTypedName",
														"src": "1728:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1738:7:23",
														"nodeType": "YulTypedName",
														"src": "1738:7:23",
														"type": ""
													}
												],
												"src": "1701:96:23"
											},
											{
												"body": {
													"nativeSrc": "1846:79:23",
													"nodeType": "YulBlock",
													"src": "1846:79:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "1903:16:23",
																"nodeType": "YulBlock",
																"src": "1903:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1912:1:23",
																					"nodeType": "YulLiteral",
																					"src": "1912:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1915:1:23",
																					"nodeType": "YulLiteral",
																					"src": "1915:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1905:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "1905:6:23"
																			},
																			"nativeSrc": "1905:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1905:12:23"
																		},
																		"nativeSrc": "1905:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "1905:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1869:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "1869:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1894:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "1894:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "1876:17:23",
																					"nodeType": "YulIdentifier",
																					"src": "1876:17:23"
																				},
																				"nativeSrc": "1876:24:23",
																				"nodeType": "YulFunctionCall",
																				"src": "1876:24:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1866:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "1866:2:23"
																		},
																		"nativeSrc": "1866:35:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1866:35:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1859:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1859:6:23"
																},
																"nativeSrc": "1859:43:23",
																"nodeType": "YulFunctionCall",
																"src": "1859:43:23"
															},
															"nativeSrc": "1856:63:23",
															"nodeType": "YulIf",
															"src": "1856:63:23"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "1803:122:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1839:5:23",
														"nodeType": "YulTypedName",
														"src": "1839:5:23",
														"type": ""
													}
												],
												"src": "1803:122:23"
											},
											{
												"body": {
													"nativeSrc": "1983:87:23",
													"nodeType": "YulBlock",
													"src": "1983:87:23",
													"statements": [
														{
															"nativeSrc": "1993:29:23",
															"nodeType": "YulAssignment",
															"src": "1993:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2015:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2015:6:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2002:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "2002:12:23"
																},
																"nativeSrc": "2002:20:23",
																"nodeType": "YulFunctionCall",
																"src": "2002:20:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1993:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "1993:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2058:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "2058:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "2031:26:23",
																	"nodeType": "YulIdentifier",
																	"src": "2031:26:23"
																},
																"nativeSrc": "2031:33:23",
																"nodeType": "YulFunctionCall",
																"src": "2031:33:23"
															},
															"nativeSrc": "2031:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "2031:33:23"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "1931:139:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1961:6:23",
														"nodeType": "YulTypedName",
														"src": "1961:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1969:3:23",
														"nodeType": "YulTypedName",
														"src": "1969:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1977:5:23",
														"nodeType": "YulTypedName",
														"src": "1977:5:23",
														"type": ""
													}
												],
												"src": "1931:139:23"
											},
											{
												"body": {
													"nativeSrc": "2121:32:23",
													"nodeType": "YulBlock",
													"src": "2121:32:23",
													"statements": [
														{
															"nativeSrc": "2131:16:23",
															"nodeType": "YulAssignment",
															"src": "2131:16:23",
															"value": {
																"name": "value",
																"nativeSrc": "2142:5:23",
																"nodeType": "YulIdentifier",
																"src": "2142:5:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2131:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "2131:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "2076:77:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2103:5:23",
														"nodeType": "YulTypedName",
														"src": "2103:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2113:7:23",
														"nodeType": "YulTypedName",
														"src": "2113:7:23",
														"type": ""
													}
												],
												"src": "2076:77:23"
											},
											{
												"body": {
													"nativeSrc": "2202:79:23",
													"nodeType": "YulBlock",
													"src": "2202:79:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "2259:16:23",
																"nodeType": "YulBlock",
																"src": "2259:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2268:1:23",
																					"nodeType": "YulLiteral",
																					"src": "2268:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2271:1:23",
																					"nodeType": "YulLiteral",
																					"src": "2271:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2261:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "2261:6:23"
																			},
																			"nativeSrc": "2261:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "2261:12:23"
																		},
																		"nativeSrc": "2261:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "2261:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2225:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "2225:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2250:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "2250:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "2232:17:23",
																					"nodeType": "YulIdentifier",
																					"src": "2232:17:23"
																				},
																				"nativeSrc": "2232:24:23",
																				"nodeType": "YulFunctionCall",
																				"src": "2232:24:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2222:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "2222:2:23"
																		},
																		"nativeSrc": "2222:35:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2222:35:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2215:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2215:6:23"
																},
																"nativeSrc": "2215:43:23",
																"nodeType": "YulFunctionCall",
																"src": "2215:43:23"
															},
															"nativeSrc": "2212:63:23",
															"nodeType": "YulIf",
															"src": "2212:63:23"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2159:122:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2195:5:23",
														"nodeType": "YulTypedName",
														"src": "2195:5:23",
														"type": ""
													}
												],
												"src": "2159:122:23"
											},
											{
												"body": {
													"nativeSrc": "2339:87:23",
													"nodeType": "YulBlock",
													"src": "2339:87:23",
													"statements": [
														{
															"nativeSrc": "2349:29:23",
															"nodeType": "YulAssignment",
															"src": "2349:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2371:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2371:6:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2358:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "2358:12:23"
																},
																"nativeSrc": "2358:20:23",
																"nodeType": "YulFunctionCall",
																"src": "2358:20:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2349:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "2349:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2414:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "2414:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "2387:26:23",
																	"nodeType": "YulIdentifier",
																	"src": "2387:26:23"
																},
																"nativeSrc": "2387:33:23",
																"nodeType": "YulFunctionCall",
																"src": "2387:33:23"
															},
															"nativeSrc": "2387:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "2387:33:23"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "2287:139:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2317:6:23",
														"nodeType": "YulTypedName",
														"src": "2317:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2325:3:23",
														"nodeType": "YulTypedName",
														"src": "2325:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2333:5:23",
														"nodeType": "YulTypedName",
														"src": "2333:5:23",
														"type": ""
													}
												],
												"src": "2287:139:23"
											},
											{
												"body": {
													"nativeSrc": "2515:391:23",
													"nodeType": "YulBlock",
													"src": "2515:391:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "2561:83:23",
																"nodeType": "YulBlock",
																"src": "2561:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2563:77:23",
																				"nodeType": "YulIdentifier",
																				"src": "2563:77:23"
																			},
																			"nativeSrc": "2563:79:23",
																			"nodeType": "YulFunctionCall",
																			"src": "2563:79:23"
																		},
																		"nativeSrc": "2563:79:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "2563:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2536:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "2536:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2545:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "2545:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2532:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "2532:3:23"
																		},
																		"nativeSrc": "2532:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2532:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2557:2:23",
																		"nodeType": "YulLiteral",
																		"src": "2557:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2528:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "2528:3:23"
																},
																"nativeSrc": "2528:32:23",
																"nodeType": "YulFunctionCall",
																"src": "2528:32:23"
															},
															"nativeSrc": "2525:119:23",
															"nodeType": "YulIf",
															"src": "2525:119:23"
														},
														{
															"nativeSrc": "2654:117:23",
															"nodeType": "YulBlock",
															"src": "2654:117:23",
															"statements": [
																{
																	"nativeSrc": "2669:15:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2669:15:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2683:1:23",
																		"nodeType": "YulLiteral",
																		"src": "2683:1:23",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2673:6:23",
																			"nodeType": "YulTypedName",
																			"src": "2673:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2698:63:23",
																	"nodeType": "YulAssignment",
																	"src": "2698:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2733:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "2733:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2744:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "2744:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2729:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "2729:3:23"
																				},
																				"nativeSrc": "2729:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "2729:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2753:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "2753:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "2708:20:23",
																			"nodeType": "YulIdentifier",
																			"src": "2708:20:23"
																		},
																		"nativeSrc": "2708:53:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2708:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2698:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "2698:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "2781:118:23",
															"nodeType": "YulBlock",
															"src": "2781:118:23",
															"statements": [
																{
																	"nativeSrc": "2796:16:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2796:16:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2810:2:23",
																		"nodeType": "YulLiteral",
																		"src": "2810:2:23",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2800:6:23",
																			"nodeType": "YulTypedName",
																			"src": "2800:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2826:63:23",
																	"nodeType": "YulAssignment",
																	"src": "2826:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2861:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "2861:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2872:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "2872:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2857:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "2857:3:23"
																				},
																				"nativeSrc": "2857:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "2857:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2881:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "2881:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2836:20:23",
																			"nodeType": "YulIdentifier",
																			"src": "2836:20:23"
																		},
																		"nativeSrc": "2836:53:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2836:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "2826:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "2826:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "2432:474:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2477:9:23",
														"nodeType": "YulTypedName",
														"src": "2477:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2488:7:23",
														"nodeType": "YulTypedName",
														"src": "2488:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2500:6:23",
														"nodeType": "YulTypedName",
														"src": "2500:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2508:6:23",
														"nodeType": "YulTypedName",
														"src": "2508:6:23",
														"type": ""
													}
												],
												"src": "2432:474:23"
											},
											{
												"body": {
													"nativeSrc": "2954:48:23",
													"nodeType": "YulBlock",
													"src": "2954:48:23",
													"statements": [
														{
															"nativeSrc": "2964:32:23",
															"nodeType": "YulAssignment",
															"src": "2964:32:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2989:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "2989:5:23"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "2982:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "2982:6:23"
																		},
																		"nativeSrc": "2982:13:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2982:13:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2975:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2975:6:23"
																},
																"nativeSrc": "2975:21:23",
																"nodeType": "YulFunctionCall",
																"src": "2975:21:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2964:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "2964:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "2912:90:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2936:5:23",
														"nodeType": "YulTypedName",
														"src": "2936:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2946:7:23",
														"nodeType": "YulTypedName",
														"src": "2946:7:23",
														"type": ""
													}
												],
												"src": "2912:90:23"
											},
											{
												"body": {
													"nativeSrc": "3067:50:23",
													"nodeType": "YulBlock",
													"src": "3067:50:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3084:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "3084:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3104:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "3104:5:23"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3089:14:23",
																			"nodeType": "YulIdentifier",
																			"src": "3089:14:23"
																		},
																		"nativeSrc": "3089:21:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3089:21:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3077:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3077:6:23"
																},
																"nativeSrc": "3077:34:23",
																"nodeType": "YulFunctionCall",
																"src": "3077:34:23"
															},
															"nativeSrc": "3077:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "3077:34:23"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3008:109:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3055:5:23",
														"nodeType": "YulTypedName",
														"src": "3055:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3062:3:23",
														"nodeType": "YulTypedName",
														"src": "3062:3:23",
														"type": ""
													}
												],
												"src": "3008:109:23"
											},
											{
												"body": {
													"nativeSrc": "3215:118:23",
													"nodeType": "YulBlock",
													"src": "3215:118:23",
													"statements": [
														{
															"nativeSrc": "3225:26:23",
															"nodeType": "YulAssignment",
															"src": "3225:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3237:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3237:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3248:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3248:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3233:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3233:3:23"
																},
																"nativeSrc": "3233:18:23",
																"nodeType": "YulFunctionCall",
																"src": "3233:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3225:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "3225:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3299:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3299:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3312:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3312:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3323:1:23",
																				"nodeType": "YulLiteral",
																				"src": "3323:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3308:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3308:3:23"
																		},
																		"nativeSrc": "3308:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3308:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "3261:37:23",
																	"nodeType": "YulIdentifier",
																	"src": "3261:37:23"
																},
																"nativeSrc": "3261:65:23",
																"nodeType": "YulFunctionCall",
																"src": "3261:65:23"
															},
															"nativeSrc": "3261:65:23",
															"nodeType": "YulExpressionStatement",
															"src": "3261:65:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3123:210:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3187:9:23",
														"nodeType": "YulTypedName",
														"src": "3187:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3199:6:23",
														"nodeType": "YulTypedName",
														"src": "3199:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3210:4:23",
														"nodeType": "YulTypedName",
														"src": "3210:4:23",
														"type": ""
													}
												],
												"src": "3123:210:23"
											},
											{
												"body": {
													"nativeSrc": "3404:53:23",
													"nodeType": "YulBlock",
													"src": "3404:53:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3421:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "3421:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3444:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "3444:5:23"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "3426:17:23",
																			"nodeType": "YulIdentifier",
																			"src": "3426:17:23"
																		},
																		"nativeSrc": "3426:24:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3426:24:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3414:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3414:6:23"
																},
																"nativeSrc": "3414:37:23",
																"nodeType": "YulFunctionCall",
																"src": "3414:37:23"
															},
															"nativeSrc": "3414:37:23",
															"nodeType": "YulExpressionStatement",
															"src": "3414:37:23"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "3339:118:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3392:5:23",
														"nodeType": "YulTypedName",
														"src": "3392:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3399:3:23",
														"nodeType": "YulTypedName",
														"src": "3399:3:23",
														"type": ""
													}
												],
												"src": "3339:118:23"
											},
											{
												"body": {
													"nativeSrc": "3561:124:23",
													"nodeType": "YulBlock",
													"src": "3561:124:23",
													"statements": [
														{
															"nativeSrc": "3571:26:23",
															"nodeType": "YulAssignment",
															"src": "3571:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3583:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3583:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3594:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3594:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3579:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3579:3:23"
																},
																"nativeSrc": "3579:18:23",
																"nodeType": "YulFunctionCall",
																"src": "3579:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3571:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "3571:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3651:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3651:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3664:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3664:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3675:1:23",
																				"nodeType": "YulLiteral",
																				"src": "3675:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3660:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3660:3:23"
																		},
																		"nativeSrc": "3660:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3660:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "3607:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "3607:43:23"
																},
																"nativeSrc": "3607:71:23",
																"nodeType": "YulFunctionCall",
																"src": "3607:71:23"
															},
															"nativeSrc": "3607:71:23",
															"nodeType": "YulExpressionStatement",
															"src": "3607:71:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "3463:222:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3533:9:23",
														"nodeType": "YulTypedName",
														"src": "3533:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3545:6:23",
														"nodeType": "YulTypedName",
														"src": "3545:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3556:4:23",
														"nodeType": "YulTypedName",
														"src": "3556:4:23",
														"type": ""
													}
												],
												"src": "3463:222:23"
											},
											{
												"body": {
													"nativeSrc": "3791:519:23",
													"nodeType": "YulBlock",
													"src": "3791:519:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "3837:83:23",
																"nodeType": "YulBlock",
																"src": "3837:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3839:77:23",
																				"nodeType": "YulIdentifier",
																				"src": "3839:77:23"
																			},
																			"nativeSrc": "3839:79:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3839:79:23"
																		},
																		"nativeSrc": "3839:79:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3839:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3812:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "3812:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3821:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3821:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3808:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3808:3:23"
																		},
																		"nativeSrc": "3808:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3808:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3833:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3833:2:23",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3804:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3804:3:23"
																},
																"nativeSrc": "3804:32:23",
																"nodeType": "YulFunctionCall",
																"src": "3804:32:23"
															},
															"nativeSrc": "3801:119:23",
															"nodeType": "YulIf",
															"src": "3801:119:23"
														},
														{
															"nativeSrc": "3930:117:23",
															"nodeType": "YulBlock",
															"src": "3930:117:23",
															"statements": [
																{
																	"nativeSrc": "3945:15:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3945:15:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3959:1:23",
																		"nodeType": "YulLiteral",
																		"src": "3959:1:23",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3949:6:23",
																			"nodeType": "YulTypedName",
																			"src": "3949:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3974:63:23",
																	"nodeType": "YulAssignment",
																	"src": "3974:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4009:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "4009:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4020:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "4020:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4005:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "4005:3:23"
																				},
																				"nativeSrc": "4005:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "4005:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4029:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "4029:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3984:20:23",
																			"nodeType": "YulIdentifier",
																			"src": "3984:20:23"
																		},
																		"nativeSrc": "3984:53:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3984:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3974:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "3974:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4057:118:23",
															"nodeType": "YulBlock",
															"src": "4057:118:23",
															"statements": [
																{
																	"nativeSrc": "4072:16:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4072:16:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4086:2:23",
																		"nodeType": "YulLiteral",
																		"src": "4086:2:23",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4076:6:23",
																			"nodeType": "YulTypedName",
																			"src": "4076:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4102:63:23",
																	"nodeType": "YulAssignment",
																	"src": "4102:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4137:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "4137:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4148:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "4148:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4133:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "4133:3:23"
																				},
																				"nativeSrc": "4133:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "4133:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4157:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "4157:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4112:20:23",
																			"nodeType": "YulIdentifier",
																			"src": "4112:20:23"
																		},
																		"nativeSrc": "4112:53:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4112:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4102:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "4102:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4185:118:23",
															"nodeType": "YulBlock",
															"src": "4185:118:23",
															"statements": [
																{
																	"nativeSrc": "4200:16:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4200:16:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4214:2:23",
																		"nodeType": "YulLiteral",
																		"src": "4214:2:23",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4204:6:23",
																			"nodeType": "YulTypedName",
																			"src": "4204:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4230:63:23",
																	"nodeType": "YulAssignment",
																	"src": "4230:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4265:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "4265:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4276:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "4276:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4261:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "4261:3:23"
																				},
																				"nativeSrc": "4261:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "4261:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4285:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "4285:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4240:20:23",
																			"nodeType": "YulIdentifier",
																			"src": "4240:20:23"
																		},
																		"nativeSrc": "4240:53:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4240:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4230:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "4230:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "3691:619:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3745:9:23",
														"nodeType": "YulTypedName",
														"src": "3745:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3756:7:23",
														"nodeType": "YulTypedName",
														"src": "3756:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3768:6:23",
														"nodeType": "YulTypedName",
														"src": "3768:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3776:6:23",
														"nodeType": "YulTypedName",
														"src": "3776:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3784:6:23",
														"nodeType": "YulTypedName",
														"src": "3784:6:23",
														"type": ""
													}
												],
												"src": "3691:619:23"
											},
											{
												"body": {
													"nativeSrc": "4359:43:23",
													"nodeType": "YulBlock",
													"src": "4359:43:23",
													"statements": [
														{
															"nativeSrc": "4369:27:23",
															"nodeType": "YulAssignment",
															"src": "4369:27:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4384:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "4384:5:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4391:4:23",
																		"nodeType": "YulLiteral",
																		"src": "4391:4:23",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4380:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4380:3:23"
																},
																"nativeSrc": "4380:16:23",
																"nodeType": "YulFunctionCall",
																"src": "4380:16:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4369:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "4369:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4316:86:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4341:5:23",
														"nodeType": "YulTypedName",
														"src": "4341:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4351:7:23",
														"nodeType": "YulTypedName",
														"src": "4351:7:23",
														"type": ""
													}
												],
												"src": "4316:86:23"
											},
											{
												"body": {
													"nativeSrc": "4469:51:23",
													"nodeType": "YulBlock",
													"src": "4469:51:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4486:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "4486:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4507:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "4507:5:23"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nativeSrc": "4491:15:23",
																			"nodeType": "YulIdentifier",
																			"src": "4491:15:23"
																		},
																		"nativeSrc": "4491:22:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4491:22:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4479:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4479:6:23"
																},
																"nativeSrc": "4479:35:23",
																"nodeType": "YulFunctionCall",
																"src": "4479:35:23"
															},
															"nativeSrc": "4479:35:23",
															"nodeType": "YulExpressionStatement",
															"src": "4479:35:23"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4408:112:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4457:5:23",
														"nodeType": "YulTypedName",
														"src": "4457:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4464:3:23",
														"nodeType": "YulTypedName",
														"src": "4464:3:23",
														"type": ""
													}
												],
												"src": "4408:112:23"
											},
											{
												"body": {
													"nativeSrc": "4620:120:23",
													"nodeType": "YulBlock",
													"src": "4620:120:23",
													"statements": [
														{
															"nativeSrc": "4630:26:23",
															"nodeType": "YulAssignment",
															"src": "4630:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4642:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "4642:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4653:2:23",
																		"nodeType": "YulLiteral",
																		"src": "4653:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4638:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4638:3:23"
																},
																"nativeSrc": "4638:18:23",
																"nodeType": "YulFunctionCall",
																"src": "4638:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4630:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "4630:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "4706:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4706:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4719:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4719:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4730:1:23",
																				"nodeType": "YulLiteral",
																				"src": "4730:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4715:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4715:3:23"
																		},
																		"nativeSrc": "4715:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4715:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "4666:39:23",
																	"nodeType": "YulIdentifier",
																	"src": "4666:39:23"
																},
																"nativeSrc": "4666:67:23",
																"nodeType": "YulFunctionCall",
																"src": "4666:67:23"
															},
															"nativeSrc": "4666:67:23",
															"nodeType": "YulExpressionStatement",
															"src": "4666:67:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "4526:214:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4592:9:23",
														"nodeType": "YulTypedName",
														"src": "4592:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4604:6:23",
														"nodeType": "YulTypedName",
														"src": "4604:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4615:4:23",
														"nodeType": "YulTypedName",
														"src": "4615:4:23",
														"type": ""
													}
												],
												"src": "4526:214:23"
											},
											{
												"body": {
													"nativeSrc": "4812:263:23",
													"nodeType": "YulBlock",
													"src": "4812:263:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "4858:83:23",
																"nodeType": "YulBlock",
																"src": "4858:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "4860:77:23",
																				"nodeType": "YulIdentifier",
																				"src": "4860:77:23"
																			},
																			"nativeSrc": "4860:79:23",
																			"nodeType": "YulFunctionCall",
																			"src": "4860:79:23"
																		},
																		"nativeSrc": "4860:79:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "4860:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4833:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "4833:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4842:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4842:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4829:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4829:3:23"
																		},
																		"nativeSrc": "4829:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4829:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4854:2:23",
																		"nodeType": "YulLiteral",
																		"src": "4854:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4825:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4825:3:23"
																},
																"nativeSrc": "4825:32:23",
																"nodeType": "YulFunctionCall",
																"src": "4825:32:23"
															},
															"nativeSrc": "4822:119:23",
															"nodeType": "YulIf",
															"src": "4822:119:23"
														},
														{
															"nativeSrc": "4951:117:23",
															"nodeType": "YulBlock",
															"src": "4951:117:23",
															"statements": [
																{
																	"nativeSrc": "4966:15:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4966:15:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4980:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4980:1:23",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4970:6:23",
																			"nodeType": "YulTypedName",
																			"src": "4970:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4995:63:23",
																	"nodeType": "YulAssignment",
																	"src": "4995:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5030:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "5030:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5041:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "5041:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5026:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "5026:3:23"
																				},
																				"nativeSrc": "5026:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "5026:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5050:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "5050:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5005:20:23",
																			"nodeType": "YulIdentifier",
																			"src": "5005:20:23"
																		},
																		"nativeSrc": "5005:53:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5005:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4995:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "4995:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "4746:329:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4782:9:23",
														"nodeType": "YulTypedName",
														"src": "4782:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4793:7:23",
														"nodeType": "YulTypedName",
														"src": "4793:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4805:6:23",
														"nodeType": "YulTypedName",
														"src": "4805:6:23",
														"type": ""
													}
												],
												"src": "4746:329:23"
											},
											{
												"body": {
													"nativeSrc": "5146:53:23",
													"nodeType": "YulBlock",
													"src": "5146:53:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5163:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "5163:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5186:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "5186:5:23"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "5168:17:23",
																			"nodeType": "YulIdentifier",
																			"src": "5168:17:23"
																		},
																		"nativeSrc": "5168:24:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5168:24:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5156:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "5156:6:23"
																},
																"nativeSrc": "5156:37:23",
																"nodeType": "YulFunctionCall",
																"src": "5156:37:23"
															},
															"nativeSrc": "5156:37:23",
															"nodeType": "YulExpressionStatement",
															"src": "5156:37:23"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5081:118:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5134:5:23",
														"nodeType": "YulTypedName",
														"src": "5134:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5141:3:23",
														"nodeType": "YulTypedName",
														"src": "5141:3:23",
														"type": ""
													}
												],
												"src": "5081:118:23"
											},
											{
												"body": {
													"nativeSrc": "5303:124:23",
													"nodeType": "YulBlock",
													"src": "5303:124:23",
													"statements": [
														{
															"nativeSrc": "5313:26:23",
															"nodeType": "YulAssignment",
															"src": "5313:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5325:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "5325:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5336:2:23",
																		"nodeType": "YulLiteral",
																		"src": "5336:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5321:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "5321:3:23"
																},
																"nativeSrc": "5321:18:23",
																"nodeType": "YulFunctionCall",
																"src": "5321:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5313:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "5313:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5393:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "5393:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5406:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "5406:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5417:1:23",
																				"nodeType": "YulLiteral",
																				"src": "5417:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5402:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5402:3:23"
																		},
																		"nativeSrc": "5402:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5402:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "5349:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "5349:43:23"
																},
																"nativeSrc": "5349:71:23",
																"nodeType": "YulFunctionCall",
																"src": "5349:71:23"
															},
															"nativeSrc": "5349:71:23",
															"nodeType": "YulExpressionStatement",
															"src": "5349:71:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "5205:222:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5275:9:23",
														"nodeType": "YulTypedName",
														"src": "5275:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5287:6:23",
														"nodeType": "YulTypedName",
														"src": "5287:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5298:4:23",
														"nodeType": "YulTypedName",
														"src": "5298:4:23",
														"type": ""
													}
												],
												"src": "5205:222:23"
											},
											{
												"body": {
													"nativeSrc": "5516:391:23",
													"nodeType": "YulBlock",
													"src": "5516:391:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "5562:83:23",
																"nodeType": "YulBlock",
																"src": "5562:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5564:77:23",
																				"nodeType": "YulIdentifier",
																				"src": "5564:77:23"
																			},
																			"nativeSrc": "5564:79:23",
																			"nodeType": "YulFunctionCall",
																			"src": "5564:79:23"
																		},
																		"nativeSrc": "5564:79:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "5564:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5537:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "5537:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5546:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "5546:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5533:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5533:3:23"
																		},
																		"nativeSrc": "5533:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5533:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5558:2:23",
																		"nodeType": "YulLiteral",
																		"src": "5558:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5529:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "5529:3:23"
																},
																"nativeSrc": "5529:32:23",
																"nodeType": "YulFunctionCall",
																"src": "5529:32:23"
															},
															"nativeSrc": "5526:119:23",
															"nodeType": "YulIf",
															"src": "5526:119:23"
														},
														{
															"nativeSrc": "5655:117:23",
															"nodeType": "YulBlock",
															"src": "5655:117:23",
															"statements": [
																{
																	"nativeSrc": "5670:15:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5670:15:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5684:1:23",
																		"nodeType": "YulLiteral",
																		"src": "5684:1:23",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5674:6:23",
																			"nodeType": "YulTypedName",
																			"src": "5674:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5699:63:23",
																	"nodeType": "YulAssignment",
																	"src": "5699:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5734:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "5734:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5745:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "5745:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5730:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "5730:3:23"
																				},
																				"nativeSrc": "5730:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "5730:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5754:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "5754:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5709:20:23",
																			"nodeType": "YulIdentifier",
																			"src": "5709:20:23"
																		},
																		"nativeSrc": "5709:53:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5709:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5699:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "5699:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "5782:118:23",
															"nodeType": "YulBlock",
															"src": "5782:118:23",
															"statements": [
																{
																	"nativeSrc": "5797:16:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5797:16:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5811:2:23",
																		"nodeType": "YulLiteral",
																		"src": "5811:2:23",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5801:6:23",
																			"nodeType": "YulTypedName",
																			"src": "5801:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5827:63:23",
																	"nodeType": "YulAssignment",
																	"src": "5827:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5862:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "5862:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5873:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "5873:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5858:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "5858:3:23"
																				},
																				"nativeSrc": "5858:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "5858:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5882:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "5882:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5837:20:23",
																			"nodeType": "YulIdentifier",
																			"src": "5837:20:23"
																		},
																		"nativeSrc": "5837:53:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5837:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "5827:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "5827:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "5433:474:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5478:9:23",
														"nodeType": "YulTypedName",
														"src": "5478:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5489:7:23",
														"nodeType": "YulTypedName",
														"src": "5489:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5501:6:23",
														"nodeType": "YulTypedName",
														"src": "5501:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5509:6:23",
														"nodeType": "YulTypedName",
														"src": "5509:6:23",
														"type": ""
													}
												],
												"src": "5433:474:23"
											},
											{
												"body": {
													"nativeSrc": "5941:152:23",
													"nodeType": "YulBlock",
													"src": "5941:152:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5958:1:23",
																		"nodeType": "YulLiteral",
																		"src": "5958:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5961:77:23",
																		"nodeType": "YulLiteral",
																		"src": "5961:77:23",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5951:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "5951:6:23"
																},
																"nativeSrc": "5951:88:23",
																"nodeType": "YulFunctionCall",
																"src": "5951:88:23"
															},
															"nativeSrc": "5951:88:23",
															"nodeType": "YulExpressionStatement",
															"src": "5951:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6055:1:23",
																		"nodeType": "YulLiteral",
																		"src": "6055:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6058:4:23",
																		"nodeType": "YulLiteral",
																		"src": "6058:4:23",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6048:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6048:6:23"
																},
																"nativeSrc": "6048:15:23",
																"nodeType": "YulFunctionCall",
																"src": "6048:15:23"
															},
															"nativeSrc": "6048:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "6048:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6079:1:23",
																		"nodeType": "YulLiteral",
																		"src": "6079:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6082:4:23",
																		"nodeType": "YulLiteral",
																		"src": "6082:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "6072:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6072:6:23"
																},
																"nativeSrc": "6072:15:23",
																"nodeType": "YulFunctionCall",
																"src": "6072:15:23"
															},
															"nativeSrc": "6072:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "6072:15:23"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "5913:180:23",
												"nodeType": "YulFunctionDefinition",
												"src": "5913:180:23"
											},
											{
												"body": {
													"nativeSrc": "6150:269:23",
													"nodeType": "YulBlock",
													"src": "6150:269:23",
													"statements": [
														{
															"nativeSrc": "6160:22:23",
															"nodeType": "YulAssignment",
															"src": "6160:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "6174:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "6174:4:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6180:1:23",
																		"nodeType": "YulLiteral",
																		"src": "6180:1:23",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "6170:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6170:3:23"
																},
																"nativeSrc": "6170:12:23",
																"nodeType": "YulFunctionCall",
																"src": "6170:12:23"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "6160:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6160:6:23"
																}
															]
														},
														{
															"nativeSrc": "6191:38:23",
															"nodeType": "YulVariableDeclaration",
															"src": "6191:38:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "6221:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "6221:4:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6227:1:23",
																		"nodeType": "YulLiteral",
																		"src": "6227:1:23",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "6217:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6217:3:23"
																},
																"nativeSrc": "6217:12:23",
																"nodeType": "YulFunctionCall",
																"src": "6217:12:23"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "6195:18:23",
																	"nodeType": "YulTypedName",
																	"src": "6195:18:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6268:51:23",
																"nodeType": "YulBlock",
																"src": "6268:51:23",
																"statements": [
																	{
																		"nativeSrc": "6282:27:23",
																		"nodeType": "YulAssignment",
																		"src": "6282:27:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "6296:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "6296:6:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6304:4:23",
																					"nodeType": "YulLiteral",
																					"src": "6304:4:23",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "6292:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "6292:3:23"
																			},
																			"nativeSrc": "6292:17:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6292:17:23"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "6282:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "6282:6:23"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "6248:18:23",
																		"nodeType": "YulIdentifier",
																		"src": "6248:18:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "6241:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6241:6:23"
																},
																"nativeSrc": "6241:26:23",
																"nodeType": "YulFunctionCall",
																"src": "6241:26:23"
															},
															"nativeSrc": "6238:81:23",
															"nodeType": "YulIf",
															"src": "6238:81:23"
														},
														{
															"body": {
																"nativeSrc": "6371:42:23",
																"nodeType": "YulBlock",
																"src": "6371:42:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "6385:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "6385:16:23"
																			},
																			"nativeSrc": "6385:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6385:18:23"
																		},
																		"nativeSrc": "6385:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "6385:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "6335:18:23",
																		"nodeType": "YulIdentifier",
																		"src": "6335:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "6358:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "6358:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6366:2:23",
																				"nodeType": "YulLiteral",
																				"src": "6366:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "6355:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "6355:2:23"
																		},
																		"nativeSrc": "6355:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "6355:14:23"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "6332:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "6332:2:23"
																},
																"nativeSrc": "6332:38:23",
																"nodeType": "YulFunctionCall",
																"src": "6332:38:23"
															},
															"nativeSrc": "6329:84:23",
															"nodeType": "YulIf",
															"src": "6329:84:23"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "6099:320:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "6134:4:23",
														"nodeType": "YulTypedName",
														"src": "6134:4:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "6143:6:23",
														"nodeType": "YulTypedName",
														"src": "6143:6:23",
														"type": ""
													}
												],
												"src": "6099:320:23"
											},
											{
												"body": {
													"nativeSrc": "6531:66:23",
													"nodeType": "YulBlock",
													"src": "6531:66:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "6553:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "6553:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6561:1:23",
																				"nodeType": "YulLiteral",
																				"src": "6561:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6549:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "6549:3:23"
																		},
																		"nativeSrc": "6549:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "6549:14:23"
																	},
																	{
																		"hexValue": "5465616d20746f6b656e7320617265206c6f636b6564",
																		"kind": "string",
																		"nativeSrc": "6565:24:23",
																		"nodeType": "YulLiteral",
																		"src": "6565:24:23",
																		"type": "",
																		"value": "Team tokens are locked"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6542:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6542:6:23"
																},
																"nativeSrc": "6542:48:23",
																"nodeType": "YulFunctionCall",
																"src": "6542:48:23"
															},
															"nativeSrc": "6542:48:23",
															"nodeType": "YulExpressionStatement",
															"src": "6542:48:23"
														}
													]
												},
												"name": "store_literal_in_memory_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf",
												"nativeSrc": "6425:172:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "6523:6:23",
														"nodeType": "YulTypedName",
														"src": "6523:6:23",
														"type": ""
													}
												],
												"src": "6425:172:23"
											},
											{
												"body": {
													"nativeSrc": "6749:220:23",
													"nodeType": "YulBlock",
													"src": "6749:220:23",
													"statements": [
														{
															"nativeSrc": "6759:74:23",
															"nodeType": "YulAssignment",
															"src": "6759:74:23",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6825:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "6825:3:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6830:2:23",
																		"nodeType": "YulLiteral",
																		"src": "6830:2:23",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "6766:58:23",
																	"nodeType": "YulIdentifier",
																	"src": "6766:58:23"
																},
																"nativeSrc": "6766:67:23",
																"nodeType": "YulFunctionCall",
																"src": "6766:67:23"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "6759:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6759:3:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6931:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "6931:3:23"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf",
																	"nativeSrc": "6842:88:23",
																	"nodeType": "YulIdentifier",
																	"src": "6842:88:23"
																},
																"nativeSrc": "6842:93:23",
																"nodeType": "YulFunctionCall",
																"src": "6842:93:23"
															},
															"nativeSrc": "6842:93:23",
															"nodeType": "YulExpressionStatement",
															"src": "6842:93:23"
														},
														{
															"nativeSrc": "6944:19:23",
															"nodeType": "YulAssignment",
															"src": "6944:19:23",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6955:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "6955:3:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6960:2:23",
																		"nodeType": "YulLiteral",
																		"src": "6960:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6951:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6951:3:23"
																},
																"nativeSrc": "6951:12:23",
																"nodeType": "YulFunctionCall",
																"src": "6951:12:23"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "6944:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6944:3:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "6603:366:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6737:3:23",
														"nodeType": "YulTypedName",
														"src": "6737:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "6745:3:23",
														"nodeType": "YulTypedName",
														"src": "6745:3:23",
														"type": ""
													}
												],
												"src": "6603:366:23"
											},
											{
												"body": {
													"nativeSrc": "7146:248:23",
													"nodeType": "YulBlock",
													"src": "7146:248:23",
													"statements": [
														{
															"nativeSrc": "7156:26:23",
															"nodeType": "YulAssignment",
															"src": "7156:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7168:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "7168:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7179:2:23",
																		"nodeType": "YulLiteral",
																		"src": "7179:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7164:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "7164:3:23"
																},
																"nativeSrc": "7164:18:23",
																"nodeType": "YulFunctionCall",
																"src": "7164:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7156:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "7156:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7203:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7203:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7214:1:23",
																				"nodeType": "YulLiteral",
																				"src": "7214:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7199:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7199:3:23"
																		},
																		"nativeSrc": "7199:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7199:17:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "7222:4:23",
																				"nodeType": "YulIdentifier",
																				"src": "7222:4:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7228:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7228:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7218:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7218:3:23"
																		},
																		"nativeSrc": "7218:20:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7218:20:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7192:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7192:6:23"
																},
																"nativeSrc": "7192:47:23",
																"nodeType": "YulFunctionCall",
																"src": "7192:47:23"
															},
															"nativeSrc": "7192:47:23",
															"nodeType": "YulExpressionStatement",
															"src": "7192:47:23"
														},
														{
															"nativeSrc": "7248:139:23",
															"nodeType": "YulAssignment",
															"src": "7248:139:23",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "7382:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "7382:4:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "7256:124:23",
																	"nodeType": "YulIdentifier",
																	"src": "7256:124:23"
																},
																"nativeSrc": "7256:131:23",
																"nodeType": "YulFunctionCall",
																"src": "7256:131:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7248:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "7248:4:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "6975:419:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7126:9:23",
														"nodeType": "YulTypedName",
														"src": "7126:9:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7141:4:23",
														"nodeType": "YulTypedName",
														"src": "7141:4:23",
														"type": ""
													}
												],
												"src": "6975:419:23"
											},
											{
												"body": {
													"nativeSrc": "7443:79:23",
													"nodeType": "YulBlock",
													"src": "7443:79:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "7500:16:23",
																"nodeType": "YulBlock",
																"src": "7500:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7509:1:23",
																					"nodeType": "YulLiteral",
																					"src": "7509:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7512:1:23",
																					"nodeType": "YulLiteral",
																					"src": "7512:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "7502:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "7502:6:23"
																			},
																			"nativeSrc": "7502:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "7502:12:23"
																		},
																		"nativeSrc": "7502:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "7502:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7466:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "7466:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "7491:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "7491:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nativeSrc": "7473:17:23",
																					"nodeType": "YulIdentifier",
																					"src": "7473:17:23"
																				},
																				"nativeSrc": "7473:24:23",
																				"nodeType": "YulFunctionCall",
																				"src": "7473:24:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "7463:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "7463:2:23"
																		},
																		"nativeSrc": "7463:35:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7463:35:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "7456:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7456:6:23"
																},
																"nativeSrc": "7456:43:23",
																"nodeType": "YulFunctionCall",
																"src": "7456:43:23"
															},
															"nativeSrc": "7453:63:23",
															"nodeType": "YulIf",
															"src": "7453:63:23"
														}
													]
												},
												"name": "validator_revert_t_uint160",
												"nativeSrc": "7400:122:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7436:5:23",
														"nodeType": "YulTypedName",
														"src": "7436:5:23",
														"type": ""
													}
												],
												"src": "7400:122:23"
											},
											{
												"body": {
													"nativeSrc": "7591:80:23",
													"nodeType": "YulBlock",
													"src": "7591:80:23",
													"statements": [
														{
															"nativeSrc": "7601:22:23",
															"nodeType": "YulAssignment",
															"src": "7601:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "7616:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "7616:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7610:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "7610:5:23"
																},
																"nativeSrc": "7610:13:23",
																"nodeType": "YulFunctionCall",
																"src": "7610:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "7601:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "7601:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7659:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "7659:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint160",
																	"nativeSrc": "7632:26:23",
																	"nodeType": "YulIdentifier",
																	"src": "7632:26:23"
																},
																"nativeSrc": "7632:33:23",
																"nodeType": "YulFunctionCall",
																"src": "7632:33:23"
															},
															"nativeSrc": "7632:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "7632:33:23"
														}
													]
												},
												"name": "abi_decode_t_uint160_fromMemory",
												"nativeSrc": "7528:143:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "7569:6:23",
														"nodeType": "YulTypedName",
														"src": "7569:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "7577:3:23",
														"nodeType": "YulTypedName",
														"src": "7577:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "7585:5:23",
														"nodeType": "YulTypedName",
														"src": "7585:5:23",
														"type": ""
													}
												],
												"src": "7528:143:23"
											},
											{
												"body": {
													"nativeSrc": "7720:47:23",
													"nodeType": "YulBlock",
													"src": "7720:47:23",
													"statements": [
														{
															"nativeSrc": "7730:31:23",
															"nodeType": "YulAssignment",
															"src": "7730:31:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "7752:1:23",
																		"nodeType": "YulLiteral",
																		"src": "7752:1:23",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "7755:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "7755:5:23"
																	}
																],
																"functionName": {
																	"name": "signextend",
																	"nativeSrc": "7741:10:23",
																	"nodeType": "YulIdentifier",
																	"src": "7741:10:23"
																},
																"nativeSrc": "7741:20:23",
																"nodeType": "YulFunctionCall",
																"src": "7741:20:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "7730:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "7730:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_int24",
												"nativeSrc": "7677:90:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7702:5:23",
														"nodeType": "YulTypedName",
														"src": "7702:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "7712:7:23",
														"nodeType": "YulTypedName",
														"src": "7712:7:23",
														"type": ""
													}
												],
												"src": "7677:90:23"
											},
											{
												"body": {
													"nativeSrc": "7814:77:23",
													"nodeType": "YulBlock",
													"src": "7814:77:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "7869:16:23",
																"nodeType": "YulBlock",
																"src": "7869:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7878:1:23",
																					"nodeType": "YulLiteral",
																					"src": "7878:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7881:1:23",
																					"nodeType": "YulLiteral",
																					"src": "7881:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "7871:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "7871:6:23"
																			},
																			"nativeSrc": "7871:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "7871:12:23"
																		},
																		"nativeSrc": "7871:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "7871:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7837:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "7837:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "7860:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "7860:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_int24",
																					"nativeSrc": "7844:15:23",
																					"nodeType": "YulIdentifier",
																					"src": "7844:15:23"
																				},
																				"nativeSrc": "7844:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "7844:22:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "7834:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "7834:2:23"
																		},
																		"nativeSrc": "7834:33:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7834:33:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "7827:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7827:6:23"
																},
																"nativeSrc": "7827:41:23",
																"nodeType": "YulFunctionCall",
																"src": "7827:41:23"
															},
															"nativeSrc": "7824:61:23",
															"nodeType": "YulIf",
															"src": "7824:61:23"
														}
													]
												},
												"name": "validator_revert_t_int24",
												"nativeSrc": "7773:118:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7807:5:23",
														"nodeType": "YulTypedName",
														"src": "7807:5:23",
														"type": ""
													}
												],
												"src": "7773:118:23"
											},
											{
												"body": {
													"nativeSrc": "7958:78:23",
													"nodeType": "YulBlock",
													"src": "7958:78:23",
													"statements": [
														{
															"nativeSrc": "7968:22:23",
															"nodeType": "YulAssignment",
															"src": "7968:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "7983:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "7983:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7977:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "7977:5:23"
																},
																"nativeSrc": "7977:13:23",
																"nodeType": "YulFunctionCall",
																"src": "7977:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "7968:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "7968:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8024:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "8024:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_int24",
																	"nativeSrc": "7999:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "7999:24:23"
																},
																"nativeSrc": "7999:31:23",
																"nodeType": "YulFunctionCall",
																"src": "7999:31:23"
															},
															"nativeSrc": "7999:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "7999:31:23"
														}
													]
												},
												"name": "abi_decode_t_int24_fromMemory",
												"nativeSrc": "7897:139:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "7936:6:23",
														"nodeType": "YulTypedName",
														"src": "7936:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "7944:3:23",
														"nodeType": "YulTypedName",
														"src": "7944:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "7952:5:23",
														"nodeType": "YulTypedName",
														"src": "7952:5:23",
														"type": ""
													}
												],
												"src": "7897:139:23"
											},
											{
												"body": {
													"nativeSrc": "8086:45:23",
													"nodeType": "YulBlock",
													"src": "8086:45:23",
													"statements": [
														{
															"nativeSrc": "8096:29:23",
															"nodeType": "YulAssignment",
															"src": "8096:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8111:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "8111:5:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8118:6:23",
																		"nodeType": "YulLiteral",
																		"src": "8118:6:23",
																		"type": "",
																		"value": "0xffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "8107:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "8107:3:23"
																},
																"nativeSrc": "8107:18:23",
																"nodeType": "YulFunctionCall",
																"src": "8107:18:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "8096:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "8096:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint16",
												"nativeSrc": "8042:89:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8068:5:23",
														"nodeType": "YulTypedName",
														"src": "8068:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "8078:7:23",
														"nodeType": "YulTypedName",
														"src": "8078:7:23",
														"type": ""
													}
												],
												"src": "8042:89:23"
											},
											{
												"body": {
													"nativeSrc": "8179:78:23",
													"nodeType": "YulBlock",
													"src": "8179:78:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "8235:16:23",
																"nodeType": "YulBlock",
																"src": "8235:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8244:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8244:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8247:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8247:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8237:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "8237:6:23"
																			},
																			"nativeSrc": "8237:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "8237:12:23"
																		},
																		"nativeSrc": "8237:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "8237:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "8202:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "8202:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "8226:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "8226:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint16",
																					"nativeSrc": "8209:16:23",
																					"nodeType": "YulIdentifier",
																					"src": "8209:16:23"
																				},
																				"nativeSrc": "8209:23:23",
																				"nodeType": "YulFunctionCall",
																				"src": "8209:23:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "8199:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "8199:2:23"
																		},
																		"nativeSrc": "8199:34:23",
																		"nodeType": "YulFunctionCall",
																		"src": "8199:34:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8192:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8192:6:23"
																},
																"nativeSrc": "8192:42:23",
																"nodeType": "YulFunctionCall",
																"src": "8192:42:23"
															},
															"nativeSrc": "8189:62:23",
															"nodeType": "YulIf",
															"src": "8189:62:23"
														}
													]
												},
												"name": "validator_revert_t_uint16",
												"nativeSrc": "8137:120:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8172:5:23",
														"nodeType": "YulTypedName",
														"src": "8172:5:23",
														"type": ""
													}
												],
												"src": "8137:120:23"
											},
											{
												"body": {
													"nativeSrc": "8325:79:23",
													"nodeType": "YulBlock",
													"src": "8325:79:23",
													"statements": [
														{
															"nativeSrc": "8335:22:23",
															"nodeType": "YulAssignment",
															"src": "8335:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "8350:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "8350:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8344:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "8344:5:23"
																},
																"nativeSrc": "8344:13:23",
																"nodeType": "YulFunctionCall",
																"src": "8344:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "8335:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "8335:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8392:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "8392:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint16",
																	"nativeSrc": "8366:25:23",
																	"nodeType": "YulIdentifier",
																	"src": "8366:25:23"
																},
																"nativeSrc": "8366:32:23",
																"nodeType": "YulFunctionCall",
																"src": "8366:32:23"
															},
															"nativeSrc": "8366:32:23",
															"nodeType": "YulExpressionStatement",
															"src": "8366:32:23"
														}
													]
												},
												"name": "abi_decode_t_uint16_fromMemory",
												"nativeSrc": "8263:141:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "8303:6:23",
														"nodeType": "YulTypedName",
														"src": "8303:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "8311:3:23",
														"nodeType": "YulTypedName",
														"src": "8311:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "8319:5:23",
														"nodeType": "YulTypedName",
														"src": "8319:5:23",
														"type": ""
													}
												],
												"src": "8263:141:23"
											},
											{
												"body": {
													"nativeSrc": "8451:77:23",
													"nodeType": "YulBlock",
													"src": "8451:77:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "8506:16:23",
																"nodeType": "YulBlock",
																"src": "8506:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8515:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8515:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8518:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8518:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8508:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "8508:6:23"
																			},
																			"nativeSrc": "8508:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "8508:12:23"
																		},
																		"nativeSrc": "8508:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "8508:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "8474:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "8474:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "8497:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "8497:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint8",
																					"nativeSrc": "8481:15:23",
																					"nodeType": "YulIdentifier",
																					"src": "8481:15:23"
																				},
																				"nativeSrc": "8481:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "8481:22:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "8471:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "8471:2:23"
																		},
																		"nativeSrc": "8471:33:23",
																		"nodeType": "YulFunctionCall",
																		"src": "8471:33:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8464:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8464:6:23"
																},
																"nativeSrc": "8464:41:23",
																"nodeType": "YulFunctionCall",
																"src": "8464:41:23"
															},
															"nativeSrc": "8461:61:23",
															"nodeType": "YulIf",
															"src": "8461:61:23"
														}
													]
												},
												"name": "validator_revert_t_uint8",
												"nativeSrc": "8410:118:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8444:5:23",
														"nodeType": "YulTypedName",
														"src": "8444:5:23",
														"type": ""
													}
												],
												"src": "8410:118:23"
											},
											{
												"body": {
													"nativeSrc": "8595:78:23",
													"nodeType": "YulBlock",
													"src": "8595:78:23",
													"statements": [
														{
															"nativeSrc": "8605:22:23",
															"nodeType": "YulAssignment",
															"src": "8605:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "8620:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "8620:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8614:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "8614:5:23"
																},
																"nativeSrc": "8614:13:23",
																"nodeType": "YulFunctionCall",
																"src": "8614:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "8605:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "8605:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8661:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "8661:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint8",
																	"nativeSrc": "8636:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "8636:24:23"
																},
																"nativeSrc": "8636:31:23",
																"nodeType": "YulFunctionCall",
																"src": "8636:31:23"
															},
															"nativeSrc": "8636:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "8636:31:23"
														}
													]
												},
												"name": "abi_decode_t_uint8_fromMemory",
												"nativeSrc": "8534:139:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "8573:6:23",
														"nodeType": "YulTypedName",
														"src": "8573:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "8581:3:23",
														"nodeType": "YulTypedName",
														"src": "8581:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "8589:5:23",
														"nodeType": "YulTypedName",
														"src": "8589:5:23",
														"type": ""
													}
												],
												"src": "8534:139:23"
											},
											{
												"body": {
													"nativeSrc": "8719:76:23",
													"nodeType": "YulBlock",
													"src": "8719:76:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "8773:16:23",
																"nodeType": "YulBlock",
																"src": "8773:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8782:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8782:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8785:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8785:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8775:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "8775:6:23"
																			},
																			"nativeSrc": "8775:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "8775:12:23"
																		},
																		"nativeSrc": "8775:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "8775:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "8742:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "8742:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "8764:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "8764:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nativeSrc": "8749:14:23",
																					"nodeType": "YulIdentifier",
																					"src": "8749:14:23"
																				},
																				"nativeSrc": "8749:21:23",
																				"nodeType": "YulFunctionCall",
																				"src": "8749:21:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "8739:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "8739:2:23"
																		},
																		"nativeSrc": "8739:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "8739:32:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8732:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8732:6:23"
																},
																"nativeSrc": "8732:40:23",
																"nodeType": "YulFunctionCall",
																"src": "8732:40:23"
															},
															"nativeSrc": "8729:60:23",
															"nodeType": "YulIf",
															"src": "8729:60:23"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nativeSrc": "8679:116:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8712:5:23",
														"nodeType": "YulTypedName",
														"src": "8712:5:23",
														"type": ""
													}
												],
												"src": "8679:116:23"
											},
											{
												"body": {
													"nativeSrc": "8861:77:23",
													"nodeType": "YulBlock",
													"src": "8861:77:23",
													"statements": [
														{
															"nativeSrc": "8871:22:23",
															"nodeType": "YulAssignment",
															"src": "8871:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "8886:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "8886:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8880:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "8880:5:23"
																},
																"nativeSrc": "8880:13:23",
																"nodeType": "YulFunctionCall",
																"src": "8880:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "8871:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "8871:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8926:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "8926:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nativeSrc": "8902:23:23",
																	"nodeType": "YulIdentifier",
																	"src": "8902:23:23"
																},
																"nativeSrc": "8902:30:23",
																"nodeType": "YulFunctionCall",
																"src": "8902:30:23"
															},
															"nativeSrc": "8902:30:23",
															"nodeType": "YulExpressionStatement",
															"src": "8902:30:23"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nativeSrc": "8801:137:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "8839:6:23",
														"nodeType": "YulTypedName",
														"src": "8839:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "8847:3:23",
														"nodeType": "YulTypedName",
														"src": "8847:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "8855:5:23",
														"nodeType": "YulTypedName",
														"src": "8855:5:23",
														"type": ""
													}
												],
												"src": "8801:137:23"
											},
											{
												"body": {
													"nativeSrc": "9113:1102:23",
													"nodeType": "YulBlock",
													"src": "9113:1102:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "9160:83:23",
																"nodeType": "YulBlock",
																"src": "9160:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "9162:77:23",
																				"nodeType": "YulIdentifier",
																				"src": "9162:77:23"
																			},
																			"nativeSrc": "9162:79:23",
																			"nodeType": "YulFunctionCall",
																			"src": "9162:79:23"
																		},
																		"nativeSrc": "9162:79:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "9162:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "9134:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "9134:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "9143:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9143:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "9130:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9130:3:23"
																		},
																		"nativeSrc": "9130:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9130:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9155:3:23",
																		"nodeType": "YulLiteral",
																		"src": "9155:3:23",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "9126:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "9126:3:23"
																},
																"nativeSrc": "9126:33:23",
																"nodeType": "YulFunctionCall",
																"src": "9126:33:23"
															},
															"nativeSrc": "9123:120:23",
															"nodeType": "YulIf",
															"src": "9123:120:23"
														},
														{
															"nativeSrc": "9253:128:23",
															"nodeType": "YulBlock",
															"src": "9253:128:23",
															"statements": [
																{
																	"nativeSrc": "9268:15:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "9268:15:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "9282:1:23",
																		"nodeType": "YulLiteral",
																		"src": "9282:1:23",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "9272:6:23",
																			"nodeType": "YulTypedName",
																			"src": "9272:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "9297:74:23",
																	"nodeType": "YulAssignment",
																	"src": "9297:74:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "9343:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "9343:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "9354:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "9354:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "9339:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9339:3:23"
																				},
																				"nativeSrc": "9339:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9339:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "9363:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "9363:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint160_fromMemory",
																			"nativeSrc": "9307:31:23",
																			"nodeType": "YulIdentifier",
																			"src": "9307:31:23"
																		},
																		"nativeSrc": "9307:64:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9307:64:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "9297:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "9297:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "9391:127:23",
															"nodeType": "YulBlock",
															"src": "9391:127:23",
															"statements": [
																{
																	"nativeSrc": "9406:16:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "9406:16:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "9420:2:23",
																		"nodeType": "YulLiteral",
																		"src": "9420:2:23",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "9410:6:23",
																			"nodeType": "YulTypedName",
																			"src": "9410:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "9436:72:23",
																	"nodeType": "YulAssignment",
																	"src": "9436:72:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "9480:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "9480:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "9491:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "9491:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "9476:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9476:3:23"
																				},
																				"nativeSrc": "9476:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9476:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "9500:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "9500:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_int24_fromMemory",
																			"nativeSrc": "9446:29:23",
																			"nodeType": "YulIdentifier",
																			"src": "9446:29:23"
																		},
																		"nativeSrc": "9446:62:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9446:62:23"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "9436:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "9436:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "9528:128:23",
															"nodeType": "YulBlock",
															"src": "9528:128:23",
															"statements": [
																{
																	"nativeSrc": "9543:16:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "9543:16:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "9557:2:23",
																		"nodeType": "YulLiteral",
																		"src": "9557:2:23",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "9547:6:23",
																			"nodeType": "YulTypedName",
																			"src": "9547:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "9573:73:23",
																	"nodeType": "YulAssignment",
																	"src": "9573:73:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "9618:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "9618:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "9629:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "9629:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "9614:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9614:3:23"
																				},
																				"nativeSrc": "9614:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9614:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "9638:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "9638:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16_fromMemory",
																			"nativeSrc": "9583:30:23",
																			"nodeType": "YulIdentifier",
																			"src": "9583:30:23"
																		},
																		"nativeSrc": "9583:63:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9583:63:23"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "9573:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "9573:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "9666:128:23",
															"nodeType": "YulBlock",
															"src": "9666:128:23",
															"statements": [
																{
																	"nativeSrc": "9681:16:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "9681:16:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "9695:2:23",
																		"nodeType": "YulLiteral",
																		"src": "9695:2:23",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "9685:6:23",
																			"nodeType": "YulTypedName",
																			"src": "9685:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "9711:73:23",
																	"nodeType": "YulAssignment",
																	"src": "9711:73:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "9756:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "9756:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "9767:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "9767:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "9752:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9752:3:23"
																				},
																				"nativeSrc": "9752:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9752:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "9776:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "9776:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16_fromMemory",
																			"nativeSrc": "9721:30:23",
																			"nodeType": "YulIdentifier",
																			"src": "9721:30:23"
																		},
																		"nativeSrc": "9721:63:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9721:63:23"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nativeSrc": "9711:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "9711:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "9804:129:23",
															"nodeType": "YulBlock",
															"src": "9804:129:23",
															"statements": [
																{
																	"nativeSrc": "9819:17:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "9819:17:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "9833:3:23",
																		"nodeType": "YulLiteral",
																		"src": "9833:3:23",
																		"type": "",
																		"value": "128"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "9823:6:23",
																			"nodeType": "YulTypedName",
																			"src": "9823:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "9850:73:23",
																	"nodeType": "YulAssignment",
																	"src": "9850:73:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "9895:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "9895:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "9906:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "9906:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "9891:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9891:3:23"
																				},
																				"nativeSrc": "9891:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9891:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "9915:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "9915:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint16_fromMemory",
																			"nativeSrc": "9860:30:23",
																			"nodeType": "YulIdentifier",
																			"src": "9860:30:23"
																		},
																		"nativeSrc": "9860:63:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9860:63:23"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nativeSrc": "9850:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "9850:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "9943:128:23",
															"nodeType": "YulBlock",
															"src": "9943:128:23",
															"statements": [
																{
																	"nativeSrc": "9958:17:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "9958:17:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "9972:3:23",
																		"nodeType": "YulLiteral",
																		"src": "9972:3:23",
																		"type": "",
																		"value": "160"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "9962:6:23",
																			"nodeType": "YulTypedName",
																			"src": "9962:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "9989:72:23",
																	"nodeType": "YulAssignment",
																	"src": "9989:72:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10033:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "10033:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10044:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "10044:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10029:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "10029:3:23"
																				},
																				"nativeSrc": "10029:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "10029:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10053:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "10053:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint8_fromMemory",
																			"nativeSrc": "9999:29:23",
																			"nodeType": "YulIdentifier",
																			"src": "9999:29:23"
																		},
																		"nativeSrc": "9999:62:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9999:62:23"
																	},
																	"variableNames": [
																		{
																			"name": "value5",
																			"nativeSrc": "9989:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "9989:6:23"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10081:127:23",
															"nodeType": "YulBlock",
															"src": "10081:127:23",
															"statements": [
																{
																	"nativeSrc": "10096:17:23",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10096:17:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10110:3:23",
																		"nodeType": "YulLiteral",
																		"src": "10110:3:23",
																		"type": "",
																		"value": "192"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10100:6:23",
																			"nodeType": "YulTypedName",
																			"src": "10100:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10127:71:23",
																	"nodeType": "YulAssignment",
																	"src": "10127:71:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10170:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "10170:9:23"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10181:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "10181:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10166:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "10166:3:23"
																				},
																				"nativeSrc": "10166:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "10166:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10190:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "10190:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nativeSrc": "10137:28:23",
																			"nodeType": "YulIdentifier",
																			"src": "10137:28:23"
																		},
																		"nativeSrc": "10137:61:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10137:61:23"
																	},
																	"variableNames": [
																		{
																			"name": "value6",
																			"nativeSrc": "10127:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "10127:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory",
												"nativeSrc": "8944:1271:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9035:9:23",
														"nodeType": "YulTypedName",
														"src": "9035:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "9046:7:23",
														"nodeType": "YulTypedName",
														"src": "9046:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "9058:6:23",
														"nodeType": "YulTypedName",
														"src": "9058:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9066:6:23",
														"nodeType": "YulTypedName",
														"src": "9066:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "9074:6:23",
														"nodeType": "YulTypedName",
														"src": "9074:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "9082:6:23",
														"nodeType": "YulTypedName",
														"src": "9082:6:23",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "9090:6:23",
														"nodeType": "YulTypedName",
														"src": "9090:6:23",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "9098:6:23",
														"nodeType": "YulTypedName",
														"src": "9098:6:23",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "9106:6:23",
														"nodeType": "YulTypedName",
														"src": "9106:6:23",
														"type": ""
													}
												],
												"src": "8944:1271:23"
											},
											{
												"body": {
													"nativeSrc": "10249:152:23",
													"nodeType": "YulBlock",
													"src": "10249:152:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10266:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10266:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10269:77:23",
																		"nodeType": "YulLiteral",
																		"src": "10269:77:23",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10259:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10259:6:23"
																},
																"nativeSrc": "10259:88:23",
																"nodeType": "YulFunctionCall",
																"src": "10259:88:23"
															},
															"nativeSrc": "10259:88:23",
															"nodeType": "YulExpressionStatement",
															"src": "10259:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10363:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10363:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10366:4:23",
																		"nodeType": "YulLiteral",
																		"src": "10366:4:23",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10356:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10356:6:23"
																},
																"nativeSrc": "10356:15:23",
																"nodeType": "YulFunctionCall",
																"src": "10356:15:23"
															},
															"nativeSrc": "10356:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "10356:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10387:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10387:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10390:4:23",
																		"nodeType": "YulLiteral",
																		"src": "10390:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "10380:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10380:6:23"
																},
																"nativeSrc": "10380:15:23",
																"nodeType": "YulFunctionCall",
																"src": "10380:15:23"
															},
															"nativeSrc": "10380:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "10380:15:23"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "10221:180:23",
												"nodeType": "YulFunctionDefinition",
												"src": "10221:180:23"
											},
											{
												"body": {
													"nativeSrc": "10455:362:23",
													"nodeType": "YulBlock",
													"src": "10455:362:23",
													"statements": [
														{
															"nativeSrc": "10465:25:23",
															"nodeType": "YulAssignment",
															"src": "10465:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "10488:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "10488:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "10470:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "10470:17:23"
																},
																"nativeSrc": "10470:20:23",
																"nodeType": "YulFunctionCall",
																"src": "10470:20:23"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "10465:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "10465:1:23"
																}
															]
														},
														{
															"nativeSrc": "10499:25:23",
															"nodeType": "YulAssignment",
															"src": "10499:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "10522:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "10522:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "10504:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "10504:17:23"
																},
																"nativeSrc": "10504:20:23",
																"nodeType": "YulFunctionCall",
																"src": "10504:20:23"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "10499:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "10499:1:23"
																}
															]
														},
														{
															"nativeSrc": "10533:28:23",
															"nodeType": "YulVariableDeclaration",
															"src": "10533:28:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "10556:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "10556:1:23"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "10559:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "10559:1:23"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "10552:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "10552:3:23"
																},
																"nativeSrc": "10552:9:23",
																"nodeType": "YulFunctionCall",
																"src": "10552:9:23"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nativeSrc": "10537:11:23",
																	"nodeType": "YulTypedName",
																	"src": "10537:11:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "10570:41:23",
															"nodeType": "YulAssignment",
															"src": "10570:41:23",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nativeSrc": "10599:11:23",
																		"nodeType": "YulIdentifier",
																		"src": "10599:11:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "10581:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "10581:17:23"
																},
																"nativeSrc": "10581:30:23",
																"nodeType": "YulFunctionCall",
																"src": "10581:30:23"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "10570:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "10570:7:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "10788:22:23",
																"nodeType": "YulBlock",
																"src": "10788:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "10790:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "10790:16:23"
																			},
																			"nativeSrc": "10790:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "10790:18:23"
																		},
																		"nativeSrc": "10790:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "10790:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "10721:1:23",
																						"nodeType": "YulIdentifier",
																						"src": "10721:1:23"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "10714:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "10714:6:23"
																				},
																				"nativeSrc": "10714:9:23",
																				"nodeType": "YulFunctionCall",
																				"src": "10714:9:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "10744:1:23",
																						"nodeType": "YulIdentifier",
																						"src": "10744:1:23"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "10751:7:23",
																								"nodeType": "YulIdentifier",
																								"src": "10751:7:23"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "10760:1:23",
																								"nodeType": "YulIdentifier",
																								"src": "10760:1:23"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "10747:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "10747:3:23"
																						},
																						"nativeSrc": "10747:15:23",
																						"nodeType": "YulFunctionCall",
																						"src": "10747:15:23"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "10741:2:23",
																					"nodeType": "YulIdentifier",
																					"src": "10741:2:23"
																				},
																				"nativeSrc": "10741:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "10741:22:23"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "10694:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "10694:2:23"
																		},
																		"nativeSrc": "10694:83:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10694:83:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "10674:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10674:6:23"
																},
																"nativeSrc": "10674:113:23",
																"nodeType": "YulFunctionCall",
																"src": "10674:113:23"
															},
															"nativeSrc": "10671:139:23",
															"nodeType": "YulIf",
															"src": "10671:139:23"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "10407:410:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "10438:1:23",
														"nodeType": "YulTypedName",
														"src": "10438:1:23",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "10441:1:23",
														"nodeType": "YulTypedName",
														"src": "10441:1:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "10447:7:23",
														"nodeType": "YulTypedName",
														"src": "10447:7:23",
														"type": ""
													}
												],
												"src": "10407:410:23"
											},
											{
												"body": {
													"nativeSrc": "10851:152:23",
													"nodeType": "YulBlock",
													"src": "10851:152:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10868:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10868:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10871:77:23",
																		"nodeType": "YulLiteral",
																		"src": "10871:77:23",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10861:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10861:6:23"
																},
																"nativeSrc": "10861:88:23",
																"nodeType": "YulFunctionCall",
																"src": "10861:88:23"
															},
															"nativeSrc": "10861:88:23",
															"nodeType": "YulExpressionStatement",
															"src": "10861:88:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10965:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10965:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10968:4:23",
																		"nodeType": "YulLiteral",
																		"src": "10968:4:23",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10958:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10958:6:23"
																},
																"nativeSrc": "10958:15:23",
																"nodeType": "YulFunctionCall",
																"src": "10958:15:23"
															},
															"nativeSrc": "10958:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "10958:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10989:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10989:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10992:4:23",
																		"nodeType": "YulLiteral",
																		"src": "10992:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "10982:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10982:6:23"
																},
																"nativeSrc": "10982:15:23",
																"nodeType": "YulFunctionCall",
																"src": "10982:15:23"
															},
															"nativeSrc": "10982:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "10982:15:23"
														}
													]
												},
												"name": "panic_error_0x12",
												"nativeSrc": "10823:180:23",
												"nodeType": "YulFunctionDefinition",
												"src": "10823:180:23"
											},
											{
												"body": {
													"nativeSrc": "11051:143:23",
													"nodeType": "YulBlock",
													"src": "11051:143:23",
													"statements": [
														{
															"nativeSrc": "11061:25:23",
															"nodeType": "YulAssignment",
															"src": "11061:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11084:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11084:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11066:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "11066:17:23"
																},
																"nativeSrc": "11066:20:23",
																"nodeType": "YulFunctionCall",
																"src": "11066:20:23"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "11061:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11061:1:23"
																}
															]
														},
														{
															"nativeSrc": "11095:25:23",
															"nodeType": "YulAssignment",
															"src": "11095:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "11118:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11118:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11100:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "11100:17:23"
																},
																"nativeSrc": "11100:20:23",
																"nodeType": "YulFunctionCall",
																"src": "11100:20:23"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "11095:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11095:1:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "11142:22:23",
																"nodeType": "YulBlock",
																"src": "11142:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nativeSrc": "11144:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "11144:16:23"
																			},
																			"nativeSrc": "11144:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "11144:18:23"
																		},
																		"nativeSrc": "11144:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "11144:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "11139:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11139:1:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "11132:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "11132:6:23"
																},
																"nativeSrc": "11132:9:23",
																"nodeType": "YulFunctionCall",
																"src": "11132:9:23"
															},
															"nativeSrc": "11129:35:23",
															"nodeType": "YulIf",
															"src": "11129:35:23"
														},
														{
															"nativeSrc": "11174:14:23",
															"nodeType": "YulAssignment",
															"src": "11174:14:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11183:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11183:1:23"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "11186:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11186:1:23"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "11179:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "11179:3:23"
																},
																"nativeSrc": "11179:9:23",
																"nodeType": "YulFunctionCall",
																"src": "11179:9:23"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "11174:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11174:1:23"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "11009:185:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "11040:1:23",
														"nodeType": "YulTypedName",
														"src": "11040:1:23",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "11043:1:23",
														"nodeType": "YulTypedName",
														"src": "11043:1:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "11049:1:23",
														"nodeType": "YulTypedName",
														"src": "11049:1:23",
														"type": ""
													}
												],
												"src": "11009:185:23"
											},
											{
												"body": {
													"nativeSrc": "11354:288:23",
													"nodeType": "YulBlock",
													"src": "11354:288:23",
													"statements": [
														{
															"nativeSrc": "11364:26:23",
															"nodeType": "YulAssignment",
															"src": "11364:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "11376:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "11376:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11387:2:23",
																		"nodeType": "YulLiteral",
																		"src": "11387:2:23",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11372:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "11372:3:23"
																},
																"nativeSrc": "11372:18:23",
																"nodeType": "YulFunctionCall",
																"src": "11372:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11364:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "11364:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "11444:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "11444:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11457:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "11457:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11468:1:23",
																				"nodeType": "YulLiteral",
																				"src": "11468:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11453:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "11453:3:23"
																		},
																		"nativeSrc": "11453:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "11453:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "11400:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "11400:43:23"
																},
																"nativeSrc": "11400:71:23",
																"nodeType": "YulFunctionCall",
																"src": "11400:71:23"
															},
															"nativeSrc": "11400:71:23",
															"nodeType": "YulExpressionStatement",
															"src": "11400:71:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "11525:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "11525:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11538:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "11538:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11549:2:23",
																				"nodeType": "YulLiteral",
																				"src": "11549:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11534:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "11534:3:23"
																		},
																		"nativeSrc": "11534:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "11534:18:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "11481:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "11481:43:23"
																},
																"nativeSrc": "11481:72:23",
																"nodeType": "YulFunctionCall",
																"src": "11481:72:23"
															},
															"nativeSrc": "11481:72:23",
															"nodeType": "YulExpressionStatement",
															"src": "11481:72:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "11607:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "11607:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11620:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "11620:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11631:2:23",
																				"nodeType": "YulLiteral",
																				"src": "11631:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11616:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "11616:3:23"
																		},
																		"nativeSrc": "11616:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "11616:18:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "11563:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "11563:43:23"
																},
																"nativeSrc": "11563:72:23",
																"nodeType": "YulFunctionCall",
																"src": "11563:72:23"
															},
															"nativeSrc": "11563:72:23",
															"nodeType": "YulExpressionStatement",
															"src": "11563:72:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "11200:442:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "11310:9:23",
														"nodeType": "YulTypedName",
														"src": "11310:9:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "11322:6:23",
														"nodeType": "YulTypedName",
														"src": "11322:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "11330:6:23",
														"nodeType": "YulTypedName",
														"src": "11330:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "11338:6:23",
														"nodeType": "YulTypedName",
														"src": "11338:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "11349:4:23",
														"nodeType": "YulTypedName",
														"src": "11349:4:23",
														"type": ""
													}
												],
												"src": "11200:442:23"
											},
											{
												"body": {
													"nativeSrc": "11692:147:23",
													"nodeType": "YulBlock",
													"src": "11692:147:23",
													"statements": [
														{
															"nativeSrc": "11702:25:23",
															"nodeType": "YulAssignment",
															"src": "11702:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11725:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11725:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11707:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "11707:17:23"
																},
																"nativeSrc": "11707:20:23",
																"nodeType": "YulFunctionCall",
																"src": "11707:20:23"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "11702:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11702:1:23"
																}
															]
														},
														{
															"nativeSrc": "11736:25:23",
															"nodeType": "YulAssignment",
															"src": "11736:25:23",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "11759:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11759:1:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11741:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "11741:17:23"
																},
																"nativeSrc": "11741:20:23",
																"nodeType": "YulFunctionCall",
																"src": "11741:20:23"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "11736:1:23",
																	"nodeType": "YulIdentifier",
																	"src": "11736:1:23"
																}
															]
														},
														{
															"nativeSrc": "11770:16:23",
															"nodeType": "YulAssignment",
															"src": "11770:16:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11781:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11781:1:23"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "11784:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11784:1:23"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11777:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "11777:3:23"
																},
																"nativeSrc": "11777:9:23",
																"nodeType": "YulFunctionCall",
																"src": "11777:9:23"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "11770:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "11770:3:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "11810:22:23",
																"nodeType": "YulBlock",
																"src": "11810:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "11812:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "11812:16:23"
																			},
																			"nativeSrc": "11812:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "11812:18:23"
																		},
																		"nativeSrc": "11812:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "11812:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "11802:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "11802:1:23"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "11805:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "11805:3:23"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "11799:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "11799:2:23"
																},
																"nativeSrc": "11799:10:23",
																"nodeType": "YulFunctionCall",
																"src": "11799:10:23"
															},
															"nativeSrc": "11796:36:23",
															"nodeType": "YulIf",
															"src": "11796:36:23"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "11648:191:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "11679:1:23",
														"nodeType": "YulTypedName",
														"src": "11679:1:23",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "11682:1:23",
														"nodeType": "YulTypedName",
														"src": "11682:1:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "11688:3:23",
														"nodeType": "YulTypedName",
														"src": "11688:3:23",
														"type": ""
													}
												],
												"src": "11648:191:23"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf(memPtr) {\n\n        mstore(add(memPtr, 0), \"Team tokens are locked\")\n\n    }\n\n    function abi_encode_t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function validator_revert_t_uint160(value) {\n        if iszero(eq(value, cleanup_t_uint160(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint160_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint160(value)\n    }\n\n    function cleanup_t_int24(value) -> cleaned {\n        cleaned := signextend(2, value)\n    }\n\n    function validator_revert_t_int24(value) {\n        if iszero(eq(value, cleanup_t_int24(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int24_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int24(value)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_uint8t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint160_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_int24_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint16_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint16_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint16_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint8_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n}\n",
									"id": 23,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f5ffd5b5060043610610109575f3560e01c806376ae9b2d116100a0578063a9059cbb1161006f578063a9059cbb14610297578063bdd3d825146102c7578063dd62ed3e146102e5578063eb91d37e14610315578063f2fde38b1461033357610109565b806376ae9b2d1461021f5780638da5cb5b1461023d578063902d55a51461025b57806395d89b411461027957610109565b8063313ce567116100dc578063313ce567146101a957806335928998146101c757806370a08231146101e5578063715018a61461021557610109565b806306fdde031461010d578063095ea7b31461012b57806318160ddd1461015b57806323b872dd14610179575b5f5ffd5b61011561034f565b6040516101229190610fa2565b60405180910390f35b61014560048036038101906101409190611053565b6103df565b60405161015291906110ab565b60405180910390f35b610163610401565b60405161017091906110d3565b60405180910390f35b610193600480360381019061018e91906110ec565b61040a565b6040516101a091906110ab565b60405180910390f35b6101b1610464565b6040516101be9190611157565b60405180910390f35b6101cf61046c565b6040516101dc91906110d3565b60405180910390f35b6101ff60048036038101906101fa9190611170565b610474565b60405161020c91906110d3565b60405180910390f35b61021d6104b9565b005b6102276104cc565b60405161023491906110d3565b60405180910390f35b6102456104d2565b60405161025291906111aa565b60405180910390f35b6102636104fa565b60405161027091906110d3565b60405180910390f35b610281610502565b60405161028e9190610fa2565b60405180910390f35b6102b160048036038101906102ac9190611053565b610592565b6040516102be91906110ab565b60405180910390f35b6102cf6105ea565b6040516102dc91906111aa565b60405180910390f35b6102ff60048036038101906102fa91906111c3565b61060f565b60405161030c91906110d3565b60405180910390f35b61031d610691565b60405161032a91906110d3565b60405180910390f35b61034d60048036038101906103489190611170565b610790565b005b60606003805461035e9061122e565b80601f016020809104026020016040519081016040528092919081815260200182805461038a9061122e565b80156103d55780601f106103ac576101008083540402835291602001916103d5565b820191905f5260205f20905b8154815290600101906020018083116103b857829003601f168201915b5050505050905090565b5f5f6103e9610814565b90506103f681858561081b565b600191505092915050565b5f600254905090565b5f600754421015610450576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610447906112a8565b60405180910390fd5b61045b84848461082d565b90509392505050565b5f6012905090565b6305a39a8081565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6104c161085b565b6104ca5f6108e2565b565b60075481565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6359682f0081565b6060600480546105119061122e565b80601f016020809104026020016040519081016040528092919081815260200182805461053d9061122e565b80156105885780601f1061055f57610100808354040283529160200191610588565b820191905f5260205f20905b81548152906001019060200180831161056b57829003601f168201915b5050505050905090565b5f6007544210156105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf906112a8565b60405180910390fd5b6105e283836109a5565b905092915050565b60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8173ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610701573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061072591906113b1565b505050505050905078010000000000000000000000000000000000000000000000008173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1661077f919061147b565b61078991906114e9565b9250505090565b61079861085b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610808575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107ff91906111aa565b60405180910390fd5b610811816108e2565b50565b5f33905090565b61082883838360016109c7565b505050565b5f5f610837610814565b9050610844858285610b96565b61084f858585610c29565b60019150509392505050565b610863610814565b73ffffffffffffffffffffffffffffffffffffffff166108816104d2565b73ffffffffffffffffffffffffffffffffffffffff16146108e0576108a4610814565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108d791906111aa565b60405180910390fd5b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f5f6109af610814565b90506109bc818585610c29565b600191505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a37575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610a2e91906111aa565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610aa7575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a9e91906111aa565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015610b90578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b8791906110d3565b60405180910390a35b50505050565b5f610ba1848461060f565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610c235781811015610c14578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610c0b93929190611519565b60405180910390fd5b610c2284848484035f6109c7565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c99575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610c9091906111aa565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d09575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610d0091906111aa565b60405180910390fd5b610d14838383610d19565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d69578060025f828254610d5d919061154e565b92505081905550610e37565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610df2578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610de993929190611519565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e7e578060025f8282540392505081905550610ec8565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610f2591906110d3565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610f7482610f32565b610f7e8185610f3c565b9350610f8e818560208601610f4c565b610f9781610f5a565b840191505092915050565b5f6020820190508181035f830152610fba8184610f6a565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610fef82610fc6565b9050919050565b610fff81610fe5565b8114611009575f5ffd5b50565b5f8135905061101a81610ff6565b92915050565b5f819050919050565b61103281611020565b811461103c575f5ffd5b50565b5f8135905061104d81611029565b92915050565b5f5f6040838503121561106957611068610fc2565b5b5f6110768582860161100c565b92505060206110878582860161103f565b9150509250929050565b5f8115159050919050565b6110a581611091565b82525050565b5f6020820190506110be5f83018461109c565b92915050565b6110cd81611020565b82525050565b5f6020820190506110e65f8301846110c4565b92915050565b5f5f5f6060848603121561110357611102610fc2565b5b5f6111108682870161100c565b93505060206111218682870161100c565b92505060406111328682870161103f565b9150509250925092565b5f60ff82169050919050565b6111518161113c565b82525050565b5f60208201905061116a5f830184611148565b92915050565b5f6020828403121561118557611184610fc2565b5b5f6111928482850161100c565b91505092915050565b6111a481610fe5565b82525050565b5f6020820190506111bd5f83018461119b565b92915050565b5f5f604083850312156111d9576111d8610fc2565b5b5f6111e68582860161100c565b92505060206111f78582860161100c565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061124557607f821691505b60208210810361125857611257611201565b5b50919050565b7f5465616d20746f6b656e7320617265206c6f636b6564000000000000000000005f82015250565b5f611292601683610f3c565b915061129d8261125e565b602082019050919050565b5f6020820190508181035f8301526112bf81611286565b9050919050565b6112cf81610fc6565b81146112d9575f5ffd5b50565b5f815190506112ea816112c6565b92915050565b5f8160020b9050919050565b611305816112f0565b811461130f575f5ffd5b50565b5f81519050611320816112fc565b92915050565b5f61ffff82169050919050565b61133c81611326565b8114611346575f5ffd5b50565b5f8151905061135781611333565b92915050565b6113668161113c565b8114611370575f5ffd5b50565b5f815190506113818161135d565b92915050565b61139081611091565b811461139a575f5ffd5b50565b5f815190506113ab81611387565b92915050565b5f5f5f5f5f5f5f60e0888a0312156113cc576113cb610fc2565b5b5f6113d98a828b016112dc565b97505060206113ea8a828b01611312565b96505060406113fb8a828b01611349565b955050606061140c8a828b01611349565b945050608061141d8a828b01611349565b93505060a061142e8a828b01611373565b92505060c061143f8a828b0161139d565b91505092959891949750929550565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61148582611020565b915061149083611020565b925082820261149e81611020565b915082820484148315176114b5576114b461144e565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6114f382611020565b91506114fe83611020565b92508261150e5761150d6114bc565b5b828204905092915050565b5f60608201905061152c5f83018661119b565b61153960208301856110c4565b61154660408301846110c4565b949350505050565b5f61155882611020565b915061156383611020565b925082820190508082111561157b5761157a61144e565b5b9291505056fea264697066735822122013a47c2a630e2a262f5a64ff4cd65fe42dd9cd2ac1b308af7bb4b5c211f56b4b64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x109 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x76AE9B2D GT PUSH2 0xA0 JUMPI DUP1 PUSH4 0xA9059CBB GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xBDD3D825 EQ PUSH2 0x2C7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xEB91D37E EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x333 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x76AE9B2D EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x902D55A5 EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x279 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xDC JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A9 JUMPI DUP1 PUSH4 0x35928998 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x215 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x179 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x115 PUSH2 0x34F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x122 SWAP2 SWAP1 PUSH2 0xFA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x145 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x140 SWAP2 SWAP1 PUSH2 0x1053 JUMP JUMPDEST PUSH2 0x3DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x163 PUSH2 0x401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x193 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18E SWAP2 SWAP1 PUSH2 0x10EC JUMP JUMPDEST PUSH2 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B1 PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BE SWAP2 SWAP1 PUSH2 0x1157 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CF PUSH2 0x46C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DC SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FA SWAP2 SWAP1 PUSH2 0x1170 JUMP JUMPDEST PUSH2 0x474 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20C SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21D PUSH2 0x4B9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x227 PUSH2 0x4CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x245 PUSH2 0x4D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x252 SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x263 PUSH2 0x4FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x270 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x281 PUSH2 0x502 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28E SWAP2 SWAP1 PUSH2 0xFA2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AC SWAP2 SWAP1 PUSH2 0x1053 JUMP JUMPDEST PUSH2 0x592 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x10AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CF PUSH2 0x5EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DC SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x11C3 JUMP JUMPDEST PUSH2 0x60F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x348 SWAP2 SWAP1 PUSH2 0x1170 JUMP JUMPDEST PUSH2 0x790 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x35E SWAP1 PUSH2 0x122E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x38A SWAP1 PUSH2 0x122E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3AC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x3E9 PUSH2 0x814 JUMP JUMPDEST SWAP1 POP PUSH2 0x3F6 DUP2 DUP6 DUP6 PUSH2 0x81B JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x7 SLOAD TIMESTAMP LT ISZERO PUSH2 0x450 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x447 SWAP1 PUSH2 0x12A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x45B DUP5 DUP5 DUP5 PUSH2 0x82D JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0x5A39A80 DUP2 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x85B JUMP JUMPDEST PUSH2 0x4CA PUSH0 PUSH2 0x8E2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH4 0x59682F00 DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x511 SWAP1 PUSH2 0x122E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x53D SWAP1 PUSH2 0x122E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x588 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x55F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x588 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x56B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x7 SLOAD TIMESTAMP LT ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CF SWAP1 PUSH2 0x12A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E2 DUP4 DUP4 PUSH2 0x9A5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x8 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xE0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x701 JUMPI RETURNDATASIZE PUSH0 PUSH0 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x725 SWAP2 SWAP1 PUSH2 0x13B1 JUMP JUMPDEST POP POP POP POP POP POP SWAP1 POP PUSH25 0x1000000000000000000000000000000000000000000000000 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x77F SWAP2 SWAP1 PUSH2 0x147B JUMP JUMPDEST PUSH2 0x789 SWAP2 SWAP1 PUSH2 0x14E9 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x798 PUSH2 0x85B JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x808 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7FF SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x811 DUP2 PUSH2 0x8E2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x828 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x9C7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x837 PUSH2 0x814 JUMP JUMPDEST SWAP1 POP PUSH2 0x844 DUP6 DUP3 DUP6 PUSH2 0xB96 JUMP JUMPDEST PUSH2 0x84F DUP6 DUP6 DUP6 PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x863 PUSH2 0x814 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x881 PUSH2 0x4D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8E0 JUMPI PUSH2 0x8A4 PUSH2 0x814 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D7 SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH2 0x9AF PUSH2 0x814 JUMP JUMPDEST SWAP1 POP PUSH2 0x9BC DUP2 DUP6 DUP6 PUSH2 0xC29 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA37 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2E SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAA7 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9E SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0xB90 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xB87 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xBA1 DUP5 DUP5 PUSH2 0x60F JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 LT ISZERO PUSH2 0xC23 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xC14 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC0B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC22 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x9C7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC99 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC90 SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD09 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD00 SWAP2 SWAP1 PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD14 DUP4 DUP4 DUP4 PUSH2 0xD19 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD69 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xD5D SWAP2 SWAP1 PUSH2 0x154E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xE37 JUMP JUMPDEST PUSH0 PUSH0 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xDF2 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE7E JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xEC8 JUMP JUMPDEST DUP1 PUSH0 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xF25 SWAP2 SWAP1 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xF74 DUP3 PUSH2 0xF32 JUMP JUMPDEST PUSH2 0xF7E DUP2 DUP6 PUSH2 0xF3C JUMP JUMPDEST SWAP4 POP PUSH2 0xF8E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xF4C JUMP JUMPDEST PUSH2 0xF97 DUP2 PUSH2 0xF5A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xFBA DUP2 DUP5 PUSH2 0xF6A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xFEF DUP3 PUSH2 0xFC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFF DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1009 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x101A DUP2 PUSH2 0xFF6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1032 DUP2 PUSH2 0x1020 JUMP JUMPDEST DUP2 EQ PUSH2 0x103C JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x104D DUP2 PUSH2 0x1029 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1069 JUMPI PUSH2 0x1068 PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1076 DUP6 DUP3 DUP7 ADD PUSH2 0x100C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1087 DUP6 DUP3 DUP7 ADD PUSH2 0x103F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10A5 DUP2 PUSH2 0x1091 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10BE PUSH0 DUP4 ADD DUP5 PUSH2 0x109C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10CD DUP2 PUSH2 0x1020 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x10E6 PUSH0 DUP4 ADD DUP5 PUSH2 0x10C4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1103 JUMPI PUSH2 0x1102 PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1110 DUP7 DUP3 DUP8 ADD PUSH2 0x100C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1121 DUP7 DUP3 DUP8 ADD PUSH2 0x100C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1132 DUP7 DUP3 DUP8 ADD PUSH2 0x103F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1151 DUP2 PUSH2 0x113C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x116A PUSH0 DUP4 ADD DUP5 PUSH2 0x1148 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1185 JUMPI PUSH2 0x1184 PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1192 DUP5 DUP3 DUP6 ADD PUSH2 0x100C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x11A4 DUP2 PUSH2 0xFE5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11BD PUSH0 DUP4 ADD DUP5 PUSH2 0x119B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11D9 JUMPI PUSH2 0x11D8 PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x11E6 DUP6 DUP3 DUP7 ADD PUSH2 0x100C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x11F7 DUP6 DUP3 DUP7 ADD PUSH2 0x100C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1245 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1258 JUMPI PUSH2 0x1257 PUSH2 0x1201 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5465616D20746F6B656E7320617265206C6F636B656400000000000000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1292 PUSH1 0x16 DUP4 PUSH2 0xF3C JUMP JUMPDEST SWAP2 POP PUSH2 0x129D DUP3 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x12BF DUP2 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x12CF DUP2 PUSH2 0xFC6 JUMP JUMPDEST DUP2 EQ PUSH2 0x12D9 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x12EA DUP2 PUSH2 0x12C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x2 SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1305 DUP2 PUSH2 0x12F0 JUMP JUMPDEST DUP2 EQ PUSH2 0x130F JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x1320 DUP2 PUSH2 0x12FC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x133C DUP2 PUSH2 0x1326 JUMP JUMPDEST DUP2 EQ PUSH2 0x1346 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x1357 DUP2 PUSH2 0x1333 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1366 DUP2 PUSH2 0x113C JUMP JUMPDEST DUP2 EQ PUSH2 0x1370 JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x1381 DUP2 PUSH2 0x135D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1390 DUP2 PUSH2 0x1091 JUMP JUMPDEST DUP2 EQ PUSH2 0x139A JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x13AB DUP2 PUSH2 0x1387 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x13CC JUMPI PUSH2 0x13CB PUSH2 0xFC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x13D9 DUP11 DUP3 DUP12 ADD PUSH2 0x12DC JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x13EA DUP11 DUP3 DUP12 ADD PUSH2 0x1312 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x13FB DUP11 DUP3 DUP12 ADD PUSH2 0x1349 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x140C DUP11 DUP3 DUP12 ADD PUSH2 0x1349 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x141D DUP11 DUP3 DUP12 ADD PUSH2 0x1349 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x142E DUP11 DUP3 DUP12 ADD PUSH2 0x1373 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x143F DUP11 DUP3 DUP12 ADD PUSH2 0x139D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x1485 DUP3 PUSH2 0x1020 JUMP JUMPDEST SWAP2 POP PUSH2 0x1490 DUP4 PUSH2 0x1020 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x149E DUP2 PUSH2 0x1020 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x14B5 JUMPI PUSH2 0x14B4 PUSH2 0x144E JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x14F3 DUP3 PUSH2 0x1020 JUMP JUMPDEST SWAP2 POP PUSH2 0x14FE DUP4 PUSH2 0x1020 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x150E JUMPI PUSH2 0x150D PUSH2 0x14BC JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x152C PUSH0 DUP4 ADD DUP7 PUSH2 0x119B JUMP JUMPDEST PUSH2 0x1539 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x10C4 JUMP JUMPDEST PUSH2 0x1546 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x10C4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1558 DUP3 PUSH2 0x1020 JUMP JUMPDEST SWAP2 POP PUSH2 0x1563 DUP4 PUSH2 0x1020 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x157B JUMPI PUSH2 0x157A PUSH2 0x144E JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT LOG4 PUSH29 0x2A630E2A262F5A64FF4CD65FE42DD9CD2AC1B308AF7BB4B5C211F56B4B PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "489:1868:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3902:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2803:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1878:186:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2688:82:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;690:55:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2933:116:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:5;;;:::i;:::-;;812:30:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1638:85:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;615:55:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1962:93:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1716:154:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;849:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3455:140:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2072:282:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1760:89:7;1805:13;1837:5;1830:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1760:89;:::o;3902:186::-;3975:4;3991:13;4007:12;:10;:12::i;:::-;3991:28;;4029:31;4038:5;4045:7;4054:5;4029:8;:31::i;:::-;4077:4;4070:11;;;3902:186;;;;:::o;2803:97::-;2855:7;2881:12;;2874:19;;2803:97;:::o;1878:186:4:-;1987:4;1646:15;;1627;:34;;1619:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2011:45:::1;2030:6;2038:9;2049:6;2011:18;:45::i;:::-;2004:52;;1878:186:::0;;;;;:::o;2688:82:7:-;2737:5;2761:2;2754:9;;2688:82;:::o;690:55:4:-;733:12;690:55;:::o;2933:116:7:-;2998:7;3024:9;:18;3034:7;3024:18;;;;;;;;;;;;;;;;3017:25;;2933:116;;;:::o;2293:101:5:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;812:30:4:-;;;;:::o;1638:85:5:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;615:55:4:-;654:16;615:55;:::o;1962:93:7:-;2009:13;2041:7;2034:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1962:93;:::o;1716:154:4:-;1805:4;1646:15;;1627;:34;;1619:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1829:33:::1;1844:9;1855:6;1829:14;:33::i;:::-;1822:40;;1716:154:::0;;;;:::o;849:26::-;;;;;;;;;;;;;:::o;3455:140:7:-;3535:7;3561:11;:18;3573:5;3561:18;;;;;;;;;;;;;;;:27;3580:7;3561:27;;;;;;;;;;;;;;;;3554:34;;3455:140;;;;:::o;2072:282:4:-;2120:13;2146:19;2183:11;;;;;;;;;;;2146:49;;2207:20;2243:4;:10;;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2206:49;;;;;;;;2323:6;2306:12;2298:21;;2282:12;2274:21;;:45;;;;:::i;:::-;:56;;;;:::i;:::-;2266:64;;2135:219;;2072:282;:::o;2543:215:5:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;656:96:10:-;709:7;735:10;728:17;;656:96;:::o;8630:128:7:-;8714:37;8723:5;8730:7;8739:5;8746:4;8714:8;:37::i;:::-;8630:128;;;:::o;4680:244::-;4767:4;4783:15;4801:12;:10;:12::i;:::-;4783:30;;4823:37;4839:4;4845:7;4854:5;4823:15;:37::i;:::-;4870:26;4880:4;4886:2;4890:5;4870:9;:26::i;:::-;4913:4;4906:11;;;4680:244;;;;;:::o;1796:162:5:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2912:187::-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;3244:178:7:-;3313:4;3329:13;3345:12;:10;:12::i;:::-;3329:28;;3367:27;3377:5;3384:2;3388:5;3367:9;:27::i;:::-;3411:4;3404:11;;;3244:178;;;;:::o;9605:432::-;9734:1;9717:19;;:5;:19;;;9713:89;;9788:1;9759:32;;;;;;;;;;;:::i;:::-;;;;;;;;9713:89;9834:1;9815:21;;:7;:21;;;9811:90;;9887:1;9859:31;;;;;;;;;;;:::i;:::-;;;;;;;;9811:90;9940:5;9910:11;:18;9922:5;9910:18;;;;;;;;;;;;;;;:27;9929:7;9910:27;;;;;;;;;;;;;;;:35;;;;9959:9;9955:76;;;10005:7;9989:31;;9998:5;9989:31;;;10014:5;9989:31;;;;;;:::i;:::-;;;;;;;;9955:76;9605:432;;;;:::o;10319:476::-;10418:24;10445:25;10455:5;10462:7;10445:9;:25::i;:::-;10418:52;;10503:17;10484:16;:36;10480:309;;;10559:5;10540:16;:24;10536:130;;;10618:7;10627:16;10645:5;10591:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10536:130;10707:57;10716:5;10723:7;10751:5;10732:16;:24;10758:5;10707:8;:57::i;:::-;10480:309;10408:387;10319:476;;;:::o;5297:300::-;5396:1;5380:18;;:4;:18;;;5376:86;;5448:1;5421:30;;;;;;;;;;;:::i;:::-;;;;;;;;5376:86;5489:1;5475:16;;:2;:16;;;5471:86;;5543:1;5514:32;;;;;;;;;;;:::i;:::-;;;;;;;;5471:86;5566:24;5574:4;5580:2;5584:5;5566:7;:24::i;:::-;5297:300;;;:::o;5912:1107::-;6017:1;6001:18;;:4;:18;;;5997:540;;6153:5;6137:12;;:21;;;;;;;:::i;:::-;;;;;;;;5997:540;;;6189:19;6211:9;:15;6221:4;6211:15;;;;;;;;;;;;;;;;6189:37;;6258:5;6244:11;:19;6240:115;;;6315:4;6321:11;6334:5;6290:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6240:115;6507:5;6493:11;:19;6475:9;:15;6485:4;6475:15;;;;;;;;;;;;;;;:37;;;;6175:362;5997:540;6565:1;6551:16;;:2;:16;;;6547:425;;6730:5;6714:12;;:21;;;;;;;;;;;6547:425;;;6942:5;6925:9;:13;6935:2;6925:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6547:425;7002:2;6987:25;;6996:4;6987:25;;;7006:5;6987:25;;;;;;:::i;:::-;;;;;;;;5912:1107;;;:::o;7:99:23:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:139::-;376:6;371:3;366;360:23;417:1;408:6;403:3;399:16;392:27;287:139;;;:::o;432:102::-;473:6;524:2;520:7;515:2;508:5;504:14;500:28;490:38;;432:102;;;:::o;540:377::-;628:3;656:39;689:5;656:39;:::i;:::-;711:71;775:6;770:3;711:71;:::i;:::-;704:78;;791:65;849:6;844:3;837:4;830:5;826:16;791:65;:::i;:::-;881:29;903:6;881:29;:::i;:::-;876:3;872:39;865:46;;632:285;540:377;;;;:::o;923:313::-;1036:4;1074:2;1063:9;1059:18;1051:26;;1123:9;1117:4;1113:20;1109:1;1098:9;1094:17;1087:47;1151:78;1224:4;1215:6;1151:78;:::i;:::-;1143:86;;923:313;;;;:::o;1323:117::-;1432:1;1429;1422:12;1569:126;1606:7;1646:42;1639:5;1635:54;1624:65;;1569:126;;;:::o;1701:96::-;1738:7;1767:24;1785:5;1767:24;:::i;:::-;1756:35;;1701:96;;;:::o;1803:122::-;1876:24;1894:5;1876:24;:::i;:::-;1869:5;1866:35;1856:63;;1915:1;1912;1905:12;1856:63;1803:122;:::o;1931:139::-;1977:5;2015:6;2002:20;1993:29;;2031:33;2058:5;2031:33;:::i;:::-;1931:139;;;;:::o;2076:77::-;2113:7;2142:5;2131:16;;2076:77;;;:::o;2159:122::-;2232:24;2250:5;2232:24;:::i;:::-;2225:5;2222:35;2212:63;;2271:1;2268;2261:12;2212:63;2159:122;:::o;2287:139::-;2333:5;2371:6;2358:20;2349:29;;2387:33;2414:5;2387:33;:::i;:::-;2287:139;;;;:::o;2432:474::-;2500:6;2508;2557:2;2545:9;2536:7;2532:23;2528:32;2525:119;;;2563:79;;:::i;:::-;2525:119;2683:1;2708:53;2753:7;2744:6;2733:9;2729:22;2708:53;:::i;:::-;2698:63;;2654:117;2810:2;2836:53;2881:7;2872:6;2861:9;2857:22;2836:53;:::i;:::-;2826:63;;2781:118;2432:474;;;;;:::o;2912:90::-;2946:7;2989:5;2982:13;2975:21;2964:32;;2912:90;;;:::o;3008:109::-;3089:21;3104:5;3089:21;:::i;:::-;3084:3;3077:34;3008:109;;:::o;3123:210::-;3210:4;3248:2;3237:9;3233:18;3225:26;;3261:65;3323:1;3312:9;3308:17;3299:6;3261:65;:::i;:::-;3123:210;;;;:::o;3339:118::-;3426:24;3444:5;3426:24;:::i;:::-;3421:3;3414:37;3339:118;;:::o;3463:222::-;3556:4;3594:2;3583:9;3579:18;3571:26;;3607:71;3675:1;3664:9;3660:17;3651:6;3607:71;:::i;:::-;3463:222;;;;:::o;3691:619::-;3768:6;3776;3784;3833:2;3821:9;3812:7;3808:23;3804:32;3801:119;;;3839:79;;:::i;:::-;3801:119;3959:1;3984:53;4029:7;4020:6;4009:9;4005:22;3984:53;:::i;:::-;3974:63;;3930:117;4086:2;4112:53;4157:7;4148:6;4137:9;4133:22;4112:53;:::i;:::-;4102:63;;4057:118;4214:2;4240:53;4285:7;4276:6;4265:9;4261:22;4240:53;:::i;:::-;4230:63;;4185:118;3691:619;;;;;:::o;4316:86::-;4351:7;4391:4;4384:5;4380:16;4369:27;;4316:86;;;:::o;4408:112::-;4491:22;4507:5;4491:22;:::i;:::-;4486:3;4479:35;4408:112;;:::o;4526:214::-;4615:4;4653:2;4642:9;4638:18;4630:26;;4666:67;4730:1;4719:9;4715:17;4706:6;4666:67;:::i;:::-;4526:214;;;;:::o;4746:329::-;4805:6;4854:2;4842:9;4833:7;4829:23;4825:32;4822:119;;;4860:79;;:::i;:::-;4822:119;4980:1;5005:53;5050:7;5041:6;5030:9;5026:22;5005:53;:::i;:::-;4995:63;;4951:117;4746:329;;;;:::o;5081:118::-;5168:24;5186:5;5168:24;:::i;:::-;5163:3;5156:37;5081:118;;:::o;5205:222::-;5298:4;5336:2;5325:9;5321:18;5313:26;;5349:71;5417:1;5406:9;5402:17;5393:6;5349:71;:::i;:::-;5205:222;;;;:::o;5433:474::-;5501:6;5509;5558:2;5546:9;5537:7;5533:23;5529:32;5526:119;;;5564:79;;:::i;:::-;5526:119;5684:1;5709:53;5754:7;5745:6;5734:9;5730:22;5709:53;:::i;:::-;5699:63;;5655:117;5811:2;5837:53;5882:7;5873:6;5862:9;5858:22;5837:53;:::i;:::-;5827:63;;5782:118;5433:474;;;;;:::o;5913:180::-;5961:77;5958:1;5951:88;6058:4;6055:1;6048:15;6082:4;6079:1;6072:15;6099:320;6143:6;6180:1;6174:4;6170:12;6160:22;;6227:1;6221:4;6217:12;6248:18;6238:81;;6304:4;6296:6;6292:17;6282:27;;6238:81;6366:2;6358:6;6355:14;6335:18;6332:38;6329:84;;6385:18;;:::i;:::-;6329:84;6150:269;6099:320;;;:::o;6425:172::-;6565:24;6561:1;6553:6;6549:14;6542:48;6425:172;:::o;6603:366::-;6745:3;6766:67;6830:2;6825:3;6766:67;:::i;:::-;6759:74;;6842:93;6931:3;6842:93;:::i;:::-;6960:2;6955:3;6951:12;6944:19;;6603:366;;;:::o;6975:419::-;7141:4;7179:2;7168:9;7164:18;7156:26;;7228:9;7222:4;7218:20;7214:1;7203:9;7199:17;7192:47;7256:131;7382:4;7256:131;:::i;:::-;7248:139;;6975:419;;;:::o;7400:122::-;7473:24;7491:5;7473:24;:::i;:::-;7466:5;7463:35;7453:63;;7512:1;7509;7502:12;7453:63;7400:122;:::o;7528:143::-;7585:5;7616:6;7610:13;7601:22;;7632:33;7659:5;7632:33;:::i;:::-;7528:143;;;;:::o;7677:90::-;7712:7;7755:5;7752:1;7741:20;7730:31;;7677:90;;;:::o;7773:118::-;7844:22;7860:5;7844:22;:::i;:::-;7837:5;7834:33;7824:61;;7881:1;7878;7871:12;7824:61;7773:118;:::o;7897:139::-;7952:5;7983:6;7977:13;7968:22;;7999:31;8024:5;7999:31;:::i;:::-;7897:139;;;;:::o;8042:89::-;8078:7;8118:6;8111:5;8107:18;8096:29;;8042:89;;;:::o;8137:120::-;8209:23;8226:5;8209:23;:::i;:::-;8202:5;8199:34;8189:62;;8247:1;8244;8237:12;8189:62;8137:120;:::o;8263:141::-;8319:5;8350:6;8344:13;8335:22;;8366:32;8392:5;8366:32;:::i;:::-;8263:141;;;;:::o;8410:118::-;8481:22;8497:5;8481:22;:::i;:::-;8474:5;8471:33;8461:61;;8518:1;8515;8508:12;8461:61;8410:118;:::o;8534:139::-;8589:5;8620:6;8614:13;8605:22;;8636:31;8661:5;8636:31;:::i;:::-;8534:139;;;;:::o;8679:116::-;8749:21;8764:5;8749:21;:::i;:::-;8742:5;8739:32;8729:60;;8785:1;8782;8775:12;8729:60;8679:116;:::o;8801:137::-;8855:5;8886:6;8880:13;8871:22;;8902:30;8926:5;8902:30;:::i;:::-;8801:137;;;;:::o;8944:1271::-;9058:6;9066;9074;9082;9090;9098;9106;9155:3;9143:9;9134:7;9130:23;9126:33;9123:120;;;9162:79;;:::i;:::-;9123:120;9282:1;9307:64;9363:7;9354:6;9343:9;9339:22;9307:64;:::i;:::-;9297:74;;9253:128;9420:2;9446:62;9500:7;9491:6;9480:9;9476:22;9446:62;:::i;:::-;9436:72;;9391:127;9557:2;9583:63;9638:7;9629:6;9618:9;9614:22;9583:63;:::i;:::-;9573:73;;9528:128;9695:2;9721:63;9776:7;9767:6;9756:9;9752:22;9721:63;:::i;:::-;9711:73;;9666:128;9833:3;9860:63;9915:7;9906:6;9895:9;9891:22;9860:63;:::i;:::-;9850:73;;9804:129;9972:3;9999:62;10053:7;10044:6;10033:9;10029:22;9999:62;:::i;:::-;9989:72;;9943:128;10110:3;10137:61;10190:7;10181:6;10170:9;10166:22;10137:61;:::i;:::-;10127:71;;10081:127;8944:1271;;;;;;;;;;:::o;10221:180::-;10269:77;10266:1;10259:88;10366:4;10363:1;10356:15;10390:4;10387:1;10380:15;10407:410;10447:7;10470:20;10488:1;10470:20;:::i;:::-;10465:25;;10504:20;10522:1;10504:20;:::i;:::-;10499:25;;10559:1;10556;10552:9;10581:30;10599:11;10581:30;:::i;:::-;10570:41;;10760:1;10751:7;10747:15;10744:1;10741:22;10721:1;10714:9;10694:83;10671:139;;10790:18;;:::i;:::-;10671:139;10455:362;10407:410;;;;:::o;10823:180::-;10871:77;10868:1;10861:88;10968:4;10965:1;10958:15;10992:4;10989:1;10982:15;11009:185;11049:1;11066:20;11084:1;11066:20;:::i;:::-;11061:25;;11100:20;11118:1;11100:20;:::i;:::-;11095:25;;11139:1;11129:35;;11144:18;;:::i;:::-;11129:35;11186:1;11183;11179:9;11174:14;;11009:185;;;;:::o;11200:442::-;11349:4;11387:2;11376:9;11372:18;11364:26;;11400:71;11468:1;11457:9;11453:17;11444:6;11400:71;:::i;:::-;11481:72;11549:2;11538:9;11534:18;11525:6;11481:72;:::i;:::-;11563;11631:2;11620:9;11616:18;11607:6;11563:72;:::i;:::-;11200:442;;;;;;:::o;11648:191::-;11688:3;11707:20;11725:1;11707:20;:::i;:::-;11702:25;;11741:20;11759:1;11741:20;:::i;:::-;11736:25;;11784:1;11781;11777:9;11770:16;;11805:3;11802:1;11799:10;11796:36;;;11812:18;;:::i;:::-;11796:36;11648:191;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1111800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"TEAM_LOCK_PERIOD()": "370",
								"TOTAL_SUPPLY()": "392",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2895",
								"decimals()": "361",
								"getCurrentPrice()": "infinite",
								"name()": "infinite",
								"owner()": "2560",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"teamLockedUntil()": "2448",
								"totalSupply()": "2500",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"uniswapPool()": "2552"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSHSIZE",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "CODESIZE",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSHSIZE",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 884,
									"end": 1578,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "tag",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 999,
									"end": 1009,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "6373796400000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "PUSH",
									"source": 7,
									"value": "4353594400000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1656,
									"end": 1661,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1648,
									"end": 1653,
									"name": "PUSH",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "9"
								},
								{
									"begin": 1648,
									"end": 1661,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "tag",
									"source": 7,
									"value": "8"
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1681,
									"end": 1688,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1671,
									"end": 1678,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "9"
								},
								{
									"begin": 1671,
									"end": 1688,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "tag",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1582,
									"end": 1695,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1297,
									"end": 1298,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1273,
									"end": 1285,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 5,
									"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "14"
								},
								{
									"begin": 1322,
									"end": 1353,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "tag",
									"source": 5,
									"value": "13"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "SHL",
									"source": 5
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "SHR",
									"source": 5
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1225,
									"end": 1412,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1059,
									"end": 1060,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1035,
									"end": 1049,
									"modifierDepth": 2,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1035,
									"end": 1056,
									"modifierDepth": 2,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1035,
									"end": 1060,
									"modifierDepth": 2,
									"name": "GT",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "18"
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "8C379A000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "19"
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1027,
									"end": 1099,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "19"
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "18"
								},
								{
									"begin": 1027,
									"end": 1099,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1126,
									"end": 1140,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1123,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "6"
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "21"
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "22"
								},
								{
									"begin": 1110,
									"end": 1140,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "21"
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1110,
									"end": 1140,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1165,
									"end": 1177,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1162,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "8"
								},
								{
									"begin": 1151,
									"end": 1162,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "EXP",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "MUL",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "NOT",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "MUL",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 1151,
									"end": 1177,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1190,
									"end": 1232,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "23"
								},
								{
									"begin": 1196,
									"end": 1206,
									"modifierDepth": 2,
									"name": "CALLER",
									"source": 4
								},
								{
									"begin": 1228,
									"end": 1231,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "64"
								},
								{
									"begin": 1223,
									"end": 1225,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "50"
								},
								{
									"begin": 654,
									"end": 670,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "59682F00"
								},
								{
									"begin": 1208,
									"end": 1225,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 1208,
									"end": 1225,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1208,
									"end": 1225,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1208,
									"end": 1225,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "25"
								},
								{
									"begin": 1208,
									"end": 1225,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1208,
									"end": 1225,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 1208,
									"end": 1225,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1208,
									"end": 1231,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "26"
								},
								{
									"begin": 1208,
									"end": 1231,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1208,
									"end": 1231,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1208,
									"end": 1231,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "27"
								},
								{
									"begin": 1208,
									"end": 1231,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1208,
									"end": 1231,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "26"
								},
								{
									"begin": 1208,
									"end": 1231,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1190,
									"end": 1195,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "28"
								},
								{
									"begin": 1190,
									"end": 1195,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1190,
									"end": 1195,
									"modifierDepth": 2,
									"name": "SHL",
									"source": 4
								},
								{
									"begin": 1190,
									"end": 1232,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1190,
									"end": 1232,
									"modifierDepth": 2,
									"name": "SHR",
									"source": 4
								},
								{
									"begin": 1190,
									"end": 1232,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1190,
									"end": 1232,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "23"
								},
								{
									"begin": 1190,
									"end": 1232,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1261,
									"end": 1270,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1273,
									"end": 1274,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1261,
									"end": 1274,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1261,
									"end": 1274,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "29"
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1280,
									"end": 1293,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "6"
								},
								{
									"begin": 1280,
									"end": 1300,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1280,
									"end": 1300,
									"modifierDepth": 2,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 1280,
									"end": 1300,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1280,
									"end": 1300,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1276,
									"end": 1277,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1276,
									"end": 1300,
									"modifierDepth": 2,
									"name": "LT",
									"source": 4
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "30"
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1393,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "32"
								},
								{
									"begin": 1328,
									"end": 1341,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "6"
								},
								{
									"begin": 1342,
									"end": 1343,
									"modifierDepth": 2,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "LT",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "33"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "34"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "35"
								},
								{
									"begin": 1328,
									"end": 1344,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "34"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "33"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "EXP",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "DIV",
									"source": 4
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1328,
									"end": 1344,
									"modifierDepth": 2,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 1372,
									"end": 1385,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "6"
								},
								{
									"begin": 1372,
									"end": 1392,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1372,
									"end": 1392,
									"modifierDepth": 2,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 1372,
									"end": 1392,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1372,
									"end": 1392,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1366,
									"end": 1369,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "64"
								},
								{
									"begin": 1361,
									"end": 1363,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "A"
								},
								{
									"begin": 654,
									"end": 670,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "59682F00"
								},
								{
									"begin": 1346,
									"end": 1363,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "37"
								},
								{
									"begin": 1346,
									"end": 1363,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1363,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1363,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "25"
								},
								{
									"begin": 1346,
									"end": 1363,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1363,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "37"
								},
								{
									"begin": 1346,
									"end": 1363,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1369,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "38"
								},
								{
									"begin": 1346,
									"end": 1369,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1369,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1369,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "27"
								},
								{
									"begin": 1346,
									"end": 1369,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1369,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "38"
								},
								{
									"begin": 1346,
									"end": 1369,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1392,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "39"
								},
								{
									"begin": 1346,
									"end": 1392,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1392,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1392,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "27"
								},
								{
									"begin": 1346,
									"end": 1392,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1346,
									"end": 1392,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "39"
								},
								{
									"begin": 1346,
									"end": 1392,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1327,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "28"
								},
								{
									"begin": 1322,
									"end": 1327,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1322,
									"end": 1327,
									"modifierDepth": 2,
									"name": "SHL",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1393,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1322,
									"end": 1393,
									"modifierDepth": 2,
									"name": "SHR",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1393,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1322,
									"end": 1393,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "32"
								},
								{
									"begin": 1322,
									"end": 1393,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1302,
									"end": 1305,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1302,
									"end": 1305,
									"modifierDepth": 2,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1302,
									"end": 1305,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1302,
									"end": 1305,
									"modifierDepth": 2,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 1302,
									"end": 1305,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1302,
									"end": 1305,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1302,
									"end": 1305,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "29"
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "30"
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1256,
									"end": 1418,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1428,
									"end": 1473,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1442,
									"end": 1446,
									"modifierDepth": 2,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 1469,
									"end": 1472,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "64"
								},
								{
									"begin": 1464,
									"end": 1466,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "A"
								},
								{
									"begin": 654,
									"end": 670,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "59682F00"
								},
								{
									"begin": 1449,
									"end": 1466,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "41"
								},
								{
									"begin": 1449,
									"end": 1466,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1449,
									"end": 1466,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1449,
									"end": 1466,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "25"
								},
								{
									"begin": 1449,
									"end": 1466,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1449,
									"end": 1466,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "41"
								},
								{
									"begin": 1449,
									"end": 1466,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1449,
									"end": 1472,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "42"
								},
								{
									"begin": 1449,
									"end": 1472,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1449,
									"end": 1472,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1449,
									"end": 1472,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "27"
								},
								{
									"begin": 1449,
									"end": 1472,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1449,
									"end": 1472,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "42"
								},
								{
									"begin": 1449,
									"end": 1472,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1428,
									"end": 1433,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "28"
								},
								{
									"begin": 1428,
									"end": 1433,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1428,
									"end": 1433,
									"modifierDepth": 2,
									"name": "SHL",
									"source": 4
								},
								{
									"begin": 1428,
									"end": 1473,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1428,
									"end": 1473,
									"modifierDepth": 2,
									"name": "SHR",
									"source": 4
								},
								{
									"begin": 1428,
									"end": 1473,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1428,
									"end": 1473,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1428,
									"end": 1473,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 733,
									"end": 745,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "5A39A80"
								},
								{
									"begin": 1520,
									"end": 1535,
									"modifierDepth": 2,
									"name": "TIMESTAMP",
									"source": 4
								},
								{
									"begin": 1520,
									"end": 1554,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "43"
								},
								{
									"begin": 1520,
									"end": 1554,
									"modifierDepth": 2,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1520,
									"end": 1554,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1520,
									"end": 1554,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "44"
								},
								{
									"begin": 1520,
									"end": 1554,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 1520,
									"end": 1554,
									"modifierDepth": 2,
									"name": "tag",
									"source": 4,
									"value": "43"
								},
								{
									"begin": 1520,
									"end": 1554,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1502,
									"end": 1517,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 1502,
									"end": 1554,
									"modifierDepth": 2,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1502,
									"end": 1554,
									"modifierDepth": 2,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1502,
									"end": 1554,
									"modifierDepth": 2,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 1502,
									"end": 1554,
									"modifierDepth": 2,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 884,
									"end": 1578,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "45"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 5,
									"value": "5"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 5,
									"value": "100"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "EXP",
									"source": 5
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DIV",
									"source": 5
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 2985,
									"end": 3010,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 2985,
									"end": 3010,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 3029,
									"end": 3037,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3026,
									"name": "PUSH",
									"source": 5,
									"value": "5"
								},
								{
									"begin": 3020,
									"end": 3026,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 5,
									"value": "100"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "EXP",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "MUL",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "MUL",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 3083,
									"end": 3091,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 3073,
									"end": 3081,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 5,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 5
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 7362,
									"end": 7570,
									"name": "tag",
									"source": 7,
									"value": "28"
								},
								{
									"begin": 7362,
									"end": 7570,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 7451,
									"end": 7452,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 7432,
									"end": 7453,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7432,
									"end": 7453,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 7432,
									"end": 7439,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 7432,
									"end": 7453,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7432,
									"end": 7453,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 7432,
									"end": 7453,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 7428,
									"end": 7519,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "48"
								},
								{
									"begin": 7428,
									"end": 7519,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 7505,
									"end": 7506,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "PUSH",
									"source": 7,
									"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "49"
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "14"
								},
								{
									"begin": 7476,
									"end": 7508,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "tag",
									"source": 7,
									"value": "49"
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 7476,
									"end": 7508,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 7428,
									"end": 7519,
									"name": "tag",
									"source": 7,
									"value": "48"
								},
								{
									"begin": 7428,
									"end": 7519,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 7528,
									"end": 7563,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "50"
								},
								{
									"begin": 7544,
									"end": 7545,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 7548,
									"end": 7555,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 7557,
									"end": 7562,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 7528,
									"end": 7535,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "51"
								},
								{
									"begin": 7528,
									"end": 7535,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 7528,
									"end": 7535,
									"name": "SHL",
									"source": 7
								},
								{
									"begin": 7528,
									"end": 7563,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 7528,
									"end": 7563,
									"name": "SHR",
									"source": 7
								},
								{
									"begin": 7528,
									"end": 7563,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 7528,
									"end": 7563,
									"name": "tag",
									"source": 7,
									"value": "50"
								},
								{
									"begin": 7528,
									"end": 7563,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 7362,
									"end": 7570,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 7362,
									"end": 7570,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 7362,
									"end": 7570,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 5912,
									"end": 7019,
									"name": "tag",
									"source": 7,
									"value": "51"
								},
								{
									"begin": 5912,
									"end": 7019,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 6017,
									"end": 6018,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6001,
									"end": 6019,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6001,
									"end": 6019,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6001,
									"end": 6005,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 6001,
									"end": 6019,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6001,
									"end": 6019,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6001,
									"end": 6019,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 5997,
									"end": 6537,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "53"
								},
								{
									"begin": 5997,
									"end": 6537,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 6153,
									"end": 6158,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6149,
									"name": "PUSH",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 6137,
									"end": 6149,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "54"
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "44"
								},
								{
									"begin": 6137,
									"end": 6158,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "tag",
									"source": 7,
									"value": "54"
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 6137,
									"end": 6158,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 5997,
									"end": 6537,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "55"
								},
								{
									"begin": 5997,
									"end": 6537,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 5997,
									"end": 6537,
									"name": "tag",
									"source": 7,
									"value": "53"
								},
								{
									"begin": 5997,
									"end": 6537,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 6189,
									"end": 6208,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6211,
									"end": 6220,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6221,
									"end": 6225,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 6211,
									"end": 6226,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 6189,
									"end": 6226,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6189,
									"end": 6226,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6258,
									"end": 6263,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6244,
									"end": 6255,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6244,
									"end": 6263,
									"name": "LT",
									"source": 7
								},
								{
									"begin": 6240,
									"end": 6355,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 6240,
									"end": 6355,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "56"
								},
								{
									"begin": 6240,
									"end": 6355,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 6315,
									"end": 6319,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 6321,
									"end": 6332,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6334,
									"end": 6339,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "PUSH",
									"source": 7,
									"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "57"
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "SWAP4",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "58"
								},
								{
									"begin": 6290,
									"end": 6340,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "tag",
									"source": 7,
									"value": "57"
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6290,
									"end": 6340,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 6240,
									"end": 6355,
									"name": "tag",
									"source": 7,
									"value": "56"
								},
								{
									"begin": 6240,
									"end": 6355,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 6507,
									"end": 6512,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6493,
									"end": 6504,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6493,
									"end": 6512,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6484,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6485,
									"end": 6489,
									"name": "DUP7",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6475,
									"end": 6490,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6512,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6512,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6512,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 6475,
									"end": 6512,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6175,
									"end": 6537,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 5997,
									"end": 6537,
									"name": "tag",
									"source": 7,
									"value": "55"
								},
								{
									"begin": 5997,
									"end": 6537,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 6565,
									"end": 6566,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6551,
									"end": 6567,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6551,
									"end": 6567,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6551,
									"end": 6553,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 6551,
									"end": 6567,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6551,
									"end": 6567,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6551,
									"end": 6567,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 6547,
									"end": 6972,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "59"
								},
								{
									"begin": 6547,
									"end": 6972,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 6730,
									"end": 6735,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6726,
									"name": "PUSH",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 6714,
									"end": 6726,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 6714,
									"end": 6735,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6547,
									"end": 6972,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "60"
								},
								{
									"begin": 6547,
									"end": 6972,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 6547,
									"end": 6972,
									"name": "tag",
									"source": 7,
									"value": "59"
								},
								{
									"begin": 6547,
									"end": 6972,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 6942,
									"end": 6947,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6934,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6935,
									"end": 6937,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6938,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 6925,
									"end": 6947,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 6547,
									"end": 6972,
									"name": "tag",
									"source": 7,
									"value": "60"
								},
								{
									"begin": 6547,
									"end": 6972,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 7002,
									"end": 7004,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6996,
									"end": 7000,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "PUSH",
									"source": 7,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 7006,
									"end": 7011,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "61"
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "62"
								},
								{
									"begin": 6987,
									"end": 7012,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "tag",
									"source": 7,
									"value": "61"
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 6987,
									"end": 7012,
									"name": "LOG3",
									"source": 7
								},
								{
									"begin": 5912,
									"end": 7019,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 5912,
									"end": 7019,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 5912,
									"end": 7019,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 5912,
									"end": 7019,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "22"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "KECCAK256",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "63"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "MUL",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "64"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "GT",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "65"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "EXP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "MUL",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "NOT",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "MUL",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "64"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "65"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "63"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "66"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "67"
								},
								{
									"begin": 489,
									"end": 2357,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "66"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "67"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "68"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "GT",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "69"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "68"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "69"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 7,
									"end": 82,
									"name": "tag",
									"source": 23,
									"value": "70"
								},
								{
									"begin": 7,
									"end": 82,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 40,
									"end": 46,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 73,
									"end": 75,
									"name": "PUSH",
									"source": 23,
									"value": "40"
								},
								{
									"begin": 67,
									"end": 76,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 57,
									"end": 76,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 57,
									"end": 76,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7,
									"end": 82,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 7,
									"end": 82,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 23,
									"value": "71"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 211,
									"end": 328,
									"name": "tag",
									"source": 23,
									"value": "72"
								},
								{
									"begin": 211,
									"end": 328,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 320,
									"end": 321,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 317,
									"end": 318,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 310,
									"end": 322,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 334,
									"end": 451,
									"name": "tag",
									"source": 23,
									"value": "73"
								},
								{
									"begin": 334,
									"end": 451,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 443,
									"end": 444,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 440,
									"end": 441,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 433,
									"end": 445,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 457,
									"end": 559,
									"name": "tag",
									"source": 23,
									"value": "74"
								},
								{
									"begin": 457,
									"end": 559,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 498,
									"end": 504,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 549,
									"end": 551,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 545,
									"end": 552,
									"name": "NOT",
									"source": 23
								},
								{
									"begin": 540,
									"end": 542,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 533,
									"end": 538,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 529,
									"end": 543,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 525,
									"end": 553,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 515,
									"end": 553,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 515,
									"end": 553,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 457,
									"end": 559,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 457,
									"end": 559,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 457,
									"end": 559,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 457,
									"end": 559,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 565,
									"end": 745,
									"name": "tag",
									"source": 23,
									"value": "75"
								},
								{
									"begin": 565,
									"end": 745,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 613,
									"end": 690,
									"name": "PUSH",
									"source": 23,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 610,
									"end": 611,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 603,
									"end": 691,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 710,
									"end": 714,
									"name": "PUSH",
									"source": 23,
									"value": "41"
								},
								{
									"begin": 707,
									"end": 708,
									"name": "PUSH",
									"source": 23,
									"value": "4"
								},
								{
									"begin": 700,
									"end": 715,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 734,
									"end": 738,
									"name": "PUSH",
									"source": 23,
									"value": "24"
								},
								{
									"begin": 731,
									"end": 732,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 724,
									"end": 739,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 751,
									"end": 1032,
									"name": "tag",
									"source": 23,
									"value": "76"
								},
								{
									"begin": 751,
									"end": 1032,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 834,
									"end": 861,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "120"
								},
								{
									"begin": 856,
									"end": 860,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 834,
									"end": 861,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "74"
								},
								{
									"begin": 834,
									"end": 861,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 834,
									"end": 861,
									"name": "tag",
									"source": 23,
									"value": "120"
								},
								{
									"begin": 834,
									"end": 861,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 826,
									"end": 832,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 822,
									"end": 862,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 964,
									"end": 970,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 952,
									"end": 962,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 949,
									"end": 971,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 928,
									"end": 946,
									"name": "PUSH",
									"source": 23,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 916,
									"end": 926,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 913,
									"end": 947,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 910,
									"end": 972,
									"name": "OR",
									"source": 23
								},
								{
									"begin": 907,
									"end": 995,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 907,
									"end": 995,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "121"
								},
								{
									"begin": 907,
									"end": 995,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 975,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "122"
								},
								{
									"begin": 975,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "75"
								},
								{
									"begin": 975,
									"end": 993,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 975,
									"end": 993,
									"name": "tag",
									"source": 23,
									"value": "122"
								},
								{
									"begin": 975,
									"end": 993,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 907,
									"end": 995,
									"name": "tag",
									"source": 23,
									"value": "121"
								},
								{
									"begin": 907,
									"end": 995,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1015,
									"end": 1025,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 1011,
									"end": 1013,
									"name": "PUSH",
									"source": 23,
									"value": "40"
								},
								{
									"begin": 1004,
									"end": 1026,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 794,
									"end": 1032,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 751,
									"end": 1032,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 751,
									"end": 1032,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 751,
									"end": 1032,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1038,
									"end": 1167,
									"name": "tag",
									"source": 23,
									"value": "77"
								},
								{
									"begin": 1038,
									"end": 1167,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1072,
									"end": 1078,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1099,
									"end": 1119,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "124"
								},
								{
									"begin": 1099,
									"end": 1119,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "70"
								},
								{
									"begin": 1099,
									"end": 1119,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1099,
									"end": 1119,
									"name": "tag",
									"source": 23,
									"value": "124"
								},
								{
									"begin": 1099,
									"end": 1119,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1089,
									"end": 1119,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1089,
									"end": 1119,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1128,
									"end": 1161,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "125"
								},
								{
									"begin": 1156,
									"end": 1160,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 1148,
									"end": 1154,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 1128,
									"end": 1161,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "76"
								},
								{
									"begin": 1128,
									"end": 1161,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1128,
									"end": 1161,
									"name": "tag",
									"source": 23,
									"value": "125"
								},
								{
									"begin": 1128,
									"end": 1161,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1038,
									"end": 1167,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 1038,
									"end": 1167,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1038,
									"end": 1167,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1038,
									"end": 1167,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1173,
									"end": 1484,
									"name": "tag",
									"source": 23,
									"value": "78"
								},
								{
									"begin": 1173,
									"end": 1484,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1250,
									"end": 1254,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1340,
									"end": 1358,
									"name": "PUSH",
									"source": 23,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1332,
									"end": 1338,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 1329,
									"end": 1359,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 1326,
									"end": 1382,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 1326,
									"end": 1382,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "127"
								},
								{
									"begin": 1326,
									"end": 1382,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 1362,
									"end": 1380,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "128"
								},
								{
									"begin": 1362,
									"end": 1380,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "75"
								},
								{
									"begin": 1362,
									"end": 1380,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1362,
									"end": 1380,
									"name": "tag",
									"source": 23,
									"value": "128"
								},
								{
									"begin": 1362,
									"end": 1380,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1326,
									"end": 1382,
									"name": "tag",
									"source": 23,
									"value": "127"
								},
								{
									"begin": 1326,
									"end": 1382,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1412,
									"end": 1416,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 1404,
									"end": 1410,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 1400,
									"end": 1417,
									"name": "MUL",
									"source": 23
								},
								{
									"begin": 1392,
									"end": 1417,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1392,
									"end": 1417,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1472,
									"end": 1476,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 1466,
									"end": 1470,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1462,
									"end": 1477,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 1454,
									"end": 1477,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1454,
									"end": 1477,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1173,
									"end": 1484,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 1173,
									"end": 1484,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1173,
									"end": 1484,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1173,
									"end": 1484,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1490,
									"end": 1607,
									"name": "tag",
									"source": 23,
									"value": "79"
								},
								{
									"begin": 1490,
									"end": 1607,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1599,
									"end": 1600,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1596,
									"end": 1597,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1589,
									"end": 1601,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 1613,
									"end": 1739,
									"name": "tag",
									"source": 23,
									"value": "80"
								},
								{
									"begin": 1613,
									"end": 1739,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1650,
									"end": 1657,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1690,
									"end": 1732,
									"name": "PUSH",
									"source": 23,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1683,
									"end": 1688,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 1679,
									"end": 1733,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 1668,
									"end": 1733,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1668,
									"end": 1733,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1613,
									"end": 1739,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 1613,
									"end": 1739,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1613,
									"end": 1739,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1613,
									"end": 1739,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1745,
									"end": 1841,
									"name": "tag",
									"source": 23,
									"value": "81"
								},
								{
									"begin": 1745,
									"end": 1841,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1782,
									"end": 1789,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1811,
									"end": 1835,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "132"
								},
								{
									"begin": 1829,
									"end": 1834,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 1811,
									"end": 1835,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "80"
								},
								{
									"begin": 1811,
									"end": 1835,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1811,
									"end": 1835,
									"name": "tag",
									"source": 23,
									"value": "132"
								},
								{
									"begin": 1811,
									"end": 1835,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1800,
									"end": 1835,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1800,
									"end": 1835,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1745,
									"end": 1841,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 1745,
									"end": 1841,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1745,
									"end": 1841,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1745,
									"end": 1841,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1847,
									"end": 1969,
									"name": "tag",
									"source": 23,
									"value": "82"
								},
								{
									"begin": 1847,
									"end": 1969,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1920,
									"end": 1944,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "134"
								},
								{
									"begin": 1938,
									"end": 1943,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1920,
									"end": 1944,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "81"
								},
								{
									"begin": 1920,
									"end": 1944,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1920,
									"end": 1944,
									"name": "tag",
									"source": 23,
									"value": "134"
								},
								{
									"begin": 1920,
									"end": 1944,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1913,
									"end": 1918,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1910,
									"end": 1945,
									"name": "EQ",
									"source": 23
								},
								{
									"begin": 1900,
									"end": 1963,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "135"
								},
								{
									"begin": 1900,
									"end": 1963,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1956,
									"end": 1957,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1949,
									"end": 1961,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 1900,
									"end": 1963,
									"name": "tag",
									"source": 23,
									"value": "135"
								},
								{
									"begin": 1900,
									"end": 1963,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1847,
									"end": 1969,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1847,
									"end": 1969,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1975,
									"end": 2118,
									"name": "tag",
									"source": 23,
									"value": "83"
								},
								{
									"begin": 1975,
									"end": 2118,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2032,
									"end": 2037,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 2063,
									"end": 2069,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2057,
									"end": 2070,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 2048,
									"end": 2070,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 2048,
									"end": 2070,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2079,
									"end": 2112,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "137"
								},
								{
									"begin": 2106,
									"end": 2111,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2079,
									"end": 2112,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "82"
								},
								{
									"begin": 2079,
									"end": 2112,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2079,
									"end": 2112,
									"name": "tag",
									"source": 23,
									"value": "137"
								},
								{
									"begin": 2079,
									"end": 2112,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1975,
									"end": 2118,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 1975,
									"end": 2118,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 1975,
									"end": 2118,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1975,
									"end": 2118,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1975,
									"end": 2118,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2141,
									"end": 2873,
									"name": "tag",
									"source": 23,
									"value": "84"
								},
								{
									"begin": 2141,
									"end": 2873,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2248,
									"end": 2253,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 2273,
									"end": 2354,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "139"
								},
								{
									"begin": 2289,
									"end": 2353,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "140"
								},
								{
									"begin": 2346,
									"end": 2352,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 2289,
									"end": 2353,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "78"
								},
								{
									"begin": 2289,
									"end": 2353,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2289,
									"end": 2353,
									"name": "tag",
									"source": 23,
									"value": "140"
								},
								{
									"begin": 2289,
									"end": 2353,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2273,
									"end": 2354,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "77"
								},
								{
									"begin": 2273,
									"end": 2354,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2273,
									"end": 2354,
									"name": "tag",
									"source": 23,
									"value": "139"
								},
								{
									"begin": 2273,
									"end": 2354,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2264,
									"end": 2354,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 2264,
									"end": 2354,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2374,
									"end": 2379,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 2403,
									"end": 2409,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 2396,
									"end": 2401,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 2389,
									"end": 2410,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 2437,
									"end": 2441,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 2430,
									"end": 2435,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 2426,
									"end": 2442,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2419,
									"end": 2442,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 2419,
									"end": 2442,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2490,
									"end": 2494,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 2482,
									"end": 2488,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 2478,
									"end": 2495,
									"name": "MUL",
									"source": 23
								},
								{
									"begin": 2470,
									"end": 2476,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 2466,
									"end": 2496,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2519,
									"end": 2522,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 2511,
									"end": 2517,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2508,
									"end": 2523,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 2505,
									"end": 2627,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 2505,
									"end": 2627,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "141"
								},
								{
									"begin": 2505,
									"end": 2627,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 2538,
									"end": 2617,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "142"
								},
								{
									"begin": 2538,
									"end": 2617,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "79"
								},
								{
									"begin": 2538,
									"end": 2617,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2538,
									"end": 2617,
									"name": "tag",
									"source": 23,
									"value": "142"
								},
								{
									"begin": 2538,
									"end": 2617,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2505,
									"end": 2627,
									"name": "tag",
									"source": 23,
									"value": "141"
								},
								{
									"begin": 2505,
									"end": 2627,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2653,
									"end": 2659,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "tag",
									"source": 23,
									"value": "143"
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2670,
									"end": 2676,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2665,
									"end": 2668,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2662,
									"end": 2677,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "145"
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 2745,
									"end": 2748,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 2774,
									"end": 2822,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "146"
								},
								{
									"begin": 2818,
									"end": 2821,
									"name": "DUP9",
									"source": 23
								},
								{
									"begin": 2806,
									"end": 2816,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 2774,
									"end": 2822,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "83"
								},
								{
									"begin": 2774,
									"end": 2822,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2774,
									"end": 2822,
									"name": "tag",
									"source": 23,
									"value": "146"
								},
								{
									"begin": 2774,
									"end": 2822,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2769,
									"end": 2772,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 2762,
									"end": 2823,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 2852,
									"end": 2856,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 2847,
									"end": 2850,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 2843,
									"end": 2857,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2836,
									"end": 2857,
									"name": "SWAP4",
									"source": 23
								},
								{
									"begin": 2836,
									"end": 2857,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2712,
									"end": 2867,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2696,
									"end": 2700,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 2691,
									"end": 2694,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2687,
									"end": 2701,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2680,
									"end": 2701,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 2680,
									"end": 2701,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "143"
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "tag",
									"source": 23,
									"value": "145"
								},
								{
									"begin": 2636,
									"end": 2867,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2640,
									"end": 2661,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2254,
									"end": 2873,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2254,
									"end": 2873,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2141,
									"end": 2873,
									"name": "SWAP4",
									"source": 23
								},
								{
									"begin": 2141,
									"end": 2873,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 2141,
									"end": 2873,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2141,
									"end": 2873,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2141,
									"end": 2873,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2141,
									"end": 2873,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2896,
									"end": 3281,
									"name": "tag",
									"source": 23,
									"value": "85"
								},
								{
									"begin": 2896,
									"end": 3281,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2978,
									"end": 2983,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 3027,
									"end": 3030,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 3020,
									"end": 3024,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 3012,
									"end": 3018,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 3008,
									"end": 3025,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3004,
									"end": 3031,
									"name": "SLT",
									"source": 23
								},
								{
									"begin": 2994,
									"end": 3116,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "148"
								},
								{
									"begin": 2994,
									"end": 3116,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 3035,
									"end": 3114,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "149"
								},
								{
									"begin": 3035,
									"end": 3114,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "73"
								},
								{
									"begin": 3035,
									"end": 3114,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3035,
									"end": 3114,
									"name": "tag",
									"source": 23,
									"value": "149"
								},
								{
									"begin": 3035,
									"end": 3114,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2994,
									"end": 3116,
									"name": "tag",
									"source": 23,
									"value": "148"
								},
								{
									"begin": 2994,
									"end": 3116,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3145,
									"end": 3151,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 3139,
									"end": 3152,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 3170,
									"end": 3275,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "150"
								},
								{
									"begin": 3271,
									"end": 3274,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 3263,
									"end": 3269,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 3256,
									"end": 3260,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 3248,
									"end": 3254,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 3244,
									"end": 3261,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3170,
									"end": 3275,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "84"
								},
								{
									"begin": 3170,
									"end": 3275,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3170,
									"end": 3275,
									"name": "tag",
									"source": 23,
									"value": "150"
								},
								{
									"begin": 3170,
									"end": 3275,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3161,
									"end": 3275,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 3161,
									"end": 3275,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2984,
									"end": 3281,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2896,
									"end": 3281,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 2896,
									"end": 3281,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 2896,
									"end": 3281,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2896,
									"end": 3281,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2896,
									"end": 3281,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3287,
									"end": 3997,
									"name": "tag",
									"source": 23,
									"value": "3"
								},
								{
									"begin": 3287,
									"end": 3997,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3391,
									"end": 3397,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 3399,
									"end": 3405,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 3448,
									"end": 3450,
									"name": "PUSH",
									"source": 23,
									"value": "40"
								},
								{
									"begin": 3436,
									"end": 3445,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 3427,
									"end": 3434,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 3423,
									"end": 3446,
									"name": "SUB",
									"source": 23
								},
								{
									"begin": 3419,
									"end": 3451,
									"name": "SLT",
									"source": 23
								},
								{
									"begin": 3416,
									"end": 3535,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 3416,
									"end": 3535,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "152"
								},
								{
									"begin": 3416,
									"end": 3535,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 3454,
									"end": 3533,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "153"
								},
								{
									"begin": 3454,
									"end": 3533,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "71"
								},
								{
									"begin": 3454,
									"end": 3533,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3454,
									"end": 3533,
									"name": "tag",
									"source": 23,
									"value": "153"
								},
								{
									"begin": 3454,
									"end": 3533,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3416,
									"end": 3535,
									"name": "tag",
									"source": 23,
									"value": "152"
								},
								{
									"begin": 3416,
									"end": 3535,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3595,
									"end": 3596,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 3584,
									"end": 3593,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 3580,
									"end": 3597,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3574,
									"end": 3598,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 3625,
									"end": 3643,
									"name": "PUSH",
									"source": 23,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3617,
									"end": 3623,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 3614,
									"end": 3644,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 3611,
									"end": 3728,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 3611,
									"end": 3728,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "154"
								},
								{
									"begin": 3611,
									"end": 3728,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 3647,
									"end": 3726,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "155"
								},
								{
									"begin": 3647,
									"end": 3726,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "72"
								},
								{
									"begin": 3647,
									"end": 3726,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3647,
									"end": 3726,
									"name": "tag",
									"source": 23,
									"value": "155"
								},
								{
									"begin": 3647,
									"end": 3726,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3611,
									"end": 3728,
									"name": "tag",
									"source": 23,
									"value": "154"
								},
								{
									"begin": 3611,
									"end": 3728,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3752,
									"end": 3841,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "156"
								},
								{
									"begin": 3833,
									"end": 3840,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 3824,
									"end": 3830,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 3813,
									"end": 3822,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 3809,
									"end": 3831,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3752,
									"end": 3841,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "85"
								},
								{
									"begin": 3752,
									"end": 3841,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3752,
									"end": 3841,
									"name": "tag",
									"source": 23,
									"value": "156"
								},
								{
									"begin": 3752,
									"end": 3841,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3742,
									"end": 3841,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 3742,
									"end": 3841,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3545,
									"end": 3851,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3890,
									"end": 3892,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 3916,
									"end": 3980,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "157"
								},
								{
									"begin": 3972,
									"end": 3979,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 3963,
									"end": 3969,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 3952,
									"end": 3961,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 3948,
									"end": 3970,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3916,
									"end": 3980,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "83"
								},
								{
									"begin": 3916,
									"end": 3980,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3916,
									"end": 3980,
									"name": "tag",
									"source": 23,
									"value": "157"
								},
								{
									"begin": 3916,
									"end": 3980,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3906,
									"end": 3980,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 3906,
									"end": 3980,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3861,
									"end": 3990,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3287,
									"end": 3997,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 3287,
									"end": 3997,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3287,
									"end": 3997,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 3287,
									"end": 3997,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 3287,
									"end": 3997,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3287,
									"end": 3997,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4003,
									"end": 4102,
									"name": "tag",
									"source": 23,
									"value": "86"
								},
								{
									"begin": 4003,
									"end": 4102,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4055,
									"end": 4061,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4089,
									"end": 4094,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 4083,
									"end": 4095,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 4073,
									"end": 4095,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4073,
									"end": 4095,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4003,
									"end": 4102,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4003,
									"end": 4102,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4003,
									"end": 4102,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4003,
									"end": 4102,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4108,
									"end": 4288,
									"name": "tag",
									"source": 23,
									"value": "87"
								},
								{
									"begin": 4108,
									"end": 4288,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4156,
									"end": 4233,
									"name": "PUSH",
									"source": 23,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4153,
									"end": 4154,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4146,
									"end": 4234,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 4253,
									"end": 4257,
									"name": "PUSH",
									"source": 23,
									"value": "22"
								},
								{
									"begin": 4250,
									"end": 4251,
									"name": "PUSH",
									"source": 23,
									"value": "4"
								},
								{
									"begin": 4243,
									"end": 4258,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 4277,
									"end": 4281,
									"name": "PUSH",
									"source": 23,
									"value": "24"
								},
								{
									"begin": 4274,
									"end": 4275,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4267,
									"end": 4282,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 4294,
									"end": 4614,
									"name": "tag",
									"source": 23,
									"value": "88"
								},
								{
									"begin": 4294,
									"end": 4614,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4338,
									"end": 4344,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4375,
									"end": 4376,
									"name": "PUSH",
									"source": 23,
									"value": "2"
								},
								{
									"begin": 4369,
									"end": 4373,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 4365,
									"end": 4377,
									"name": "DIV",
									"source": 23
								},
								{
									"begin": 4355,
									"end": 4377,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4355,
									"end": 4377,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4422,
									"end": 4423,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 4416,
									"end": 4420,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 4412,
									"end": 4424,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 4443,
									"end": 4461,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 4433,
									"end": 4514,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "161"
								},
								{
									"begin": 4433,
									"end": 4514,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 4499,
									"end": 4503,
									"name": "PUSH",
									"source": 23,
									"value": "7F"
								},
								{
									"begin": 4491,
									"end": 4497,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 4487,
									"end": 4504,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 4477,
									"end": 4504,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4477,
									"end": 4504,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4433,
									"end": 4514,
									"name": "tag",
									"source": 23,
									"value": "161"
								},
								{
									"begin": 4433,
									"end": 4514,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4561,
									"end": 4563,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 4553,
									"end": 4559,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 4550,
									"end": 4564,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 4530,
									"end": 4548,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 4527,
									"end": 4565,
									"name": "SUB",
									"source": 23
								},
								{
									"begin": 4524,
									"end": 4608,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "162"
								},
								{
									"begin": 4524,
									"end": 4608,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 4580,
									"end": 4598,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "163"
								},
								{
									"begin": 4580,
									"end": 4598,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "87"
								},
								{
									"begin": 4580,
									"end": 4598,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4580,
									"end": 4598,
									"name": "tag",
									"source": 23,
									"value": "163"
								},
								{
									"begin": 4580,
									"end": 4598,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4524,
									"end": 4608,
									"name": "tag",
									"source": 23,
									"value": "162"
								},
								{
									"begin": 4524,
									"end": 4608,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4345,
									"end": 4614,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4294,
									"end": 4614,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4294,
									"end": 4614,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4294,
									"end": 4614,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4294,
									"end": 4614,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4620,
									"end": 4761,
									"name": "tag",
									"source": 23,
									"value": "89"
								},
								{
									"begin": 4620,
									"end": 4761,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4669,
									"end": 4673,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4692,
									"end": 4695,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 4684,
									"end": 4695,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4684,
									"end": 4695,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4715,
									"end": 4718,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 4712,
									"end": 4713,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4705,
									"end": 4719,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 4749,
									"end": 4753,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 4746,
									"end": 4747,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4736,
									"end": 4754,
									"name": "KECCAK256",
									"source": 23
								},
								{
									"begin": 4728,
									"end": 4754,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4728,
									"end": 4754,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4620,
									"end": 4761,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4620,
									"end": 4761,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4620,
									"end": 4761,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4620,
									"end": 4761,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4767,
									"end": 4860,
									"name": "tag",
									"source": 23,
									"value": "90"
								},
								{
									"begin": 4767,
									"end": 4860,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4804,
									"end": 4810,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4851,
									"end": 4853,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 4846,
									"end": 4848,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 4839,
									"end": 4844,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 4835,
									"end": 4849,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4831,
									"end": 4854,
									"name": "DIV",
									"source": 23
								},
								{
									"begin": 4821,
									"end": 4854,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4821,
									"end": 4854,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4767,
									"end": 4860,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4767,
									"end": 4860,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4767,
									"end": 4860,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4767,
									"end": 4860,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4866,
									"end": 4973,
									"name": "tag",
									"source": 23,
									"value": "91"
								},
								{
									"begin": 4866,
									"end": 4973,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4910,
									"end": 4918,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4960,
									"end": 4965,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 4954,
									"end": 4958,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 4950,
									"end": 4966,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 4929,
									"end": 4966,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4929,
									"end": 4966,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4866,
									"end": 4973,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 4866,
									"end": 4973,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4866,
									"end": 4973,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4866,
									"end": 4973,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4866,
									"end": 4973,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4979,
									"end": 5372,
									"name": "tag",
									"source": 23,
									"value": "92"
								},
								{
									"begin": 4979,
									"end": 5372,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5048,
									"end": 5054,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 5098,
									"end": 5099,
									"name": "PUSH",
									"source": 23,
									"value": "8"
								},
								{
									"begin": 5086,
									"end": 5096,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 5082,
									"end": 5100,
									"name": "MUL",
									"source": 23
								},
								{
									"begin": 5121,
									"end": 5218,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "168"
								},
								{
									"begin": 5151,
									"end": 5217,
									"name": "PUSH",
									"source": 23,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 5140,
									"end": 5149,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 5121,
									"end": 5218,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "91"
								},
								{
									"begin": 5121,
									"end": 5218,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5121,
									"end": 5218,
									"name": "tag",
									"source": 23,
									"value": "168"
								},
								{
									"begin": 5121,
									"end": 5218,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5239,
									"end": 5278,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "169"
								},
								{
									"begin": 5269,
									"end": 5277,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 5258,
									"end": 5267,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 5239,
									"end": 5278,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "91"
								},
								{
									"begin": 5239,
									"end": 5278,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5239,
									"end": 5278,
									"name": "tag",
									"source": 23,
									"value": "169"
								},
								{
									"begin": 5239,
									"end": 5278,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5227,
									"end": 5278,
									"name": "SWAP6",
									"source": 23
								},
								{
									"begin": 5227,
									"end": 5278,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5311,
									"end": 5315,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 5307,
									"end": 5316,
									"name": "NOT",
									"source": 23
								},
								{
									"begin": 5300,
									"end": 5305,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 5296,
									"end": 5317,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 5287,
									"end": 5317,
									"name": "SWAP4",
									"source": 23
								},
								{
									"begin": 5287,
									"end": 5317,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5360,
									"end": 5364,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 5350,
									"end": 5358,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 5346,
									"end": 5365,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 5339,
									"end": 5344,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 5336,
									"end": 5366,
									"name": "OR",
									"source": 23
								},
								{
									"begin": 5326,
									"end": 5366,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 5326,
									"end": 5366,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5055,
									"end": 5372,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5055,
									"end": 5372,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4979,
									"end": 5372,
									"name": "SWAP4",
									"source": 23
								},
								{
									"begin": 4979,
									"end": 5372,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 4979,
									"end": 5372,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4979,
									"end": 5372,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4979,
									"end": 5372,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4979,
									"end": 5372,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5378,
									"end": 5455,
									"name": "tag",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 5378,
									"end": 5455,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5415,
									"end": 5422,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 5444,
									"end": 5449,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 5433,
									"end": 5449,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 5433,
									"end": 5449,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5378,
									"end": 5455,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 5378,
									"end": 5455,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 5378,
									"end": 5455,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5378,
									"end": 5455,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5461,
									"end": 5521,
									"name": "tag",
									"source": 23,
									"value": "94"
								},
								{
									"begin": 5461,
									"end": 5521,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5489,
									"end": 5492,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 5510,
									"end": 5515,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 5503,
									"end": 5515,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 5503,
									"end": 5515,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5461,
									"end": 5521,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 5461,
									"end": 5521,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 5461,
									"end": 5521,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5461,
									"end": 5521,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5527,
									"end": 5669,
									"name": "tag",
									"source": 23,
									"value": "95"
								},
								{
									"begin": 5527,
									"end": 5669,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5577,
									"end": 5586,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 5610,
									"end": 5663,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "173"
								},
								{
									"begin": 5628,
									"end": 5662,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "174"
								},
								{
									"begin": 5637,
									"end": 5661,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "175"
								},
								{
									"begin": 5655,
									"end": 5660,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 5637,
									"end": 5661,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 5637,
									"end": 5661,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5637,
									"end": 5661,
									"name": "tag",
									"source": 23,
									"value": "175"
								},
								{
									"begin": 5637,
									"end": 5661,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5628,
									"end": 5662,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "94"
								},
								{
									"begin": 5628,
									"end": 5662,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5628,
									"end": 5662,
									"name": "tag",
									"source": 23,
									"value": "174"
								},
								{
									"begin": 5628,
									"end": 5662,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5610,
									"end": 5663,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 5610,
									"end": 5663,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5610,
									"end": 5663,
									"name": "tag",
									"source": 23,
									"value": "173"
								},
								{
									"begin": 5610,
									"end": 5663,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5597,
									"end": 5663,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 5597,
									"end": 5663,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5527,
									"end": 5669,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 5527,
									"end": 5669,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 5527,
									"end": 5669,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5527,
									"end": 5669,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5675,
									"end": 5750,
									"name": "tag",
									"source": 23,
									"value": "96"
								},
								{
									"begin": 5675,
									"end": 5750,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5718,
									"end": 5721,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 5739,
									"end": 5744,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 5732,
									"end": 5744,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 5732,
									"end": 5744,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5675,
									"end": 5750,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 5675,
									"end": 5750,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 5675,
									"end": 5750,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5675,
									"end": 5750,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5756,
									"end": 6025,
									"name": "tag",
									"source": 23,
									"value": "97"
								},
								{
									"begin": 5756,
									"end": 6025,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5866,
									"end": 5905,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "178"
								},
								{
									"begin": 5897,
									"end": 5904,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 5866,
									"end": 5905,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "95"
								},
								{
									"begin": 5866,
									"end": 5905,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5866,
									"end": 5905,
									"name": "tag",
									"source": 23,
									"value": "178"
								},
								{
									"begin": 5866,
									"end": 5905,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5927,
									"end": 6018,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "179"
								},
								{
									"begin": 5976,
									"end": 6017,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "180"
								},
								{
									"begin": 6000,
									"end": 6016,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 5976,
									"end": 6017,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "96"
								},
								{
									"begin": 5976,
									"end": 6017,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5976,
									"end": 6017,
									"name": "tag",
									"source": 23,
									"value": "180"
								},
								{
									"begin": 5976,
									"end": 6017,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5968,
									"end": 5974,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 5961,
									"end": 5965,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 5955,
									"end": 5966,
									"name": "SLOAD",
									"source": 23
								},
								{
									"begin": 5927,
									"end": 6018,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "92"
								},
								{
									"begin": 5927,
									"end": 6018,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 5927,
									"end": 6018,
									"name": "tag",
									"source": 23,
									"value": "179"
								},
								{
									"begin": 5927,
									"end": 6018,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 5921,
									"end": 5925,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 5914,
									"end": 6019,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 5832,
									"end": 6025,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5756,
									"end": 6025,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5756,
									"end": 6025,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5756,
									"end": 6025,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 5756,
									"end": 6025,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6031,
									"end": 6104,
									"name": "tag",
									"source": 23,
									"value": "98"
								},
								{
									"begin": 6031,
									"end": 6104,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6076,
									"end": 6079,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 6097,
									"end": 6098,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 6090,
									"end": 6098,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 6090,
									"end": 6098,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6031,
									"end": 6104,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 6031,
									"end": 6104,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6110,
									"end": 6299,
									"name": "tag",
									"source": 23,
									"value": "99"
								},
								{
									"begin": 6110,
									"end": 6299,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6187,
									"end": 6219,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "183"
								},
								{
									"begin": 6187,
									"end": 6219,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "98"
								},
								{
									"begin": 6187,
									"end": 6219,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6187,
									"end": 6219,
									"name": "tag",
									"source": 23,
									"value": "183"
								},
								{
									"begin": 6187,
									"end": 6219,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6228,
									"end": 6293,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "184"
								},
								{
									"begin": 6286,
									"end": 6292,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 6278,
									"end": 6284,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 6272,
									"end": 6276,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 6228,
									"end": 6293,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "97"
								},
								{
									"begin": 6228,
									"end": 6293,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6228,
									"end": 6293,
									"name": "tag",
									"source": 23,
									"value": "184"
								},
								{
									"begin": 6228,
									"end": 6293,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6163,
									"end": 6299,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6110,
									"end": 6299,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6110,
									"end": 6299,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6110,
									"end": 6299,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6305,
									"end": 6491,
									"name": "tag",
									"source": 23,
									"value": "100"
								},
								{
									"begin": 6305,
									"end": 6491,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "tag",
									"source": 23,
									"value": "186"
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6382,
									"end": 6385,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 6375,
									"end": 6380,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 6372,
									"end": 6386,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "188"
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 6436,
									"end": 6475,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "189"
								},
								{
									"begin": 6473,
									"end": 6474,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 6466,
									"end": 6471,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 6436,
									"end": 6475,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "99"
								},
								{
									"begin": 6436,
									"end": 6475,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6436,
									"end": 6475,
									"name": "tag",
									"source": 23,
									"value": "189"
								},
								{
									"begin": 6436,
									"end": 6475,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6409,
									"end": 6410,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 6402,
									"end": 6407,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 6398,
									"end": 6411,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 6389,
									"end": 6411,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 6389,
									"end": 6411,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "186"
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "tag",
									"source": 23,
									"value": "188"
								},
								{
									"begin": 6365,
									"end": 6485,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6305,
									"end": 6491,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6305,
									"end": 6491,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6305,
									"end": 6491,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6497,
									"end": 7040,
									"name": "tag",
									"source": 23,
									"value": "101"
								},
								{
									"begin": 6497,
									"end": 7040,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6598,
									"end": 6600,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 6593,
									"end": 6596,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 6590,
									"end": 6601,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 6587,
									"end": 7033,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 6587,
									"end": 7033,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "191"
								},
								{
									"begin": 6587,
									"end": 7033,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 6632,
									"end": 6670,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "192"
								},
								{
									"begin": 6664,
									"end": 6669,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 6632,
									"end": 6670,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "89"
								},
								{
									"begin": 6632,
									"end": 6670,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6632,
									"end": 6670,
									"name": "tag",
									"source": 23,
									"value": "192"
								},
								{
									"begin": 6632,
									"end": 6670,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6716,
									"end": 6745,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "193"
								},
								{
									"begin": 6734,
									"end": 6744,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 6716,
									"end": 6745,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "90"
								},
								{
									"begin": 6716,
									"end": 6745,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6716,
									"end": 6745,
									"name": "tag",
									"source": 23,
									"value": "193"
								},
								{
									"begin": 6716,
									"end": 6745,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6706,
									"end": 6714,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 6702,
									"end": 6746,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 6899,
									"end": 6901,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 6887,
									"end": 6897,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 6884,
									"end": 6902,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 6881,
									"end": 6930,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 6881,
									"end": 6930,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "194"
								},
								{
									"begin": 6881,
									"end": 6930,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 6920,
									"end": 6928,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 6905,
									"end": 6928,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 6905,
									"end": 6928,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6881,
									"end": 6930,
									"name": "tag",
									"source": 23,
									"value": "194"
								},
								{
									"begin": 6881,
									"end": 6930,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6943,
									"end": 7023,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "195"
								},
								{
									"begin": 6999,
									"end": 7021,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "196"
								},
								{
									"begin": 7017,
									"end": 7020,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 6999,
									"end": 7021,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "90"
								},
								{
									"begin": 6999,
									"end": 7021,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6999,
									"end": 7021,
									"name": "tag",
									"source": 23,
									"value": "196"
								},
								{
									"begin": 6999,
									"end": 7021,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6989,
									"end": 6997,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 6985,
									"end": 7022,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 6972,
									"end": 6983,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 6943,
									"end": 7023,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "100"
								},
								{
									"begin": 6943,
									"end": 7023,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 6943,
									"end": 7023,
									"name": "tag",
									"source": 23,
									"value": "195"
								},
								{
									"begin": 6943,
									"end": 7023,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6602,
									"end": 7033,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6602,
									"end": 7033,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6587,
									"end": 7033,
									"name": "tag",
									"source": 23,
									"value": "191"
								},
								{
									"begin": 6587,
									"end": 7033,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 6497,
									"end": 7040,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6497,
									"end": 7040,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6497,
									"end": 7040,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 6497,
									"end": 7040,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7046,
									"end": 7163,
									"name": "tag",
									"source": 23,
									"value": "102"
								},
								{
									"begin": 7046,
									"end": 7163,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7100,
									"end": 7108,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 7150,
									"end": 7155,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 7144,
									"end": 7148,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 7140,
									"end": 7156,
									"name": "SHR",
									"source": 23
								},
								{
									"begin": 7119,
									"end": 7156,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 7119,
									"end": 7156,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7046,
									"end": 7163,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 7046,
									"end": 7163,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 7046,
									"end": 7163,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7046,
									"end": 7163,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7046,
									"end": 7163,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7169,
									"end": 7338,
									"name": "tag",
									"source": 23,
									"value": "103"
								},
								{
									"begin": 7169,
									"end": 7338,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7213,
									"end": 7219,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 7246,
									"end": 7297,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "199"
								},
								{
									"begin": 7294,
									"end": 7295,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 7290,
									"end": 7296,
									"name": "NOT",
									"source": 23
								},
								{
									"begin": 7282,
									"end": 7287,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 7279,
									"end": 7280,
									"name": "PUSH",
									"source": 23,
									"value": "8"
								},
								{
									"begin": 7275,
									"end": 7288,
									"name": "MUL",
									"source": 23
								},
								{
									"begin": 7246,
									"end": 7297,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "102"
								},
								{
									"begin": 7246,
									"end": 7297,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7246,
									"end": 7297,
									"name": "tag",
									"source": 23,
									"value": "199"
								},
								{
									"begin": 7246,
									"end": 7297,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7242,
									"end": 7298,
									"name": "NOT",
									"source": 23
								},
								{
									"begin": 7327,
									"end": 7331,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 7321,
									"end": 7325,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 7317,
									"end": 7332,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 7307,
									"end": 7332,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 7307,
									"end": 7332,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7220,
									"end": 7338,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7169,
									"end": 7338,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 7169,
									"end": 7338,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 7169,
									"end": 7338,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7169,
									"end": 7338,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7169,
									"end": 7338,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7343,
									"end": 7638,
									"name": "tag",
									"source": 23,
									"value": "104"
								},
								{
									"begin": 7343,
									"end": 7638,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7419,
									"end": 7423,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 7565,
									"end": 7594,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "201"
								},
								{
									"begin": 7590,
									"end": 7593,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 7584,
									"end": 7588,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 7565,
									"end": 7594,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "103"
								},
								{
									"begin": 7565,
									"end": 7594,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7565,
									"end": 7594,
									"name": "tag",
									"source": 23,
									"value": "201"
								},
								{
									"begin": 7565,
									"end": 7594,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7557,
									"end": 7594,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 7557,
									"end": 7594,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7627,
									"end": 7630,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 7624,
									"end": 7625,
									"name": "PUSH",
									"source": 23,
									"value": "2"
								},
								{
									"begin": 7620,
									"end": 7631,
									"name": "MUL",
									"source": 23
								},
								{
									"begin": 7614,
									"end": 7618,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 7611,
									"end": 7632,
									"name": "OR",
									"source": 23
								},
								{
									"begin": 7603,
									"end": 7632,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 7603,
									"end": 7632,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7343,
									"end": 7638,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 7343,
									"end": 7638,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 7343,
									"end": 7638,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7343,
									"end": 7638,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7343,
									"end": 7638,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7643,
									"end": 9038,
									"name": "tag",
									"source": 23,
									"value": "9"
								},
								{
									"begin": 7643,
									"end": 9038,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7760,
									"end": 7797,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "203"
								},
								{
									"begin": 7793,
									"end": 7796,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 7760,
									"end": 7797,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "86"
								},
								{
									"begin": 7760,
									"end": 7797,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7760,
									"end": 7797,
									"name": "tag",
									"source": 23,
									"value": "203"
								},
								{
									"begin": 7760,
									"end": 7797,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7862,
									"end": 7880,
									"name": "PUSH",
									"source": 23,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7854,
									"end": 7860,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 7851,
									"end": 7881,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 7848,
									"end": 7904,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 7848,
									"end": 7904,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "204"
								},
								{
									"begin": 7848,
									"end": 7904,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 7884,
									"end": 7902,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "205"
								},
								{
									"begin": 7884,
									"end": 7902,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "75"
								},
								{
									"begin": 7884,
									"end": 7902,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7884,
									"end": 7902,
									"name": "tag",
									"source": 23,
									"value": "205"
								},
								{
									"begin": 7884,
									"end": 7902,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7848,
									"end": 7904,
									"name": "tag",
									"source": 23,
									"value": "204"
								},
								{
									"begin": 7848,
									"end": 7904,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 7928,
									"end": 7966,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "206"
								},
								{
									"begin": 7960,
									"end": 7964,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 7954,
									"end": 7965,
									"name": "SLOAD",
									"source": 23
								},
								{
									"begin": 7928,
									"end": 7966,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "88"
								},
								{
									"begin": 7928,
									"end": 7966,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 7928,
									"end": 7966,
									"name": "tag",
									"source": 23,
									"value": "206"
								},
								{
									"begin": 7928,
									"end": 7966,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8013,
									"end": 8080,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "207"
								},
								{
									"begin": 8073,
									"end": 8079,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 8065,
									"end": 8071,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 8059,
									"end": 8063,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 8013,
									"end": 8080,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "101"
								},
								{
									"begin": 8013,
									"end": 8080,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 8013,
									"end": 8080,
									"name": "tag",
									"source": 23,
									"value": "207"
								},
								{
									"begin": 8013,
									"end": 8080,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8107,
									"end": 8108,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 8131,
									"end": 8135,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 8118,
									"end": 8135,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 8118,
									"end": 8135,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8163,
									"end": 8165,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 8155,
									"end": 8161,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 8152,
									"end": 8166,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 8180,
									"end": 8181,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 8175,
									"end": 8793,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 8175,
									"end": 8793,
									"name": "EQ",
									"source": 23
								},
								{
									"begin": 8175,
									"end": 8793,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "209"
								},
								{
									"begin": 8175,
									"end": 8793,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 8837,
									"end": 8838,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 8854,
									"end": 8860,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 8851,
									"end": 8928,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 8851,
									"end": 8928,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "210"
								},
								{
									"begin": 8851,
									"end": 8928,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 8903,
									"end": 8912,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 8898,
									"end": 8901,
									"name": "DUP8",
									"source": 23
								},
								{
									"begin": 8894,
									"end": 8913,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 8888,
									"end": 8914,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 8879,
									"end": 8914,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 8879,
									"end": 8914,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8851,
									"end": 8928,
									"name": "tag",
									"source": 23,
									"value": "210"
								},
								{
									"begin": 8851,
									"end": 8928,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8954,
									"end": 9021,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "211"
								},
								{
									"begin": 9014,
									"end": 9020,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 9007,
									"end": 9012,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 8954,
									"end": 9021,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "104"
								},
								{
									"begin": 8954,
									"end": 9021,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 8954,
									"end": 9021,
									"name": "tag",
									"source": 23,
									"value": "211"
								},
								{
									"begin": 8954,
									"end": 9021,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8948,
									"end": 8952,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 8941,
									"end": 9022,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 8810,
									"end": 9032,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8145,
									"end": 9032,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "208"
								},
								{
									"begin": 8145,
									"end": 9032,
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 8175,
									"end": 8793,
									"name": "tag",
									"source": 23,
									"value": "209"
								},
								{
									"begin": 8175,
									"end": 8793,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8227,
									"end": 8231,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 8223,
									"end": 8232,
									"name": "NOT",
									"source": 23
								},
								{
									"begin": 8215,
									"end": 8221,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 8211,
									"end": 8233,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 8261,
									"end": 8298,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "212"
								},
								{
									"begin": 8293,
									"end": 8297,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 8261,
									"end": 8298,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "89"
								},
								{
									"begin": 8261,
									"end": 8298,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 8261,
									"end": 8298,
									"name": "tag",
									"source": 23,
									"value": "212"
								},
								{
									"begin": 8261,
									"end": 8298,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8320,
									"end": 8321,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "tag",
									"source": 23,
									"value": "213"
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8348,
									"end": 8355,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 8345,
									"end": 8346,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 8342,
									"end": 8356,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "215"
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 8427,
									"end": 8436,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 8422,
									"end": 8425,
									"name": "DUP10",
									"source": 23
								},
								{
									"begin": 8418,
									"end": 8437,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 8412,
									"end": 8438,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 8404,
									"end": 8410,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 8397,
									"end": 8439,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 8478,
									"end": 8479,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 8470,
									"end": 8476,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 8466,
									"end": 8480,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 8456,
									"end": 8480,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 8456,
									"end": 8480,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8525,
									"end": 8527,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 8514,
									"end": 8523,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 8510,
									"end": 8528,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 8497,
									"end": 8528,
									"name": "SWAP5",
									"source": 23
								},
								{
									"begin": 8497,
									"end": 8528,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8371,
									"end": 8375,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 8368,
									"end": 8369,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 8364,
									"end": 8376,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 8359,
									"end": 8376,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 8359,
									"end": 8376,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "213"
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "tag",
									"source": 23,
									"value": "215"
								},
								{
									"begin": 8334,
									"end": 8542,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8570,
									"end": 8576,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 8561,
									"end": 8568,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 8558,
									"end": 8577,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 8555,
									"end": 8734,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 8555,
									"end": 8734,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "216"
								},
								{
									"begin": 8555,
									"end": 8734,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 8628,
									"end": 8637,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 8623,
									"end": 8626,
									"name": "DUP10",
									"source": 23
								},
								{
									"begin": 8619,
									"end": 8638,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 8613,
									"end": 8639,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 8671,
									"end": 8719,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "217"
								},
								{
									"begin": 8713,
									"end": 8717,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 8705,
									"end": 8711,
									"name": "DUP10",
									"source": 23
								},
								{
									"begin": 8701,
									"end": 8718,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 8690,
									"end": 8699,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 8671,
									"end": 8719,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "103"
								},
								{
									"begin": 8671,
									"end": 8719,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 8671,
									"end": 8719,
									"name": "tag",
									"source": 23,
									"value": "217"
								},
								{
									"begin": 8671,
									"end": 8719,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8663,
									"end": 8669,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 8656,
									"end": 8720,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 8578,
									"end": 8734,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8555,
									"end": 8734,
									"name": "tag",
									"source": 23,
									"value": "216"
								},
								{
									"begin": 8555,
									"end": 8734,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8780,
									"end": 8781,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 8776,
									"end": 8777,
									"name": "PUSH",
									"source": 23,
									"value": "2"
								},
								{
									"begin": 8768,
									"end": 8774,
									"name": "DUP9",
									"source": 23
								},
								{
									"begin": 8764,
									"end": 8778,
									"name": "MUL",
									"source": 23
								},
								{
									"begin": 8760,
									"end": 8782,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 8754,
									"end": 8758,
									"name": "DUP9",
									"source": 23
								},
								{
									"begin": 8747,
									"end": 8783,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 8182,
									"end": 8793,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8182,
									"end": 8793,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8182,
									"end": 8793,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 8145,
									"end": 9032,
									"name": "tag",
									"source": 23,
									"value": "208"
								},
								{
									"begin": 8145,
									"end": 9032,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 8145,
									"end": 9032,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7735,
									"end": 9038,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7735,
									"end": 9038,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7735,
									"end": 9038,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7643,
									"end": 9038,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7643,
									"end": 9038,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 7643,
									"end": 9038,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 9044,
									"end": 9162,
									"name": "tag",
									"source": 23,
									"value": "105"
								},
								{
									"begin": 9044,
									"end": 9162,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 9131,
									"end": 9155,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "219"
								},
								{
									"begin": 9149,
									"end": 9154,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 9131,
									"end": 9155,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "81"
								},
								{
									"begin": 9131,
									"end": 9155,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 9131,
									"end": 9155,
									"name": "tag",
									"source": 23,
									"value": "219"
								},
								{
									"begin": 9131,
									"end": 9155,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 9126,
									"end": 9129,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 9119,
									"end": 9156,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 9044,
									"end": 9162,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9044,
									"end": 9162,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9044,
									"end": 9162,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 9168,
									"end": 9390,
									"name": "tag",
									"source": 23,
									"value": "14"
								},
								{
									"begin": 9168,
									"end": 9390,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 9261,
									"end": 9265,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 9299,
									"end": 9301,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 9288,
									"end": 9297,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 9284,
									"end": 9302,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 9276,
									"end": 9302,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 9276,
									"end": 9302,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9312,
									"end": 9383,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "221"
								},
								{
									"begin": 9380,
									"end": 9381,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 9369,
									"end": 9378,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 9365,
									"end": 9382,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 9356,
									"end": 9362,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 9312,
									"end": 9383,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "105"
								},
								{
									"begin": 9312,
									"end": 9383,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 9312,
									"end": 9383,
									"name": "tag",
									"source": 23,
									"value": "221"
								},
								{
									"begin": 9312,
									"end": 9383,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 9168,
									"end": 9390,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 9168,
									"end": 9390,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 9168,
									"end": 9390,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9168,
									"end": 9390,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9168,
									"end": 9390,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 9396,
									"end": 9565,
									"name": "tag",
									"source": 23,
									"value": "106"
								},
								{
									"begin": 9396,
									"end": 9565,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 9480,
									"end": 9491,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 9514,
									"end": 9520,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 9509,
									"end": 9512,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 9502,
									"end": 9521,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 9554,
									"end": 9558,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 9549,
									"end": 9552,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 9545,
									"end": 9559,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 9530,
									"end": 9559,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 9530,
									"end": 9559,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9396,
									"end": 9565,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 9396,
									"end": 9565,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 9396,
									"end": 9565,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9396,
									"end": 9565,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9396,
									"end": 9565,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 9571,
									"end": 9792,
									"name": "tag",
									"source": 23,
									"value": "107"
								},
								{
									"begin": 9571,
									"end": 9792,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 9711,
									"end": 9745,
									"name": "PUSH",
									"source": 23,
									"value": "4174206C65617374206F6E65207465616D206164647265737320726571756972"
								},
								{
									"begin": 9707,
									"end": 9708,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 9699,
									"end": 9705,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 9695,
									"end": 9709,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 9688,
									"end": 9746,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 9780,
									"end": 9784,
									"name": "PUSH",
									"source": 23,
									"value": "6564000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 9775,
									"end": 9777,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 9767,
									"end": 9773,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 9763,
									"end": 9778,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 9756,
									"end": 9785,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 9571,
									"end": 9792,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9571,
									"end": 9792,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 9798,
									"end": 10164,
									"name": "tag",
									"source": 23,
									"value": "108"
								},
								{
									"begin": 9798,
									"end": 10164,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 9940,
									"end": 9943,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 9961,
									"end": 10028,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "225"
								},
								{
									"begin": 10025,
									"end": 10027,
									"name": "PUSH",
									"source": 23,
									"value": "22"
								},
								{
									"begin": 10020,
									"end": 10023,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 9961,
									"end": 10028,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "106"
								},
								{
									"begin": 9961,
									"end": 10028,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 9961,
									"end": 10028,
									"name": "tag",
									"source": 23,
									"value": "225"
								},
								{
									"begin": 9961,
									"end": 10028,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 9954,
									"end": 10028,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 9954,
									"end": 10028,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10037,
									"end": 10130,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "226"
								},
								{
									"begin": 10126,
									"end": 10129,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 10037,
									"end": 10130,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "107"
								},
								{
									"begin": 10037,
									"end": 10130,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 10037,
									"end": 10130,
									"name": "tag",
									"source": 23,
									"value": "226"
								},
								{
									"begin": 10037,
									"end": 10130,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10155,
									"end": 10157,
									"name": "PUSH",
									"source": 23,
									"value": "40"
								},
								{
									"begin": 10150,
									"end": 10153,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 10146,
									"end": 10158,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 10139,
									"end": 10158,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 10139,
									"end": 10158,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9798,
									"end": 10164,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 9798,
									"end": 10164,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 9798,
									"end": 10164,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 9798,
									"end": 10164,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 10170,
									"end": 10589,
									"name": "tag",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 10170,
									"end": 10589,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10336,
									"end": 10340,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 10374,
									"end": 10376,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 10363,
									"end": 10372,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 10359,
									"end": 10377,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 10351,
									"end": 10377,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 10351,
									"end": 10377,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10423,
									"end": 10432,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 10417,
									"end": 10421,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 10413,
									"end": 10433,
									"name": "SUB",
									"source": 23
								},
								{
									"begin": 10409,
									"end": 10410,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 10398,
									"end": 10407,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 10394,
									"end": 10411,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 10387,
									"end": 10434,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 10451,
									"end": 10582,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "228"
								},
								{
									"begin": 10577,
									"end": 10581,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 10451,
									"end": 10582,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "108"
								},
								{
									"begin": 10451,
									"end": 10582,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 10451,
									"end": 10582,
									"name": "tag",
									"source": 23,
									"value": "228"
								},
								{
									"begin": 10451,
									"end": 10582,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10443,
									"end": 10582,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 10443,
									"end": 10582,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10170,
									"end": 10589,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 10170,
									"end": 10589,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 10170,
									"end": 10589,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10170,
									"end": 10589,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 10595,
									"end": 10775,
									"name": "tag",
									"source": 23,
									"value": "109"
								},
								{
									"begin": 10595,
									"end": 10775,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10643,
									"end": 10720,
									"name": "PUSH",
									"source": 23,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 10640,
									"end": 10641,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 10633,
									"end": 10721,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 10740,
									"end": 10744,
									"name": "PUSH",
									"source": 23,
									"value": "11"
								},
								{
									"begin": 10737,
									"end": 10738,
									"name": "PUSH",
									"source": 23,
									"value": "4"
								},
								{
									"begin": 10730,
									"end": 10745,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 10764,
									"end": 10768,
									"name": "PUSH",
									"source": 23,
									"value": "24"
								},
								{
									"begin": 10761,
									"end": 10762,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 10754,
									"end": 10769,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 10781,
									"end": 11191,
									"name": "tag",
									"source": 23,
									"value": "25"
								},
								{
									"begin": 10781,
									"end": 11191,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10821,
									"end": 10828,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 10844,
									"end": 10864,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "231"
								},
								{
									"begin": 10862,
									"end": 10863,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 10844,
									"end": 10864,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 10844,
									"end": 10864,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 10844,
									"end": 10864,
									"name": "tag",
									"source": 23,
									"value": "231"
								},
								{
									"begin": 10844,
									"end": 10864,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10839,
									"end": 10864,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 10839,
									"end": 10864,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10878,
									"end": 10898,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "232"
								},
								{
									"begin": 10896,
									"end": 10897,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 10878,
									"end": 10898,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 10878,
									"end": 10898,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 10878,
									"end": 10898,
									"name": "tag",
									"source": 23,
									"value": "232"
								},
								{
									"begin": 10878,
									"end": 10898,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10873,
									"end": 10898,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 10873,
									"end": 10898,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10933,
									"end": 10934,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 10930,
									"end": 10931,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 10926,
									"end": 10935,
									"name": "MUL",
									"source": 23
								},
								{
									"begin": 10955,
									"end": 10985,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "233"
								},
								{
									"begin": 10973,
									"end": 10984,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 10955,
									"end": 10985,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 10955,
									"end": 10985,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 10955,
									"end": 10985,
									"name": "tag",
									"source": 23,
									"value": "233"
								},
								{
									"begin": 10955,
									"end": 10985,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10944,
									"end": 10985,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 10944,
									"end": 10985,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11134,
									"end": 11135,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11125,
									"end": 11132,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11121,
									"end": 11136,
									"name": "DIV",
									"source": 23
								},
								{
									"begin": 11118,
									"end": 11119,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 11115,
									"end": 11137,
									"name": "EQ",
									"source": 23
								},
								{
									"begin": 11095,
									"end": 11096,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 11088,
									"end": 11097,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 11068,
									"end": 11151,
									"name": "OR",
									"source": 23
								},
								{
									"begin": 11045,
									"end": 11184,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "234"
								},
								{
									"begin": 11045,
									"end": 11184,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 11164,
									"end": 11182,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "235"
								},
								{
									"begin": 11164,
									"end": 11182,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "109"
								},
								{
									"begin": 11164,
									"end": 11182,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11164,
									"end": 11182,
									"name": "tag",
									"source": 23,
									"value": "235"
								},
								{
									"begin": 11164,
									"end": 11182,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11045,
									"end": 11184,
									"name": "tag",
									"source": 23,
									"value": "234"
								},
								{
									"begin": 11045,
									"end": 11184,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 10829,
									"end": 11191,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10781,
									"end": 11191,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 10781,
									"end": 11191,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 10781,
									"end": 11191,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10781,
									"end": 11191,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 10781,
									"end": 11191,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11197,
									"end": 11377,
									"name": "tag",
									"source": 23,
									"value": "110"
								},
								{
									"begin": 11197,
									"end": 11377,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11245,
									"end": 11322,
									"name": "PUSH",
									"source": 23,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 11242,
									"end": 11243,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 11235,
									"end": 11323,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 11342,
									"end": 11346,
									"name": "PUSH",
									"source": 23,
									"value": "12"
								},
								{
									"begin": 11339,
									"end": 11340,
									"name": "PUSH",
									"source": 23,
									"value": "4"
								},
								{
									"begin": 11332,
									"end": 11347,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 11366,
									"end": 11370,
									"name": "PUSH",
									"source": 23,
									"value": "24"
								},
								{
									"begin": 11363,
									"end": 11364,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 11356,
									"end": 11371,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 11383,
									"end": 11568,
									"name": "tag",
									"source": 23,
									"value": "27"
								},
								{
									"begin": 11383,
									"end": 11568,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11423,
									"end": 11424,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 11440,
									"end": 11460,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "238"
								},
								{
									"begin": 11458,
									"end": 11459,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11440,
									"end": 11460,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 11440,
									"end": 11460,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11440,
									"end": 11460,
									"name": "tag",
									"source": 23,
									"value": "238"
								},
								{
									"begin": 11440,
									"end": 11460,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11435,
									"end": 11460,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 11435,
									"end": 11460,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11474,
									"end": 11494,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "239"
								},
								{
									"begin": 11492,
									"end": 11493,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 11474,
									"end": 11494,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 11474,
									"end": 11494,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11474,
									"end": 11494,
									"name": "tag",
									"source": 23,
									"value": "239"
								},
								{
									"begin": 11474,
									"end": 11494,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11469,
									"end": 11494,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 11469,
									"end": 11494,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11513,
									"end": 11514,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11503,
									"end": 11538,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "240"
								},
								{
									"begin": 11503,
									"end": 11538,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 11518,
									"end": 11536,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "241"
								},
								{
									"begin": 11518,
									"end": 11536,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "110"
								},
								{
									"begin": 11518,
									"end": 11536,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11518,
									"end": 11536,
									"name": "tag",
									"source": 23,
									"value": "241"
								},
								{
									"begin": 11518,
									"end": 11536,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11503,
									"end": 11538,
									"name": "tag",
									"source": 23,
									"value": "240"
								},
								{
									"begin": 11503,
									"end": 11538,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11560,
									"end": 11561,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11557,
									"end": 11558,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11553,
									"end": 11562,
									"name": "DIV",
									"source": 23
								},
								{
									"begin": 11548,
									"end": 11562,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 11548,
									"end": 11562,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11383,
									"end": 11568,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 11383,
									"end": 11568,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 11383,
									"end": 11568,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11383,
									"end": 11568,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11383,
									"end": 11568,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11574,
									"end": 11754,
									"name": "tag",
									"source": 23,
									"value": "35"
								},
								{
									"begin": 11574,
									"end": 11754,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11622,
									"end": 11699,
									"name": "PUSH",
									"source": 23,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 11619,
									"end": 11620,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 11612,
									"end": 11700,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 11719,
									"end": 11723,
									"name": "PUSH",
									"source": 23,
									"value": "32"
								},
								{
									"begin": 11716,
									"end": 11717,
									"name": "PUSH",
									"source": 23,
									"value": "4"
								},
								{
									"begin": 11709,
									"end": 11724,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 11743,
									"end": 11747,
									"name": "PUSH",
									"source": 23,
									"value": "24"
								},
								{
									"begin": 11740,
									"end": 11741,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 11733,
									"end": 11748,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 11760,
									"end": 11951,
									"name": "tag",
									"source": 23,
									"value": "44"
								},
								{
									"begin": 11760,
									"end": 11951,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11800,
									"end": 11803,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 11819,
									"end": 11839,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "244"
								},
								{
									"begin": 11837,
									"end": 11838,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11819,
									"end": 11839,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 11819,
									"end": 11839,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11819,
									"end": 11839,
									"name": "tag",
									"source": 23,
									"value": "244"
								},
								{
									"begin": 11819,
									"end": 11839,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11814,
									"end": 11839,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 11814,
									"end": 11839,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11853,
									"end": 11873,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "245"
								},
								{
									"begin": 11871,
									"end": 11872,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 11853,
									"end": 11873,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 11853,
									"end": 11873,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11853,
									"end": 11873,
									"name": "tag",
									"source": 23,
									"value": "245"
								},
								{
									"begin": 11853,
									"end": 11873,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11848,
									"end": 11873,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 11848,
									"end": 11873,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11896,
									"end": 11897,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11893,
									"end": 11894,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11889,
									"end": 11898,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 11882,
									"end": 11898,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 11882,
									"end": 11898,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11917,
									"end": 11920,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 11914,
									"end": 11915,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 11911,
									"end": 11921,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 11908,
									"end": 11944,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 11908,
									"end": 11944,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "246"
								},
								{
									"begin": 11908,
									"end": 11944,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 11924,
									"end": 11942,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "247"
								},
								{
									"begin": 11924,
									"end": 11942,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "109"
								},
								{
									"begin": 11924,
									"end": 11942,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11924,
									"end": 11942,
									"name": "tag",
									"source": 23,
									"value": "247"
								},
								{
									"begin": 11924,
									"end": 11942,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11908,
									"end": 11944,
									"name": "tag",
									"source": 23,
									"value": "246"
								},
								{
									"begin": 11908,
									"end": 11944,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 11760,
									"end": 11951,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 11760,
									"end": 11951,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 11760,
									"end": 11951,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11760,
									"end": 11951,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11760,
									"end": 11951,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 11957,
									"end": 12075,
									"name": "tag",
									"source": 23,
									"value": "111"
								},
								{
									"begin": 11957,
									"end": 12075,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 12044,
									"end": 12068,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "249"
								},
								{
									"begin": 12062,
									"end": 12067,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 12044,
									"end": 12068,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "93"
								},
								{
									"begin": 12044,
									"end": 12068,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 12044,
									"end": 12068,
									"name": "tag",
									"source": 23,
									"value": "249"
								},
								{
									"begin": 12044,
									"end": 12068,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 12039,
									"end": 12042,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 12032,
									"end": 12069,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 11957,
									"end": 12075,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11957,
									"end": 12075,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 11957,
									"end": 12075,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 12081,
									"end": 12523,
									"name": "tag",
									"source": 23,
									"value": "58"
								},
								{
									"begin": 12081,
									"end": 12523,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 12230,
									"end": 12234,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 12268,
									"end": 12270,
									"name": "PUSH",
									"source": 23,
									"value": "60"
								},
								{
									"begin": 12257,
									"end": 12266,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 12253,
									"end": 12271,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 12245,
									"end": 12271,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 12245,
									"end": 12271,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 12281,
									"end": 12352,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "251"
								},
								{
									"begin": 12349,
									"end": 12350,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 12338,
									"end": 12347,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 12334,
									"end": 12351,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 12325,
									"end": 12331,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 12281,
									"end": 12352,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "105"
								},
								{
									"begin": 12281,
									"end": 12352,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 12281,
									"end": 12352,
									"name": "tag",
									"source": 23,
									"value": "251"
								},
								{
									"begin": 12281,
									"end": 12352,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 12362,
									"end": 12434,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "252"
								},
								{
									"begin": 12430,
									"end": 12432,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 12419,
									"end": 12428,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 12415,
									"end": 12433,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 12406,
									"end": 12412,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 12362,
									"end": 12434,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "111"
								},
								{
									"begin": 12362,
									"end": 12434,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 12362,
									"end": 12434,
									"name": "tag",
									"source": 23,
									"value": "252"
								},
								{
									"begin": 12362,
									"end": 12434,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 12444,
									"end": 12516,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "253"
								},
								{
									"begin": 12512,
									"end": 12514,
									"name": "PUSH",
									"source": 23,
									"value": "40"
								},
								{
									"begin": 12501,
									"end": 12510,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 12497,
									"end": 12515,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 12488,
									"end": 12494,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 12444,
									"end": 12516,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "111"
								},
								{
									"begin": 12444,
									"end": 12516,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 12444,
									"end": 12516,
									"name": "tag",
									"source": 23,
									"value": "253"
								},
								{
									"begin": 12444,
									"end": 12516,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 12081,
									"end": 12523,
									"name": "SWAP5",
									"source": 23
								},
								{
									"begin": 12081,
									"end": 12523,
									"name": "SWAP4",
									"source": 23
								},
								{
									"begin": 12081,
									"end": 12523,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 12081,
									"end": 12523,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 12081,
									"end": 12523,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 12081,
									"end": 12523,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 12081,
									"end": 12523,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 12529,
									"end": 12751,
									"name": "tag",
									"source": 23,
									"value": "62"
								},
								{
									"begin": 12529,
									"end": 12751,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 12622,
									"end": 12626,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 12660,
									"end": 12662,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 12649,
									"end": 12658,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 12645,
									"end": 12663,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 12637,
									"end": 12663,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 12637,
									"end": 12663,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 12673,
									"end": 12744,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "255"
								},
								{
									"begin": 12741,
									"end": 12742,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 12730,
									"end": 12739,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 12726,
									"end": 12743,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 12717,
									"end": 12723,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 12673,
									"end": 12744,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "111"
								},
								{
									"begin": 12673,
									"end": 12744,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 12673,
									"end": 12744,
									"name": "tag",
									"source": 23,
									"value": "255"
								},
								{
									"begin": 12673,
									"end": 12744,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 12529,
									"end": 12751,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 12529,
									"end": 12751,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 12529,
									"end": 12751,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 12529,
									"end": 12751,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 12529,
									"end": 12751,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "tag",
									"source": 4,
									"value": "45"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 489,
									"end": 2357,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122013a47c2a630e2a262f5a64ff4cd65fe42dd9cd2ac1b308af7bb4b5c211f56b4b64736f6c634300081e0033",
									".code": [
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "76AE9B2D"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "BDD3D825"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "DD62ED3E"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "EB91D37E"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "F2FDE38B"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "76AE9B2D"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "8DA5CB5B"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "902D55A5"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "95D89B41"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "313CE567"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "313CE567"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "35928998"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "70A08231"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "715018A6"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "tag",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "6FDDE03"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "95EA7B3"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "18160DDD"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "23B872DD"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 489,
											"end": 2357,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1760,
											"end": 1849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 1760,
											"end": 1849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 3902,
											"end": 4088,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "tag",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 3902,
											"end": 4088,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 3902,
											"end": 4088,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 2803,
											"end": 2900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "tag",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2803,
											"end": 2900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "tag",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 1878,
											"end": 2064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1878,
											"end": 2064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "tag",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 1878,
											"end": 2064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "tag",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 2688,
											"end": 2770,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "tag",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 2688,
											"end": 2770,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 690,
											"end": 745,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 690,
											"end": 745,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "tag",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 690,
											"end": 745,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "tag",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 2933,
											"end": 3049,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "tag",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2933,
											"end": 3049,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "tag",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2933,
											"end": 3049,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "tag",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 812,
											"end": 842,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "57"
										},
										{
											"begin": 812,
											"end": 842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "tag",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "58"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 812,
											"end": 842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "tag",
											"source": 4,
											"value": "58"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 615,
											"end": 670,
											"name": "tag",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 615,
											"end": 670,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "tag",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 615,
											"end": 670,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "tag",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1962,
											"end": 2055,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 1962,
											"end": 2055,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "tag",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "tag",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 1716,
											"end": 1870,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "tag",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 1716,
											"end": 1870,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "tag",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 1716,
											"end": 1870,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "tag",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 849,
											"end": 875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "75"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 849,
											"end": 875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "tag",
											"source": 4,
											"value": "75"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 3455,
											"end": 3595,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "tag",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 3455,
											"end": 3595,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "tag",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 3455,
											"end": 3595,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "tag",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "tag",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 2072,
											"end": 2354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "tag",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 2072,
											"end": 2354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "tag",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1805,
											"end": 1818,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1837,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 1830,
											"end": 1842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 1830,
											"end": 1842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1830,
											"end": 1842,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1760,
											"end": 1849,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3975,
											"end": 3979,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3991,
											"end": 4004,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4007,
											"end": 4019,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 4007,
											"end": 4017,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 4007,
											"end": 4019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4007,
											"end": 4019,
											"name": "tag",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 4007,
											"end": 4019,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3991,
											"end": 4019,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3991,
											"end": 4019,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4029,
											"end": 4060,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 4038,
											"end": 4043,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4045,
											"end": 4052,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4054,
											"end": 4059,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4029,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 4029,
											"end": 4060,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4029,
											"end": 4060,
											"name": "tag",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 4029,
											"end": 4060,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4077,
											"end": 4081,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4070,
											"end": 4081,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4070,
											"end": 4081,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4070,
											"end": 4081,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 4088,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "tag",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2855,
											"end": 2862,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2881,
											"end": 2893,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2881,
											"end": 2893,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2874,
											"end": 2893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2874,
											"end": 2893,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2803,
											"end": 2900,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1987,
											"end": 1991,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1646,
											"end": 1661,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1646,
											"end": 1661,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1627,
											"end": 1642,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 1627,
											"end": 1661,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1627,
											"end": 1661,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "101"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "103"
										},
										{
											"begin": 1619,
											"end": 1688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "tag",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "tag",
											"source": 4,
											"value": "101"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2011,
											"end": 2056,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 2030,
											"end": 2036,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2038,
											"end": 2047,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2049,
											"end": 2055,
											"modifierDepth": 1,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2011,
											"end": 2029,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 2011,
											"end": 2056,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2011,
											"end": 2056,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 2011,
											"end": 2056,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2004,
											"end": 2056,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2004,
											"end": 2056,
											"modifierDepth": 1,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1878,
											"end": 2064,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "tag",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2737,
											"end": 2742,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 2754,
											"end": 2763,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2754,
											"end": 2763,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2688,
											"end": 2770,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 690,
											"end": 745,
											"name": "tag",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 733,
											"end": 745,
											"name": "PUSH",
											"source": 4,
											"value": "5A39A80"
										},
										{
											"begin": 690,
											"end": 745,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 690,
											"end": 745,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2998,
											"end": 3005,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3024,
											"end": 3033,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3034,
											"end": 3041,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3024,
											"end": 3042,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3042,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3017,
											"end": 3042,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 3049,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "113"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "113"
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 812,
											"end": 842,
											"name": "tag",
											"source": 4,
											"value": "57"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 812,
											"end": 842,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 812,
											"end": 842,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1703,
											"end": 1716,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1703,
											"end": 1716,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 615,
											"end": 670,
											"name": "tag",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 654,
											"end": 670,
											"name": "PUSH",
											"source": 4,
											"value": "59682F00"
										},
										{
											"begin": 615,
											"end": 670,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 615,
											"end": 670,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "tag",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2009,
											"end": 2022,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2041,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 2034,
											"end": 2048,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "tag",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 2034,
											"end": 2048,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "tag",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "tag",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "tag",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2034,
											"end": 2048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1962,
											"end": 2055,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1805,
											"end": 1809,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1646,
											"end": 1661,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1646,
											"end": 1661,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1627,
											"end": 1642,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 1627,
											"end": 1661,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1627,
											"end": 1661,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "103"
										},
										{
											"begin": 1619,
											"end": 1688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "tag",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "tag",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 1619,
											"end": 1688,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1829,
											"end": 1862,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 1844,
											"end": 1853,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1855,
											"end": 1861,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1829,
											"end": 1843,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 1829,
											"end": 1862,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1829,
											"end": 1862,
											"modifierDepth": 1,
											"name": "tag",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 1829,
											"end": 1862,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1822,
											"end": 1862,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1822,
											"end": 1862,
											"modifierDepth": 1,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1716,
											"end": 1870,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "tag",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 849,
											"end": 875,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 849,
											"end": 875,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3535,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3561,
											"end": 3572,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3573,
											"end": 3578,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3561,
											"end": 3579,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3580,
											"end": 3587,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3561,
											"end": 3588,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3554,
											"end": 3588,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3554,
											"end": 3588,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3455,
											"end": 3595,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "tag",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2120,
											"end": 2133,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2146,
											"end": 2165,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "PUSH",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2183,
											"end": 2194,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2146,
											"end": 2195,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2146,
											"end": 2195,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2207,
											"end": 2227,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2243,
											"end": 2247,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2253,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2243,
											"end": 2253,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2253,
											"name": "PUSH",
											"source": 4,
											"value": "3850C7BD"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 2243,
											"end": 2255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 2243,
											"end": 2255,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2206,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2206,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2206,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2206,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2206,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2206,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2206,
											"end": 2255,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2206,
											"end": 2255,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2323,
											"end": 2329,
											"name": "PUSH",
											"source": 4,
											"value": "1000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2306,
											"end": 2318,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2298,
											"end": 2319,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2298,
											"end": 2319,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2282,
											"end": 2294,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2295,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2274,
											"end": 2295,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 2274,
											"end": 2319,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2319,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 2274,
											"end": 2319,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2319,
											"name": "tag",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 2274,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 2274,
											"end": 2330,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2330,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 2274,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2274,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 2274,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2266,
											"end": 2330,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2266,
											"end": 2330,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2135,
											"end": 2354,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2135,
											"end": 2354,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2072,
											"end": 2354,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2647,
											"end": 2648,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2627,
											"end": 2635,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "141"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "142"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 2672,
											"end": 2703,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "142"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "141"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "143"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "143"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 656,
											"end": 752,
											"name": "tag",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 709,
											"end": 716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 728,
											"end": 745,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 728,
											"end": 745,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 656,
											"end": 752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 656,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8630,
											"end": 8758,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 8630,
											"end": 8758,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8714,
											"end": 8751,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 8723,
											"end": 8728,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8730,
											"end": 8737,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8739,
											"end": 8744,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8746,
											"end": 8750,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 8714,
											"end": 8722,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 8714,
											"end": 8751,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8714,
											"end": 8751,
											"name": "tag",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 8714,
											"end": 8751,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8630,
											"end": 8758,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8630,
											"end": 8758,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8630,
											"end": 8758,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8630,
											"end": 8758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4680,
											"end": 4924,
											"name": "tag",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 4680,
											"end": 4924,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4767,
											"end": 4771,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4783,
											"end": 4798,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4801,
											"end": 4813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 4801,
											"end": 4811,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 4801,
											"end": 4813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4801,
											"end": 4813,
											"name": "tag",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 4801,
											"end": 4813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4783,
											"end": 4813,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4783,
											"end": 4813,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4823,
											"end": 4860,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 4839,
											"end": 4843,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4845,
											"end": 4852,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4854,
											"end": 4859,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4823,
											"end": 4838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 4823,
											"end": 4860,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4823,
											"end": 4860,
											"name": "tag",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 4823,
											"end": 4860,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4870,
											"end": 4896,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 4880,
											"end": 4884,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4886,
											"end": 4888,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4890,
											"end": 4895,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4870,
											"end": 4879,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 4870,
											"end": 4896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4870,
											"end": 4896,
											"name": "tag",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 4870,
											"end": 4896,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4913,
											"end": 4917,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4906,
											"end": 4917,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4906,
											"end": 4917,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4906,
											"end": 4917,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4680,
											"end": 4924,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 4680,
											"end": 4924,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4680,
											"end": 4924,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4680,
											"end": 4924,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4680,
											"end": 4924,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4680,
											"end": 4924,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "155"
										},
										{
											"begin": 1866,
											"end": 1876,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 1866,
											"end": 1878,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "tag",
											"source": 5,
											"value": "155"
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "156"
										},
										{
											"begin": 1855,
											"end": 1860,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1855,
											"end": 1862,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "tag",
											"source": 5,
											"value": "156"
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "158"
										},
										{
											"begin": 1928,
											"end": 1938,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 1928,
											"end": 1940,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "tag",
											"source": 5,
											"value": "158"
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 5,
											"value": "118CDAA700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "159"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 1901,
											"end": 1941,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "tag",
											"source": 5,
											"value": "159"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "tag",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1796,
											"end": 1958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2985,
											"end": 3010,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2985,
											"end": 3010,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3029,
											"end": 3037,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3026,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3020,
											"end": 3026,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3083,
											"end": 3091,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3073,
											"end": 3081,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 5,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3244,
											"end": 3422,
											"name": "tag",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 3244,
											"end": 3422,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3313,
											"end": 3317,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3329,
											"end": 3342,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3345,
											"end": 3357,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 3345,
											"end": 3355,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 3345,
											"end": 3357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3345,
											"end": 3357,
											"name": "tag",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 3345,
											"end": 3357,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3329,
											"end": 3357,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3329,
											"end": 3357,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3367,
											"end": 3394,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 3377,
											"end": 3382,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3384,
											"end": 3386,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3388,
											"end": 3393,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3367,
											"end": 3376,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 3367,
											"end": 3394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3367,
											"end": 3394,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 3367,
											"end": 3394,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3411,
											"end": 3415,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3404,
											"end": 3415,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3404,
											"end": 3415,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3404,
											"end": 3415,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3244,
											"end": 3422,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3244,
											"end": 3422,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3244,
											"end": 3422,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3244,
											"end": 3422,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3244,
											"end": 3422,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9605,
											"end": 10037,
											"name": "tag",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 9605,
											"end": 10037,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9734,
											"end": 9735,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9717,
											"end": 9736,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9717,
											"end": 9736,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9717,
											"end": 9722,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9717,
											"end": 9736,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9717,
											"end": 9736,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9717,
											"end": 9736,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9713,
											"end": 9802,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 9713,
											"end": 9802,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 9788,
											"end": 9789,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "PUSH",
											"source": 7,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "166"
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 9759,
											"end": 9791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "tag",
											"source": 7,
											"value": "166"
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9759,
											"end": 9791,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 9713,
											"end": 9802,
											"name": "tag",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 9713,
											"end": 9802,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9834,
											"end": 9835,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9815,
											"end": 9836,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9815,
											"end": 9836,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9815,
											"end": 9822,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9815,
											"end": 9836,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9815,
											"end": 9836,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9815,
											"end": 9836,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9811,
											"end": 9901,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "167"
										},
										{
											"begin": 9811,
											"end": 9901,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 9887,
											"end": 9888,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "PUSH",
											"source": 7,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 9859,
											"end": 9890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "tag",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9890,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 9811,
											"end": 9901,
											"name": "tag",
											"source": 7,
											"value": "167"
										},
										{
											"begin": 9811,
											"end": 9901,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9940,
											"end": 9945,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9921,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9922,
											"end": 9927,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9910,
											"end": 9928,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9929,
											"end": 9936,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9910,
											"end": 9937,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9945,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9945,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9945,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 9910,
											"end": 9945,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9959,
											"end": 9968,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9955,
											"end": 10031,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 9955,
											"end": 10031,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 9955,
											"end": 10031,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10005,
											"end": 10012,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9998,
											"end": 10003,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "PUSH",
											"source": 7,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10014,
											"end": 10019,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "170"
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 9989,
											"end": 10020,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "tag",
											"source": 7,
											"value": "170"
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9989,
											"end": 10020,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 9955,
											"end": 10031,
											"name": "tag",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 9955,
											"end": 10031,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9605,
											"end": 10037,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9605,
											"end": 10037,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9605,
											"end": 10037,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9605,
											"end": 10037,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9605,
											"end": 10037,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 10319,
											"end": 10795,
											"name": "tag",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 10319,
											"end": 10795,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10418,
											"end": 10442,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10445,
											"end": 10470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 10455,
											"end": 10460,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10462,
											"end": 10469,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10445,
											"end": 10454,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 10445,
											"end": 10470,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 10445,
											"end": 10470,
											"name": "tag",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 10445,
											"end": 10470,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10418,
											"end": 10470,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10418,
											"end": 10470,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10503,
											"end": 10520,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10484,
											"end": 10500,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10484,
											"end": 10520,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 10480,
											"end": 10789,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10480,
											"end": 10789,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 10480,
											"end": 10789,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10559,
											"end": 10564,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10540,
											"end": 10556,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10540,
											"end": 10564,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 10536,
											"end": 10666,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10536,
											"end": 10666,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 10536,
											"end": 10666,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10618,
											"end": 10625,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10627,
											"end": 10643,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10645,
											"end": 10650,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "PUSH",
											"source": 7,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 10591,
											"end": 10651,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "tag",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10591,
											"end": 10651,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 10536,
											"end": 10666,
											"name": "tag",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 10536,
											"end": 10666,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10707,
											"end": 10764,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 10716,
											"end": 10721,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10723,
											"end": 10730,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10751,
											"end": 10756,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10732,
											"end": 10748,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10732,
											"end": 10756,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 10758,
											"end": 10763,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10707,
											"end": 10715,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 10707,
											"end": 10764,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 10707,
											"end": 10764,
											"name": "tag",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 10707,
											"end": 10764,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10480,
											"end": 10789,
											"name": "tag",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 10480,
											"end": 10789,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10408,
											"end": 10795,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10319,
											"end": 10795,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10319,
											"end": 10795,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10319,
											"end": 10795,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10319,
											"end": 10795,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5297,
											"end": 5597,
											"name": "tag",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 5297,
											"end": 5597,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5396,
											"end": 5397,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5380,
											"end": 5384,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5380,
											"end": 5398,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5376,
											"end": 5462,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 5376,
											"end": 5462,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5448,
											"end": 5449,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "PUSH",
											"source": 7,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 5421,
											"end": 5451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "tag",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5421,
											"end": 5451,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5376,
											"end": 5462,
											"name": "tag",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 5376,
											"end": 5462,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5489,
											"end": 5490,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5475,
											"end": 5491,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5475,
											"end": 5491,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5475,
											"end": 5477,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5475,
											"end": 5491,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5475,
											"end": 5491,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5475,
											"end": 5491,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5471,
											"end": 5557,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "181"
										},
										{
											"begin": 5471,
											"end": 5557,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5543,
											"end": 5544,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "PUSH",
											"source": 7,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "182"
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 5514,
											"end": 5546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "tag",
											"source": 7,
											"value": "182"
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5546,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5471,
											"end": 5557,
											"name": "tag",
											"source": 7,
											"value": "181"
										},
										{
											"begin": 5471,
											"end": 5557,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5566,
											"end": 5590,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "183"
										},
										{
											"begin": 5574,
											"end": 5578,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5580,
											"end": 5582,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5584,
											"end": 5589,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5566,
											"end": 5573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 5566,
											"end": 5590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5566,
											"end": 5590,
											"name": "tag",
											"source": 7,
											"value": "183"
										},
										{
											"begin": 5566,
											"end": 5590,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5297,
											"end": 5597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5297,
											"end": 5597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5297,
											"end": 5597,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5297,
											"end": 5597,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5912,
											"end": 7019,
											"name": "tag",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 5912,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6017,
											"end": 6018,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6001,
											"end": 6019,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6001,
											"end": 6019,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6001,
											"end": 6005,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6001,
											"end": 6019,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6001,
											"end": 6019,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6001,
											"end": 6019,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5997,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 5997,
											"end": 6537,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6153,
											"end": 6158,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 6137,
											"end": 6158,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "tag",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 6137,
											"end": 6158,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5997,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 5997,
											"end": 6537,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5997,
											"end": 6537,
											"name": "tag",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 5997,
											"end": 6537,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6189,
											"end": 6208,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6211,
											"end": 6220,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6221,
											"end": 6225,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6211,
											"end": 6226,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6189,
											"end": 6226,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6189,
											"end": 6226,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6258,
											"end": 6263,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6244,
											"end": 6255,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6244,
											"end": 6263,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 6240,
											"end": 6355,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6240,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 6240,
											"end": 6355,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6315,
											"end": 6319,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6321,
											"end": 6332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6334,
											"end": 6339,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "PUSH",
											"source": 7,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 6290,
											"end": 6340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "tag",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6290,
											"end": 6340,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6240,
											"end": 6355,
											"name": "tag",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 6240,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6507,
											"end": 6512,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6493,
											"end": 6504,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6493,
											"end": 6512,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6484,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6485,
											"end": 6489,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6475,
											"end": 6490,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6512,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6512,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6512,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 6475,
											"end": 6512,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6175,
											"end": 6537,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5997,
											"end": 6537,
											"name": "tag",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 5997,
											"end": 6537,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6565,
											"end": 6566,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6551,
											"end": 6567,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6551,
											"end": 6567,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6551,
											"end": 6553,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6551,
											"end": 6567,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6551,
											"end": 6567,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6551,
											"end": 6567,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6547,
											"end": 6972,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 6547,
											"end": 6972,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6730,
											"end": 6735,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6726,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 6714,
											"end": 6726,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 6714,
											"end": 6735,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6547,
											"end": 6972,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 6547,
											"end": 6972,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6547,
											"end": 6972,
											"name": "tag",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 6547,
											"end": 6972,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6942,
											"end": 6947,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6934,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6935,
											"end": 6937,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6938,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 6925,
											"end": 6947,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6547,
											"end": 6972,
											"name": "tag",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 6547,
											"end": 6972,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7002,
											"end": 7004,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6996,
											"end": 7000,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "PUSH",
											"source": 7,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7006,
											"end": 7011,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 6987,
											"end": 7012,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "tag",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6987,
											"end": 7012,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 5912,
											"end": 7019,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5912,
											"end": 7019,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5912,
											"end": 7019,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5912,
											"end": 7019,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 23,
											"value": "195"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7,
											"end": 106,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 23,
											"value": "196"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 112,
											"end": 281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 287,
											"end": 426,
											"name": "tag",
											"source": 23,
											"value": "197"
										},
										{
											"begin": 287,
											"end": 426,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 376,
											"end": 382,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 371,
											"end": 374,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 366,
											"end": 369,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 360,
											"end": 383,
											"name": "MCOPY",
											"source": 23
										},
										{
											"begin": 417,
											"end": 418,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 408,
											"end": 414,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 403,
											"end": 406,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 399,
											"end": 415,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 392,
											"end": 419,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 287,
											"end": 426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 432,
											"end": 534,
											"name": "tag",
											"source": 23,
											"value": "198"
										},
										{
											"begin": 432,
											"end": 534,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 473,
											"end": 479,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 524,
											"end": 526,
											"name": "PUSH",
											"source": 23,
											"value": "1F"
										},
										{
											"begin": 520,
											"end": 527,
											"name": "NOT",
											"source": 23
										},
										{
											"begin": 515,
											"end": 517,
											"name": "PUSH",
											"source": 23,
											"value": "1F"
										},
										{
											"begin": 508,
											"end": 513,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 504,
											"end": 518,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 500,
											"end": 528,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 490,
											"end": 528,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 490,
											"end": 528,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 432,
											"end": 534,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 432,
											"end": 534,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 540,
											"end": 917,
											"name": "tag",
											"source": 23,
											"value": "199"
										},
										{
											"begin": 540,
											"end": 917,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 628,
											"end": 631,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "239"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "195"
										},
										{
											"begin": 656,
											"end": 695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 656,
											"end": 695,
											"name": "tag",
											"source": 23,
											"value": "239"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "240"
										},
										{
											"begin": 775,
											"end": 781,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 770,
											"end": 773,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "196"
										},
										{
											"begin": 711,
											"end": 782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 711,
											"end": 782,
											"name": "tag",
											"source": 23,
											"value": "240"
										},
										{
											"begin": 711,
											"end": 782,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 704,
											"end": 782,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 704,
											"end": 782,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "241"
										},
										{
											"begin": 849,
											"end": 855,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 844,
											"end": 847,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 837,
											"end": 841,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 830,
											"end": 835,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 826,
											"end": 842,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "197"
										},
										{
											"begin": 791,
											"end": 856,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 791,
											"end": 856,
											"name": "tag",
											"source": 23,
											"value": "241"
										},
										{
											"begin": 791,
											"end": 856,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "242"
										},
										{
											"begin": 903,
											"end": 909,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "198"
										},
										{
											"begin": 881,
											"end": 910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 881,
											"end": 910,
											"name": "tag",
											"source": 23,
											"value": "242"
										},
										{
											"begin": 881,
											"end": 910,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 876,
											"end": 879,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 872,
											"end": 911,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 865,
											"end": 911,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 865,
											"end": 911,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 632,
											"end": 917,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 540,
											"end": 917,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "tag",
											"source": 23,
											"value": "26"
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1036,
											"end": 1040,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1076,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1063,
											"end": 1072,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1059,
											"end": 1077,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1123,
											"end": 1132,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1117,
											"end": 1121,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1113,
											"end": 1133,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 1109,
											"end": 1110,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1098,
											"end": 1107,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 1094,
											"end": 1111,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1087,
											"end": 1134,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "244"
										},
										{
											"begin": 1224,
											"end": 1228,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1215,
											"end": 1221,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "199"
										},
										{
											"begin": 1151,
											"end": 1229,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "tag",
											"source": 23,
											"value": "244"
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 923,
											"end": 1236,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1323,
											"end": 1440,
											"name": "tag",
											"source": 23,
											"value": "201"
										},
										{
											"begin": 1323,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1432,
											"end": 1433,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1429,
											"end": 1430,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1422,
											"end": 1434,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "tag",
											"source": 23,
											"value": "203"
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1606,
											"end": 1613,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1646,
											"end": 1688,
											"name": "PUSH",
											"source": 23,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1639,
											"end": 1644,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1635,
											"end": 1689,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 1624,
											"end": 1689,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1624,
											"end": 1689,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1569,
											"end": 1695,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "tag",
											"source": 23,
											"value": "204"
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1738,
											"end": 1745,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "250"
										},
										{
											"begin": 1785,
											"end": 1790,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "203"
										},
										{
											"begin": 1767,
											"end": 1791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "tag",
											"source": 23,
											"value": "250"
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1756,
											"end": 1791,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1756,
											"end": 1791,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1701,
											"end": 1797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "tag",
											"source": 23,
											"value": "205"
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "252"
										},
										{
											"begin": 1894,
											"end": 1899,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "204"
										},
										{
											"begin": 1876,
											"end": 1900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "tag",
											"source": 23,
											"value": "252"
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1869,
											"end": 1874,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1866,
											"end": 1901,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "253"
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1912,
											"end": 1913,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1905,
											"end": 1917,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "tag",
											"source": 23,
											"value": "253"
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1803,
											"end": 1925,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "tag",
											"source": 23,
											"value": "206"
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1977,
											"end": 1982,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2015,
											"end": 2021,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2002,
											"end": 2022,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 1993,
											"end": 2022,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1993,
											"end": 2022,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "255"
										},
										{
											"begin": 2058,
											"end": 2063,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "205"
										},
										{
											"begin": 2031,
											"end": 2064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "tag",
											"source": 23,
											"value": "255"
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1931,
											"end": 2070,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "tag",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2113,
											"end": 2120,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2142,
											"end": 2147,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2131,
											"end": 2147,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2131,
											"end": 2147,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2076,
											"end": 2153,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "tag",
											"source": 23,
											"value": "208"
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "258"
										},
										{
											"begin": 2250,
											"end": 2255,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 2232,
											"end": 2256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "tag",
											"source": 23,
											"value": "258"
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2225,
											"end": 2230,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2222,
											"end": 2257,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "259"
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 2271,
											"end": 2272,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2268,
											"end": 2269,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2261,
											"end": 2273,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "tag",
											"source": 23,
											"value": "259"
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2159,
											"end": 2281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "tag",
											"source": 23,
											"value": "209"
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2333,
											"end": 2338,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2371,
											"end": 2377,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2358,
											"end": 2378,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 2349,
											"end": 2378,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2349,
											"end": 2378,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "261"
										},
										{
											"begin": 2414,
											"end": 2419,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "208"
										},
										{
											"begin": 2387,
											"end": 2420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "tag",
											"source": 23,
											"value": "261"
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2287,
											"end": 2426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "tag",
											"source": 23,
											"value": "29"
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2500,
											"end": 2506,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2508,
											"end": 2514,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2557,
											"end": 2559,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 2545,
											"end": 2554,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 2536,
											"end": 2543,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 2532,
											"end": 2555,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 2528,
											"end": 2560,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "263"
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "264"
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "201"
										},
										{
											"begin": 2563,
											"end": 2642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "tag",
											"source": 23,
											"value": "264"
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "tag",
											"source": 23,
											"value": "263"
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2683,
											"end": 2684,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "265"
										},
										{
											"begin": 2753,
											"end": 2760,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 2744,
											"end": 2750,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 2733,
											"end": 2742,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 2729,
											"end": 2751,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "206"
										},
										{
											"begin": 2708,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "tag",
											"source": 23,
											"value": "265"
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2698,
											"end": 2761,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 2698,
											"end": 2761,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2654,
											"end": 2771,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2810,
											"end": 2812,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "266"
										},
										{
											"begin": 2881,
											"end": 2888,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 2872,
											"end": 2878,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 2861,
											"end": 2870,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 2857,
											"end": 2879,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "209"
										},
										{
											"begin": 2836,
											"end": 2889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "tag",
											"source": 23,
											"value": "266"
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2826,
											"end": 2889,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2826,
											"end": 2889,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2781,
											"end": 2899,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2432,
											"end": 2906,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "tag",
											"source": 23,
											"value": "210"
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2946,
											"end": 2953,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2989,
											"end": 2994,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2982,
											"end": 2995,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 2975,
											"end": 2996,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 2964,
											"end": 2996,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2964,
											"end": 2996,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2912,
											"end": 3002,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "tag",
											"source": 23,
											"value": "211"
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "269"
										},
										{
											"begin": 3104,
											"end": 3109,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "210"
										},
										{
											"begin": 3089,
											"end": 3110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "tag",
											"source": 23,
											"value": "269"
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3084,
											"end": 3087,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3077,
											"end": 3111,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3008,
											"end": 3117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "tag",
											"source": 23,
											"value": "32"
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3210,
											"end": 3214,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3248,
											"end": 3250,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 3237,
											"end": 3246,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3233,
											"end": 3251,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3225,
											"end": 3251,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3225,
											"end": 3251,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "271"
										},
										{
											"begin": 3323,
											"end": 3324,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3312,
											"end": 3321,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 3308,
											"end": 3325,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3299,
											"end": 3305,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "211"
										},
										{
											"begin": 3261,
											"end": 3326,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "tag",
											"source": 23,
											"value": "271"
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3123,
											"end": 3333,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "tag",
											"source": 23,
											"value": "212"
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "273"
										},
										{
											"begin": 3444,
											"end": 3449,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 3426,
											"end": 3450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "tag",
											"source": 23,
											"value": "273"
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3421,
											"end": 3424,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3414,
											"end": 3451,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3339,
											"end": 3457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "tag",
											"source": 23,
											"value": "36"
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3556,
											"end": 3560,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3594,
											"end": 3596,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 3583,
											"end": 3592,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3579,
											"end": 3597,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3571,
											"end": 3597,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3571,
											"end": 3597,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "275"
										},
										{
											"begin": 3675,
											"end": 3676,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3664,
											"end": 3673,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 3660,
											"end": 3677,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3651,
											"end": 3657,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "212"
										},
										{
											"begin": 3607,
											"end": 3678,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "tag",
											"source": 23,
											"value": "275"
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3463,
											"end": 3685,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "tag",
											"source": 23,
											"value": "39"
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3768,
											"end": 3774,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3776,
											"end": 3782,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3784,
											"end": 3790,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3833,
											"end": 3835,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 3821,
											"end": 3830,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 3812,
											"end": 3819,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 3808,
											"end": 3831,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 3804,
											"end": 3836,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "277"
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "278"
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "201"
										},
										{
											"begin": 3839,
											"end": 3918,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "tag",
											"source": 23,
											"value": "278"
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "tag",
											"source": 23,
											"value": "277"
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3959,
											"end": 3960,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "279"
										},
										{
											"begin": 4029,
											"end": 4036,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 4020,
											"end": 4026,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4009,
											"end": 4018,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 4005,
											"end": 4027,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "206"
										},
										{
											"begin": 3984,
											"end": 4037,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "tag",
											"source": 23,
											"value": "279"
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3974,
											"end": 4037,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 3974,
											"end": 4037,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3930,
											"end": 4047,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4086,
											"end": 4088,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "280"
										},
										{
											"begin": 4157,
											"end": 4164,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 4148,
											"end": 4154,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4137,
											"end": 4146,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 4133,
											"end": 4155,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "206"
										},
										{
											"begin": 4112,
											"end": 4165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "tag",
											"source": 23,
											"value": "280"
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4102,
											"end": 4165,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 4102,
											"end": 4165,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4057,
											"end": 4175,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4214,
											"end": 4216,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "281"
										},
										{
											"begin": 4285,
											"end": 4292,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 4276,
											"end": 4282,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4265,
											"end": 4274,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 4261,
											"end": 4283,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "209"
										},
										{
											"begin": 4240,
											"end": 4293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "tag",
											"source": 23,
											"value": "281"
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4230,
											"end": 4293,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4230,
											"end": 4293,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4185,
											"end": 4303,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 3691,
											"end": 4310,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "tag",
											"source": 23,
											"value": "213"
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4395,
											"name": "PUSH",
											"source": 23,
											"value": "FF"
										},
										{
											"begin": 4384,
											"end": 4389,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4380,
											"end": 4396,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 4369,
											"end": 4396,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4369,
											"end": 4396,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4316,
											"end": 4402,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "tag",
											"source": 23,
											"value": "214"
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "284"
										},
										{
											"begin": 4507,
											"end": 4512,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "213"
										},
										{
											"begin": 4491,
											"end": 4513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "tag",
											"source": 23,
											"value": "284"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4486,
											"end": 4489,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4479,
											"end": 4514,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4408,
											"end": 4520,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "tag",
											"source": 23,
											"value": "45"
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4615,
											"end": 4619,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4653,
											"end": 4655,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 4642,
											"end": 4651,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4630,
											"end": 4656,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4630,
											"end": 4656,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "286"
										},
										{
											"begin": 4730,
											"end": 4731,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4719,
											"end": 4728,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 4715,
											"end": 4732,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4706,
											"end": 4712,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "214"
										},
										{
											"begin": 4666,
											"end": 4733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "tag",
											"source": 23,
											"value": "286"
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4526,
											"end": 4740,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "tag",
											"source": 23,
											"value": "51"
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4805,
											"end": 4811,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4854,
											"end": 4856,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 4842,
											"end": 4851,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4833,
											"end": 4840,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 4829,
											"end": 4852,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 4825,
											"end": 4857,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "288"
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "289"
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "201"
										},
										{
											"begin": 4860,
											"end": 4939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "tag",
											"source": 23,
											"value": "289"
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "tag",
											"source": 23,
											"value": "288"
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4980,
											"end": 4981,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "290"
										},
										{
											"begin": 5050,
											"end": 5057,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 5041,
											"end": 5047,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5030,
											"end": 5039,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 5026,
											"end": 5048,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "206"
										},
										{
											"begin": 5005,
											"end": 5058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "tag",
											"source": 23,
											"value": "290"
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4995,
											"end": 5058,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4995,
											"end": 5058,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4951,
											"end": 5068,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4746,
											"end": 5075,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "tag",
											"source": 23,
											"value": "215"
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "292"
										},
										{
											"begin": 5186,
											"end": 5191,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "204"
										},
										{
											"begin": 5168,
											"end": 5192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "tag",
											"source": 23,
											"value": "292"
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5163,
											"end": 5166,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5156,
											"end": 5193,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5081,
											"end": 5199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "tag",
											"source": 23,
											"value": "62"
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5298,
											"end": 5302,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5336,
											"end": 5338,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 5325,
											"end": 5334,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5313,
											"end": 5339,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 5313,
											"end": 5339,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "294"
										},
										{
											"begin": 5417,
											"end": 5418,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5406,
											"end": 5415,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 5402,
											"end": 5419,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5393,
											"end": 5399,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "215"
										},
										{
											"begin": 5349,
											"end": 5420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "tag",
											"source": 23,
											"value": "294"
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5205,
											"end": 5427,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5433,
											"end": 5907,
											"name": "tag",
											"source": 23,
											"value": "78"
										},
										{
											"begin": 5433,
											"end": 5907,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5501,
											"end": 5507,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5509,
											"end": 5515,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5558,
											"end": 5560,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 5546,
											"end": 5555,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 5537,
											"end": 5544,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 5533,
											"end": 5556,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 5529,
											"end": 5561,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "296"
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 5564,
											"end": 5643,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "297"
										},
										{
											"begin": 5564,
											"end": 5643,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "201"
										},
										{
											"begin": 5564,
											"end": 5643,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5564,
											"end": 5643,
											"name": "tag",
											"source": 23,
											"value": "297"
										},
										{
											"begin": 5564,
											"end": 5643,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "tag",
											"source": 23,
											"value": "296"
										},
										{
											"begin": 5526,
											"end": 5645,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5684,
											"end": 5685,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5709,
											"end": 5762,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "298"
										},
										{
											"begin": 5754,
											"end": 5761,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 5745,
											"end": 5751,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5734,
											"end": 5743,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 5730,
											"end": 5752,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5709,
											"end": 5762,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "206"
										},
										{
											"begin": 5709,
											"end": 5762,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5709,
											"end": 5762,
											"name": "tag",
											"source": 23,
											"value": "298"
										},
										{
											"begin": 5709,
											"end": 5762,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5699,
											"end": 5762,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 5699,
											"end": 5762,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5655,
											"end": 5772,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5811,
											"end": 5813,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 5837,
											"end": 5890,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "299"
										},
										{
											"begin": 5882,
											"end": 5889,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 5873,
											"end": 5879,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5862,
											"end": 5871,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 5858,
											"end": 5880,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5837,
											"end": 5890,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "206"
										},
										{
											"begin": 5837,
											"end": 5890,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5837,
											"end": 5890,
											"name": "tag",
											"source": 23,
											"value": "299"
										},
										{
											"begin": 5837,
											"end": 5890,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5827,
											"end": 5890,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 5827,
											"end": 5890,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5782,
											"end": 5900,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5433,
											"end": 5907,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 5433,
											"end": 5907,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5433,
											"end": 5907,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 5433,
											"end": 5907,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 5433,
											"end": 5907,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5433,
											"end": 5907,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5913,
											"end": 6093,
											"name": "tag",
											"source": 23,
											"value": "216"
										},
										{
											"begin": 5913,
											"end": 6093,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5961,
											"end": 6038,
											"name": "PUSH",
											"source": 23,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5958,
											"end": 5959,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5951,
											"end": 6039,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 6058,
											"end": 6062,
											"name": "PUSH",
											"source": 23,
											"value": "22"
										},
										{
											"begin": 6055,
											"end": 6056,
											"name": "PUSH",
											"source": 23,
											"value": "4"
										},
										{
											"begin": 6048,
											"end": 6063,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 6082,
											"end": 6086,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 6079,
											"end": 6080,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 6072,
											"end": 6087,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 6099,
											"end": 6419,
											"name": "tag",
											"source": 23,
											"value": "89"
										},
										{
											"begin": 6099,
											"end": 6419,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6143,
											"end": 6149,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 6180,
											"end": 6181,
											"name": "PUSH",
											"source": 23,
											"value": "2"
										},
										{
											"begin": 6174,
											"end": 6178,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6170,
											"end": 6182,
											"name": "DIV",
											"source": 23
										},
										{
											"begin": 6160,
											"end": 6182,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6160,
											"end": 6182,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6227,
											"end": 6228,
											"name": "PUSH",
											"source": 23,
											"value": "1"
										},
										{
											"begin": 6221,
											"end": 6225,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6217,
											"end": 6229,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 6248,
											"end": 6266,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 6238,
											"end": 6319,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "302"
										},
										{
											"begin": 6238,
											"end": 6319,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 6304,
											"end": 6308,
											"name": "PUSH",
											"source": 23,
											"value": "7F"
										},
										{
											"begin": 6296,
											"end": 6302,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6292,
											"end": 6309,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 6282,
											"end": 6309,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 6282,
											"end": 6309,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6238,
											"end": 6319,
											"name": "tag",
											"source": 23,
											"value": "302"
										},
										{
											"begin": 6238,
											"end": 6319,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6366,
											"end": 6368,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 6358,
											"end": 6364,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6355,
											"end": 6369,
											"name": "LT",
											"source": 23
										},
										{
											"begin": 6335,
											"end": 6353,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 6332,
											"end": 6370,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 6329,
											"end": 6413,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "303"
										},
										{
											"begin": 6329,
											"end": 6413,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 6385,
											"end": 6403,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "304"
										},
										{
											"begin": 6385,
											"end": 6403,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "216"
										},
										{
											"begin": 6385,
											"end": 6403,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6385,
											"end": 6403,
											"name": "tag",
											"source": 23,
											"value": "304"
										},
										{
											"begin": 6385,
											"end": 6403,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6329,
											"end": 6413,
											"name": "tag",
											"source": 23,
											"value": "303"
										},
										{
											"begin": 6329,
											"end": 6413,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6150,
											"end": 6419,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6099,
											"end": 6419,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 6099,
											"end": 6419,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6099,
											"end": 6419,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6099,
											"end": 6419,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6425,
											"end": 6597,
											"name": "tag",
											"source": 23,
											"value": "217"
										},
										{
											"begin": 6425,
											"end": 6597,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6565,
											"end": 6589,
											"name": "PUSH",
											"source": 23,
											"value": "5465616D20746F6B656E7320617265206C6F636B656400000000000000000000"
										},
										{
											"begin": 6561,
											"end": 6562,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 6553,
											"end": 6559,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6549,
											"end": 6563,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 6542,
											"end": 6590,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 6425,
											"end": 6597,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6425,
											"end": 6597,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6603,
											"end": 6969,
											"name": "tag",
											"source": 23,
											"value": "218"
										},
										{
											"begin": 6603,
											"end": 6969,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6745,
											"end": 6748,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 6766,
											"end": 6833,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "307"
										},
										{
											"begin": 6830,
											"end": 6832,
											"name": "PUSH",
											"source": 23,
											"value": "16"
										},
										{
											"begin": 6825,
											"end": 6828,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 6766,
											"end": 6833,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "196"
										},
										{
											"begin": 6766,
											"end": 6833,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6766,
											"end": 6833,
											"name": "tag",
											"source": 23,
											"value": "307"
										},
										{
											"begin": 6766,
											"end": 6833,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6759,
											"end": 6833,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 6759,
											"end": 6833,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6842,
											"end": 6935,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "308"
										},
										{
											"begin": 6931,
											"end": 6934,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6842,
											"end": 6935,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "217"
										},
										{
											"begin": 6842,
											"end": 6935,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6842,
											"end": 6935,
											"name": "tag",
											"source": 23,
											"value": "308"
										},
										{
											"begin": 6842,
											"end": 6935,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6960,
											"end": 6962,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 6955,
											"end": 6958,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6951,
											"end": 6963,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 6944,
											"end": 6963,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6944,
											"end": 6963,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6603,
											"end": 6969,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 6603,
											"end": 6969,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6603,
											"end": 6969,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6603,
											"end": 6969,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6975,
											"end": 7394,
											"name": "tag",
											"source": 23,
											"value": "103"
										},
										{
											"begin": 6975,
											"end": 7394,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7141,
											"end": 7145,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7179,
											"end": 7181,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 7168,
											"end": 7177,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 7164,
											"end": 7182,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7156,
											"end": 7182,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7156,
											"end": 7182,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7228,
											"end": 7237,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7222,
											"end": 7226,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7218,
											"end": 7238,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 7214,
											"end": 7215,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7203,
											"end": 7212,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 7199,
											"end": 7216,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7192,
											"end": 7239,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7256,
											"end": 7387,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "310"
										},
										{
											"begin": 7382,
											"end": 7386,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7256,
											"end": 7387,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "218"
										},
										{
											"begin": 7256,
											"end": 7387,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7256,
											"end": 7387,
											"name": "tag",
											"source": 23,
											"value": "310"
										},
										{
											"begin": 7256,
											"end": 7387,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7248,
											"end": 7387,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7248,
											"end": 7387,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6975,
											"end": 7394,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 6975,
											"end": 7394,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6975,
											"end": 7394,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6975,
											"end": 7394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7400,
											"end": 7522,
											"name": "tag",
											"source": 23,
											"value": "219"
										},
										{
											"begin": 7400,
											"end": 7522,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7473,
											"end": 7497,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "312"
										},
										{
											"begin": 7491,
											"end": 7496,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7473,
											"end": 7497,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "203"
										},
										{
											"begin": 7473,
											"end": 7497,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7473,
											"end": 7497,
											"name": "tag",
											"source": 23,
											"value": "312"
										},
										{
											"begin": 7473,
											"end": 7497,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7466,
											"end": 7471,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7463,
											"end": 7498,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 7453,
											"end": 7516,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "313"
										},
										{
											"begin": 7453,
											"end": 7516,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 7512,
											"end": 7513,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7509,
											"end": 7510,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7502,
											"end": 7514,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 7453,
											"end": 7516,
											"name": "tag",
											"source": 23,
											"value": "313"
										},
										{
											"begin": 7453,
											"end": 7516,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7400,
											"end": 7522,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7400,
											"end": 7522,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7528,
											"end": 7671,
											"name": "tag",
											"source": 23,
											"value": "220"
										},
										{
											"begin": 7528,
											"end": 7671,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7585,
											"end": 7590,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7616,
											"end": 7622,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7610,
											"end": 7623,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 7601,
											"end": 7623,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7601,
											"end": 7623,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7632,
											"end": 7665,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "315"
										},
										{
											"begin": 7659,
											"end": 7664,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7632,
											"end": 7665,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "219"
										},
										{
											"begin": 7632,
											"end": 7665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7632,
											"end": 7665,
											"name": "tag",
											"source": 23,
											"value": "315"
										},
										{
											"begin": 7632,
											"end": 7665,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7528,
											"end": 7671,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 7528,
											"end": 7671,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 7528,
											"end": 7671,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7528,
											"end": 7671,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7528,
											"end": 7671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7677,
											"end": 7767,
											"name": "tag",
											"source": 23,
											"value": "221"
										},
										{
											"begin": 7677,
											"end": 7767,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7712,
											"end": 7719,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7755,
											"end": 7760,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7752,
											"end": 7753,
											"name": "PUSH",
											"source": 23,
											"value": "2"
										},
										{
											"begin": 7741,
											"end": 7761,
											"name": "SIGNEXTEND",
											"source": 23
										},
										{
											"begin": 7730,
											"end": 7761,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7730,
											"end": 7761,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7677,
											"end": 7767,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 7677,
											"end": 7767,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7677,
											"end": 7767,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7677,
											"end": 7767,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7773,
											"end": 7891,
											"name": "tag",
											"source": 23,
											"value": "222"
										},
										{
											"begin": 7773,
											"end": 7891,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7844,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "318"
										},
										{
											"begin": 7860,
											"end": 7865,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7844,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "221"
										},
										{
											"begin": 7844,
											"end": 7866,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7844,
											"end": 7866,
											"name": "tag",
											"source": 23,
											"value": "318"
										},
										{
											"begin": 7844,
											"end": 7866,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7837,
											"end": 7842,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7834,
											"end": 7867,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 7824,
											"end": 7885,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "319"
										},
										{
											"begin": 7824,
											"end": 7885,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 7881,
											"end": 7882,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7878,
											"end": 7879,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7871,
											"end": 7883,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 7824,
											"end": 7885,
											"name": "tag",
											"source": 23,
											"value": "319"
										},
										{
											"begin": 7824,
											"end": 7885,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7773,
											"end": 7891,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7773,
											"end": 7891,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7897,
											"end": 8036,
											"name": "tag",
											"source": 23,
											"value": "223"
										},
										{
											"begin": 7897,
											"end": 8036,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7952,
											"end": 7957,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7983,
											"end": 7989,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7977,
											"end": 7990,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 7968,
											"end": 7990,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7968,
											"end": 7990,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7999,
											"end": 8030,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "321"
										},
										{
											"begin": 8024,
											"end": 8029,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7999,
											"end": 8030,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "222"
										},
										{
											"begin": 7999,
											"end": 8030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7999,
											"end": 8030,
											"name": "tag",
											"source": 23,
											"value": "321"
										},
										{
											"begin": 7999,
											"end": 8030,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7897,
											"end": 8036,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 7897,
											"end": 8036,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 7897,
											"end": 8036,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7897,
											"end": 8036,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 7897,
											"end": 8036,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8042,
											"end": 8131,
											"name": "tag",
											"source": 23,
											"value": "224"
										},
										{
											"begin": 8042,
											"end": 8131,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8078,
											"end": 8085,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8118,
											"end": 8124,
											"name": "PUSH",
											"source": 23,
											"value": "FFFF"
										},
										{
											"begin": 8111,
											"end": 8116,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 8107,
											"end": 8125,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 8096,
											"end": 8125,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 8096,
											"end": 8125,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8042,
											"end": 8131,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 8042,
											"end": 8131,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 8042,
											"end": 8131,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8042,
											"end": 8131,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8137,
											"end": 8257,
											"name": "tag",
											"source": 23,
											"value": "225"
										},
										{
											"begin": 8137,
											"end": 8257,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8209,
											"end": 8232,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "324"
										},
										{
											"begin": 8226,
											"end": 8231,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8209,
											"end": 8232,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "224"
										},
										{
											"begin": 8209,
											"end": 8232,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8209,
											"end": 8232,
											"name": "tag",
											"source": 23,
											"value": "324"
										},
										{
											"begin": 8209,
											"end": 8232,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8202,
											"end": 8207,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8199,
											"end": 8233,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 8189,
											"end": 8251,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "325"
										},
										{
											"begin": 8189,
											"end": 8251,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 8247,
											"end": 8248,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8244,
											"end": 8245,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8237,
											"end": 8249,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 8189,
											"end": 8251,
											"name": "tag",
											"source": 23,
											"value": "325"
										},
										{
											"begin": 8189,
											"end": 8251,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8137,
											"end": 8257,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8137,
											"end": 8257,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8263,
											"end": 8404,
											"name": "tag",
											"source": 23,
											"value": "226"
										},
										{
											"begin": 8263,
											"end": 8404,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8319,
											"end": 8324,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8350,
											"end": 8356,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8344,
											"end": 8357,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 8335,
											"end": 8357,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 8335,
											"end": 8357,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8366,
											"end": 8398,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "327"
										},
										{
											"begin": 8392,
											"end": 8397,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8366,
											"end": 8398,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "225"
										},
										{
											"begin": 8366,
											"end": 8398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8366,
											"end": 8398,
											"name": "tag",
											"source": 23,
											"value": "327"
										},
										{
											"begin": 8366,
											"end": 8398,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8263,
											"end": 8404,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 8263,
											"end": 8404,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 8263,
											"end": 8404,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8263,
											"end": 8404,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8263,
											"end": 8404,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8410,
											"end": 8528,
											"name": "tag",
											"source": 23,
											"value": "227"
										},
										{
											"begin": 8410,
											"end": 8528,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8481,
											"end": 8503,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "329"
										},
										{
											"begin": 8497,
											"end": 8502,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8481,
											"end": 8503,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "213"
										},
										{
											"begin": 8481,
											"end": 8503,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8481,
											"end": 8503,
											"name": "tag",
											"source": 23,
											"value": "329"
										},
										{
											"begin": 8481,
											"end": 8503,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8474,
											"end": 8479,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8471,
											"end": 8504,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 8461,
											"end": 8522,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "330"
										},
										{
											"begin": 8461,
											"end": 8522,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 8518,
											"end": 8519,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8515,
											"end": 8516,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8508,
											"end": 8520,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 8461,
											"end": 8522,
											"name": "tag",
											"source": 23,
											"value": "330"
										},
										{
											"begin": 8461,
											"end": 8522,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8410,
											"end": 8528,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8410,
											"end": 8528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8534,
											"end": 8673,
											"name": "tag",
											"source": 23,
											"value": "228"
										},
										{
											"begin": 8534,
											"end": 8673,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8589,
											"end": 8594,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8620,
											"end": 8626,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8614,
											"end": 8627,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 8605,
											"end": 8627,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 8605,
											"end": 8627,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8636,
											"end": 8667,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "332"
										},
										{
											"begin": 8661,
											"end": 8666,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8636,
											"end": 8667,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "227"
										},
										{
											"begin": 8636,
											"end": 8667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8636,
											"end": 8667,
											"name": "tag",
											"source": 23,
											"value": "332"
										},
										{
											"begin": 8636,
											"end": 8667,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8534,
											"end": 8673,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 8534,
											"end": 8673,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 8534,
											"end": 8673,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8534,
											"end": 8673,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8534,
											"end": 8673,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8679,
											"end": 8795,
											"name": "tag",
											"source": 23,
											"value": "229"
										},
										{
											"begin": 8679,
											"end": 8795,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8749,
											"end": 8770,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "334"
										},
										{
											"begin": 8764,
											"end": 8769,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8749,
											"end": 8770,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "210"
										},
										{
											"begin": 8749,
											"end": 8770,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8749,
											"end": 8770,
											"name": "tag",
											"source": 23,
											"value": "334"
										},
										{
											"begin": 8749,
											"end": 8770,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8742,
											"end": 8747,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8739,
											"end": 8771,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 8729,
											"end": 8789,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "335"
										},
										{
											"begin": 8729,
											"end": 8789,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 8785,
											"end": 8786,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8782,
											"end": 8783,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8775,
											"end": 8787,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 8729,
											"end": 8789,
											"name": "tag",
											"source": 23,
											"value": "335"
										},
										{
											"begin": 8729,
											"end": 8789,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8679,
											"end": 8795,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8679,
											"end": 8795,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8801,
											"end": 8938,
											"name": "tag",
											"source": 23,
											"value": "230"
										},
										{
											"begin": 8801,
											"end": 8938,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8855,
											"end": 8860,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8886,
											"end": 8892,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8880,
											"end": 8893,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 8871,
											"end": 8893,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 8871,
											"end": 8893,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8902,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "337"
										},
										{
											"begin": 8926,
											"end": 8931,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8902,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "229"
										},
										{
											"begin": 8902,
											"end": 8932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8902,
											"end": 8932,
											"name": "tag",
											"source": 23,
											"value": "337"
										},
										{
											"begin": 8902,
											"end": 8932,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8801,
											"end": 8938,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 8801,
											"end": 8938,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 8801,
											"end": 8938,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8801,
											"end": 8938,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8801,
											"end": 8938,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "tag",
											"source": 23,
											"value": "133"
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9058,
											"end": 9064,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 9066,
											"end": 9072,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 9074,
											"end": 9080,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 9082,
											"end": 9088,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 9090,
											"end": 9096,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 9098,
											"end": 9104,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 9106,
											"end": 9112,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 9155,
											"end": 9158,
											"name": "PUSH",
											"source": 23,
											"value": "E0"
										},
										{
											"begin": 9143,
											"end": 9152,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 9134,
											"end": 9141,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 9130,
											"end": 9153,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 9126,
											"end": 9159,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 9123,
											"end": 9243,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 9123,
											"end": 9243,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "339"
										},
										{
											"begin": 9123,
											"end": 9243,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 9162,
											"end": 9241,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "340"
										},
										{
											"begin": 9162,
											"end": 9241,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "201"
										},
										{
											"begin": 9162,
											"end": 9241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 9162,
											"end": 9241,
											"name": "tag",
											"source": 23,
											"value": "340"
										},
										{
											"begin": 9162,
											"end": 9241,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9123,
											"end": 9243,
											"name": "tag",
											"source": 23,
											"value": "339"
										},
										{
											"begin": 9123,
											"end": 9243,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9282,
											"end": 9283,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 9307,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "341"
										},
										{
											"begin": 9363,
											"end": 9370,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 9354,
											"end": 9360,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9343,
											"end": 9352,
											"name": "DUP12",
											"source": 23
										},
										{
											"begin": 9339,
											"end": 9361,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9307,
											"end": 9371,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "220"
										},
										{
											"begin": 9307,
											"end": 9371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 9307,
											"end": 9371,
											"name": "tag",
											"source": 23,
											"value": "341"
										},
										{
											"begin": 9307,
											"end": 9371,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9297,
											"end": 9371,
											"name": "SWAP8",
											"source": 23
										},
										{
											"begin": 9297,
											"end": 9371,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9253,
											"end": 9381,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9420,
											"end": 9422,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 9446,
											"end": 9508,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "342"
										},
										{
											"begin": 9500,
											"end": 9507,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 9491,
											"end": 9497,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9480,
											"end": 9489,
											"name": "DUP12",
											"source": 23
										},
										{
											"begin": 9476,
											"end": 9498,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9446,
											"end": 9508,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "223"
										},
										{
											"begin": 9446,
											"end": 9508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 9446,
											"end": 9508,
											"name": "tag",
											"source": 23,
											"value": "342"
										},
										{
											"begin": 9446,
											"end": 9508,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9436,
											"end": 9508,
											"name": "SWAP7",
											"source": 23
										},
										{
											"begin": 9436,
											"end": 9508,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9391,
											"end": 9518,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9557,
											"end": 9559,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 9583,
											"end": 9646,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "343"
										},
										{
											"begin": 9638,
											"end": 9645,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 9629,
											"end": 9635,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9618,
											"end": 9627,
											"name": "DUP12",
											"source": 23
										},
										{
											"begin": 9614,
											"end": 9636,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9583,
											"end": 9646,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "226"
										},
										{
											"begin": 9583,
											"end": 9646,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 9583,
											"end": 9646,
											"name": "tag",
											"source": 23,
											"value": "343"
										},
										{
											"begin": 9583,
											"end": 9646,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9573,
											"end": 9646,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 9573,
											"end": 9646,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9528,
											"end": 9656,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9695,
											"end": 9697,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 9721,
											"end": 9784,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "344"
										},
										{
											"begin": 9776,
											"end": 9783,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 9767,
											"end": 9773,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9756,
											"end": 9765,
											"name": "DUP12",
											"source": 23
										},
										{
											"begin": 9752,
											"end": 9774,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9721,
											"end": 9784,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "226"
										},
										{
											"begin": 9721,
											"end": 9784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 9721,
											"end": 9784,
											"name": "tag",
											"source": 23,
											"value": "344"
										},
										{
											"begin": 9721,
											"end": 9784,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9711,
											"end": 9784,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 9711,
											"end": 9784,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9666,
											"end": 9794,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9833,
											"end": 9836,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 9860,
											"end": 9923,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "345"
										},
										{
											"begin": 9915,
											"end": 9922,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 9906,
											"end": 9912,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9895,
											"end": 9904,
											"name": "DUP12",
											"source": 23
										},
										{
											"begin": 9891,
											"end": 9913,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9860,
											"end": 9923,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "226"
										},
										{
											"begin": 9860,
											"end": 9923,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 9860,
											"end": 9923,
											"name": "tag",
											"source": 23,
											"value": "345"
										},
										{
											"begin": 9860,
											"end": 9923,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9850,
											"end": 9923,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 9850,
											"end": 9923,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9804,
											"end": 9933,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9972,
											"end": 9975,
											"name": "PUSH",
											"source": 23,
											"value": "A0"
										},
										{
											"begin": 9999,
											"end": 10061,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "346"
										},
										{
											"begin": 10053,
											"end": 10060,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 10044,
											"end": 10050,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10033,
											"end": 10042,
											"name": "DUP12",
											"source": 23
										},
										{
											"begin": 10029,
											"end": 10051,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9999,
											"end": 10061,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "228"
										},
										{
											"begin": 9999,
											"end": 10061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 9999,
											"end": 10061,
											"name": "tag",
											"source": 23,
											"value": "346"
										},
										{
											"begin": 9999,
											"end": 10061,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 9989,
											"end": 10061,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 9989,
											"end": 10061,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 9943,
											"end": 10071,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 10110,
											"end": 10113,
											"name": "PUSH",
											"source": 23,
											"value": "C0"
										},
										{
											"begin": 10137,
											"end": 10198,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "347"
										},
										{
											"begin": 10190,
											"end": 10197,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 10181,
											"end": 10187,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10170,
											"end": 10179,
											"name": "DUP12",
											"source": 23
										},
										{
											"begin": 10166,
											"end": 10188,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10137,
											"end": 10198,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "230"
										},
										{
											"begin": 10137,
											"end": 10198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10137,
											"end": 10198,
											"name": "tag",
											"source": 23,
											"value": "347"
										},
										{
											"begin": 10137,
											"end": 10198,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10127,
											"end": 10198,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 10127,
											"end": 10198,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 10081,
											"end": 10208,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "SWAP9",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "SWAP8",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 8944,
											"end": 10215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10221,
											"end": 10401,
											"name": "tag",
											"source": 23,
											"value": "231"
										},
										{
											"begin": 10221,
											"end": 10401,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10269,
											"end": 10346,
											"name": "PUSH",
											"source": 23,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10266,
											"end": 10267,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 10259,
											"end": 10347,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10366,
											"end": 10370,
											"name": "PUSH",
											"source": 23,
											"value": "11"
										},
										{
											"begin": 10363,
											"end": 10364,
											"name": "PUSH",
											"source": 23,
											"value": "4"
										},
										{
											"begin": 10356,
											"end": 10371,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10390,
											"end": 10394,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 10387,
											"end": 10388,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 10380,
											"end": 10395,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 10407,
											"end": 10817,
											"name": "tag",
											"source": 23,
											"value": "135"
										},
										{
											"begin": 10407,
											"end": 10817,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10447,
											"end": 10454,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 10470,
											"end": 10490,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "350"
										},
										{
											"begin": 10488,
											"end": 10489,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10470,
											"end": 10490,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 10470,
											"end": 10490,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10470,
											"end": 10490,
											"name": "tag",
											"source": 23,
											"value": "350"
										},
										{
											"begin": 10470,
											"end": 10490,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10465,
											"end": 10490,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 10465,
											"end": 10490,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 10504,
											"end": 10524,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "351"
										},
										{
											"begin": 10522,
											"end": 10523,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 10504,
											"end": 10524,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 10504,
											"end": 10524,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10504,
											"end": 10524,
											"name": "tag",
											"source": 23,
											"value": "351"
										},
										{
											"begin": 10504,
											"end": 10524,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10499,
											"end": 10524,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 10499,
											"end": 10524,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 10559,
											"end": 10560,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10556,
											"end": 10557,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10552,
											"end": 10561,
											"name": "MUL",
											"source": 23
										},
										{
											"begin": 10581,
											"end": 10611,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "352"
										},
										{
											"begin": 10599,
											"end": 10610,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 10581,
											"end": 10611,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 10581,
											"end": 10611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10581,
											"end": 10611,
											"name": "tag",
											"source": 23,
											"value": "352"
										},
										{
											"begin": 10581,
											"end": 10611,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10570,
											"end": 10611,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 10570,
											"end": 10611,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 10760,
											"end": 10761,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10751,
											"end": 10758,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10747,
											"end": 10762,
											"name": "DIV",
											"source": 23
										},
										{
											"begin": 10744,
											"end": 10745,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 10741,
											"end": 10763,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 10721,
											"end": 10722,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 10714,
											"end": 10723,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 10694,
											"end": 10777,
											"name": "OR",
											"source": 23
										},
										{
											"begin": 10671,
											"end": 10810,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "353"
										},
										{
											"begin": 10671,
											"end": 10810,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "354"
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "231"
										},
										{
											"begin": 10790,
											"end": 10808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "tag",
											"source": 23,
											"value": "354"
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10671,
											"end": 10810,
											"name": "tag",
											"source": 23,
											"value": "353"
										},
										{
											"begin": 10671,
											"end": 10810,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10455,
											"end": 10817,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 10407,
											"end": 10817,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 10407,
											"end": 10817,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 10407,
											"end": 10817,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 10407,
											"end": 10817,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 10407,
											"end": 10817,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10823,
											"end": 11003,
											"name": "tag",
											"source": 23,
											"value": "232"
										},
										{
											"begin": 10823,
											"end": 11003,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10871,
											"end": 10948,
											"name": "PUSH",
											"source": 23,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10868,
											"end": 10869,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 10861,
											"end": 10949,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10968,
											"end": 10972,
											"name": "PUSH",
											"source": 23,
											"value": "12"
										},
										{
											"begin": 10965,
											"end": 10966,
											"name": "PUSH",
											"source": 23,
											"value": "4"
										},
										{
											"begin": 10958,
											"end": 10973,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10992,
											"end": 10996,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 10989,
											"end": 10990,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 10982,
											"end": 10997,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 11009,
											"end": 11194,
											"name": "tag",
											"source": 23,
											"value": "137"
										},
										{
											"begin": 11009,
											"end": 11194,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11049,
											"end": 11050,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 11066,
											"end": 11086,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "357"
										},
										{
											"begin": 11084,
											"end": 11085,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11066,
											"end": 11086,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 11066,
											"end": 11086,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11066,
											"end": 11086,
											"name": "tag",
											"source": 23,
											"value": "357"
										},
										{
											"begin": 11066,
											"end": 11086,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11061,
											"end": 11086,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 11061,
											"end": 11086,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11100,
											"end": 11120,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "358"
										},
										{
											"begin": 11118,
											"end": 11119,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 11100,
											"end": 11120,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 11100,
											"end": 11120,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11100,
											"end": 11120,
											"name": "tag",
											"source": 23,
											"value": "358"
										},
										{
											"begin": 11100,
											"end": 11120,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11095,
											"end": 11120,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 11095,
											"end": 11120,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11139,
											"end": 11140,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11129,
											"end": 11164,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "359"
										},
										{
											"begin": 11129,
											"end": 11164,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 11144,
											"end": 11162,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "360"
										},
										{
											"begin": 11144,
											"end": 11162,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "232"
										},
										{
											"begin": 11144,
											"end": 11162,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11144,
											"end": 11162,
											"name": "tag",
											"source": 23,
											"value": "360"
										},
										{
											"begin": 11144,
											"end": 11162,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11129,
											"end": 11164,
											"name": "tag",
											"source": 23,
											"value": "359"
										},
										{
											"begin": 11129,
											"end": 11164,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11186,
											"end": 11187,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11183,
											"end": 11184,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11179,
											"end": 11188,
											"name": "DIV",
											"source": 23
										},
										{
											"begin": 11174,
											"end": 11188,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 11174,
											"end": 11188,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11009,
											"end": 11194,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 11009,
											"end": 11194,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 11009,
											"end": 11194,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11009,
											"end": 11194,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11009,
											"end": 11194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11200,
											"end": 11642,
											"name": "tag",
											"source": 23,
											"value": "176"
										},
										{
											"begin": 11200,
											"end": 11642,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11349,
											"end": 11353,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 11387,
											"end": 11389,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 11376,
											"end": 11385,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11372,
											"end": 11390,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 11364,
											"end": 11390,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 11364,
											"end": 11390,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11400,
											"end": 11471,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "362"
										},
										{
											"begin": 11468,
											"end": 11469,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 11457,
											"end": 11466,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 11453,
											"end": 11470,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 11444,
											"end": 11450,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 11400,
											"end": 11471,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "215"
										},
										{
											"begin": 11400,
											"end": 11471,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11400,
											"end": 11471,
											"name": "tag",
											"source": 23,
											"value": "362"
										},
										{
											"begin": 11400,
											"end": 11471,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11481,
											"end": 11553,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "363"
										},
										{
											"begin": 11549,
											"end": 11551,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 11538,
											"end": 11547,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 11534,
											"end": 11552,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 11525,
											"end": 11531,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 11481,
											"end": 11553,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "212"
										},
										{
											"begin": 11481,
											"end": 11553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11481,
											"end": 11553,
											"name": "tag",
											"source": 23,
											"value": "363"
										},
										{
											"begin": 11481,
											"end": 11553,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11563,
											"end": 11635,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "364"
										},
										{
											"begin": 11631,
											"end": 11633,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 11620,
											"end": 11629,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 11616,
											"end": 11634,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 11607,
											"end": 11613,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 11563,
											"end": 11635,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "212"
										},
										{
											"begin": 11563,
											"end": 11635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11563,
											"end": 11635,
											"name": "tag",
											"source": 23,
											"value": "364"
										},
										{
											"begin": 11563,
											"end": 11635,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11200,
											"end": 11642,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 11200,
											"end": 11642,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 11200,
											"end": 11642,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11200,
											"end": 11642,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11200,
											"end": 11642,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11200,
											"end": 11642,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11200,
											"end": 11642,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11648,
											"end": 11839,
											"name": "tag",
											"source": 23,
											"value": "188"
										},
										{
											"begin": 11648,
											"end": 11839,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11688,
											"end": 11691,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 11707,
											"end": 11727,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "366"
										},
										{
											"begin": 11725,
											"end": 11726,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11707,
											"end": 11727,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 11707,
											"end": 11727,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11707,
											"end": 11727,
											"name": "tag",
											"source": 23,
											"value": "366"
										},
										{
											"begin": 11707,
											"end": 11727,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11702,
											"end": 11727,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 11702,
											"end": 11727,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11741,
											"end": 11761,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "367"
										},
										{
											"begin": 11759,
											"end": 11760,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 11741,
											"end": 11761,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "207"
										},
										{
											"begin": 11741,
											"end": 11761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11741,
											"end": 11761,
											"name": "tag",
											"source": 23,
											"value": "367"
										},
										{
											"begin": 11741,
											"end": 11761,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11736,
											"end": 11761,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 11736,
											"end": 11761,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11784,
											"end": 11785,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11781,
											"end": 11782,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11777,
											"end": 11786,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 11770,
											"end": 11786,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 11770,
											"end": 11786,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11805,
											"end": 11808,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 11802,
											"end": 11803,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 11799,
											"end": 11809,
											"name": "GT",
											"source": 23
										},
										{
											"begin": 11796,
											"end": 11832,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 11796,
											"end": 11832,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 11796,
											"end": 11832,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 11812,
											"end": 11830,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "369"
										},
										{
											"begin": 11812,
											"end": 11830,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "231"
										},
										{
											"begin": 11812,
											"end": 11830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 11812,
											"end": 11830,
											"name": "tag",
											"source": 23,
											"value": "369"
										},
										{
											"begin": 11812,
											"end": 11830,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11796,
											"end": 11832,
											"name": "tag",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 11796,
											"end": 11832,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 11648,
											"end": 11839,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 11648,
											"end": 11839,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 11648,
											"end": 11839,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11648,
											"end": 11839,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 11648,
											"end": 11839,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/CCtoken/pool/CCToken.sol",
								"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
								"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol",
								"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol",
								"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol",
								"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol",
								"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol",
								"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol",
								"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol",
								"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol",
								"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"TEAM_LOCK_PERIOD()": "35928998",
							"TOTAL_SUPPLY()": "902d55a5",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"getCurrentPrice()": "eb91d37e",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"teamLockedUntil()": "76ae9b2d",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"uniswapPool()": "bdd3d825"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_teamAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_uniswapPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TEAM_LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CCtoken/pool/CCToken.sol\":\"CSYDToken\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xe820561dd1d9311ddde6bcd77976f6d599f24ecf959a3b3fcfb2c73b2dd32113\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://919e2f2e8746c0589bcfbd16402f928c7795d3f80d3d86e2ba5a711024146f95\",\"dweb:/ipfs/QmWy1EU9L5rpzKMrKZhN65gHrgujkp2QYvRr7szFj7Drjz\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x8af85cd69ade87483e7750ba90a2186e469290cd67a880784ae9926500a2ad95\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e1d973f01d9f0e2a5d5da163eb8818537b668e73bdd15be5a4871c3f5c79e8d\",\"dweb:/ipfs/QmQDmn3XCdyz355PwoSgP3FpZr8yUf5oCSYLzB3ir4vuz7\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xaaa3e860b67a6f15c4b935f74a3111bcde40bac5251d659de10e200fb43e9f84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://840716b2587321d18c8714e65fb9a02b3e524f2b7744040d9ead5b68a5388dfe\",\"dweb:/ipfs/QmU3236QhCG6TF6UX9uSXxHLeQnLzi6Myh6cgonSczbEPZ\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"contracts/CCtoken/pool/CCToken.sol\":{\"keccak256\":\"0xac8007729e993ad4e1702f113589ab40a0d0cd4f55b55f04c492f43adc650960\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98895844187dd8a3e5cc98cbc7ef3cf7fe39a9e06fa9b1d8b971c717f12744e0\",\"dweb:/ipfs/QmVHSKBz7Fd2QrtChosvhRZfwK9Rhz4S5dNVtztgyapYaS\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x5aad1745bddba11752c3962464a3b12e0af079310cc22d1f43f0388ae1aaf8db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://577fad916bfdfe89aadf2685322fec7562cb0ed87722923085213cd9f85d7b79\",\"dweb:/ipfs/QmSM3J6PjrAUyEoNbdhq1ECZLXczKdCTzZTBUieKHsBYEL\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xa5606c6cebca0ce72e4764cf4807eaf7dec3a298249279ed24cb261b0719bd20\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://219eb9f4034d942bddd021f4b4c237e721f9845911acfa98c90b1c6be6dcdef7\",\"dweb:/ipfs/QmTyRqcmUna7PL2EMV3k7HnQCnNhQN3a3qKMyA9MME5ctc\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 700,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 706,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 708,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 710,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 712,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 401,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "_owner",
								"offset": 0,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 209,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "teamAddresses",
								"offset": 0,
								"slot": "6",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 211,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "teamLockedUntil",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 213,
								"contract": "contracts/CCtoken/pool/CCToken.sol:CSYDToken",
								"label": "uniswapPool",
								"offset": 0,
								"slot": "8",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 401,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x5aad1745bddba11752c3962464a3b12e0af079310cc22d1f43f0388ae1aaf8db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://577fad916bfdfe89aadf2685322fec7562cb0ed87722923085213cd9f85d7b79\",\"dweb:/ipfs/QmSM3J6PjrAUyEoNbdhq1ECZLXczKdCTzZTBUieKHsBYEL\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 700,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 706,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 708,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 710,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 712,
								"contract": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol": {
				"IERC721Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC721 with permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xe820561dd1d9311ddde6bcd77976f6d599f24ecf959a3b3fcfb2c73b2dd32113\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://919e2f2e8746c0589bcfbd16402f928c7795d3f80d3d86e2ba5a711024146f95\",\"dweb:/ipfs/QmWy1EU9L5rpzKMrKZhN65gHrgujkp2QYvRr7szFj7Drjz\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							}
						},
						"notice": "Extension to ERC721 that includes a permit function for signature based approvals",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"fee": "The fee associated with the pool",
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"WETH9()": "4aa4a4fc",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"factory()": "c45a0155",
							"getApproved(uint256)": "081812fc",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "88316456",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"positions(uint256)": "99fbab88",
							"refundETH()": "12210e8a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xe820561dd1d9311ddde6bcd77976f6d599f24ecf959a3b3fcfb2c73b2dd32113\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://919e2f2e8746c0589bcfbd16402f928c7795d3f80d3d86e2ba5a711024146f95\",\"dweb:/ipfs/QmWy1EU9L5rpzKMrKZhN65gHrgujkp2QYvRr7szFj7Drjz\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x8af85cd69ade87483e7750ba90a2186e469290cd67a880784ae9926500a2ad95\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e1d973f01d9f0e2a5d5da163eb8818537b668e73bdd15be5a4871c3f5c79e8d\",\"dweb:/ipfs/QmQDmn3XCdyz355PwoSgP3FpZr8yUf5oCSYLzB3ir4vuz7\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xaaa3e860b67a6f15c4b935f74a3111bcde40bac5251d659de10e200fb43e9f84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://840716b2587321d18c8714e65fb9a02b3e524f2b7744040d9ead5b68a5388dfe\",\"dweb:/ipfs/QmU3236QhCG6TF6UX9uSXxHLeQnLzi6Myh6cgonSczbEPZ\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xa5606c6cebca0ce72e4764cf4807eaf7dec3a298249279ed24cb261b0719bd20\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://219eb9f4034d942bddd021f4b4c237e721f9845911acfa98c90b1c6be6dcdef7\",\"dweb:/ipfs/QmTyRqcmUna7PL2EMV3k7HnQCnNhQN3a3qKMyA9MME5ctc\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							}
						},
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol": {
				"IPoolInitializer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"notice": "Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							186
						],
						"IERC721": [
							116
						]
					},
					"id": 117,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:30:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 117,
							"sourceUnit": 187,
							"src": "140:62:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 186,
										"src": "148:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "IERC165",
										"nameLocations": [
											"294:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 186,
										"src": "294:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "294:7:0"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "204:68:0",
								"text": " @dev Required interface of an ERC-721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 116,
							"linearizedBaseContracts": [
								116,
								186
							],
							"name": "IERC721",
							"nameLocation": "283:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "308:88:0",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 15,
									"name": "Transfer",
									"nameLocation": "407:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "432:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "416:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "416:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "454:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "438:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "438:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "474:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "458:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "458:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:67:0"
									},
									"src": "401:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "489:94:0",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 24,
									"name": "Approval",
									"nameLocation": "594:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "619:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "603:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 17,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "642:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "626:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "626:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "668:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "652:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 21,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "602:74:0"
									},
									"src": "588:89:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "683:117:0",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 33,
									"name": "ApprovalForAll",
									"nameLocation": "811:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "842:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "826:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "865:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "849:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "849:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "880:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "875:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 30,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "875:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "825:64:0"
									},
									"src": "805:85:0"
								},
								{
									"documentation": {
										"id": 34,
										"nodeType": "StructuredDocumentation",
										"src": "896:76:0",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 41,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "986:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1004:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "996:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 35,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "996:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "995:15:0"
									},
									"returnParameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1042:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "1034:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1034:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1033:17:0"
									},
									"scope": 116,
									"src": "977:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 42,
										"nodeType": "StructuredDocumentation",
										"src": "1057:131:0",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 49,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1202:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1218:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "1210:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1210:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1209:17:0"
									},
									"returnParameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1258:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "1250:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1250:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1249:15:0"
									},
									"scope": 116,
									"src": "1193:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 50,
										"nodeType": "StructuredDocumentation",
										"src": "1271:565:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 61,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1850:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1875:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "1867:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 51,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1867:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1889:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "1881:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 53,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1881:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1901:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "1893:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 55,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1893:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1925:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "1910:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 57,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1910:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1866:64:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1939:0:0"
									},
									"scope": 116,
									"src": "1841:99:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "1946:706:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 71,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2666:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2691:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "2683:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2705:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "2697:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 65,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2697:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2717:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "2709:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 67,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2709:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2682:43:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2734:0:0"
									},
									"scope": 116,
									"src": "2657:78:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "2741:733:0",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 81,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3488:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3509:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "3501:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3523:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "3515:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 75,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3515:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3535:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "3527:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 77,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3527:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:43:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3552:0:0"
									},
									"scope": 116,
									"src": "3479:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "3559:452:0",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 89,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4025:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4041:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "4033:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 83,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4033:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4053:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "4045:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 85,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4045:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4032:29:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4070:0:0"
									},
									"scope": 116,
									"src": "4016:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 90,
										"nodeType": "StructuredDocumentation",
										"src": "4077:315:0",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 97,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4406:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4432:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "4424:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 91,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4424:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4447:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "4442:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 93,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4442:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4423:33:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4465:0:0"
									},
									"scope": 116,
									"src": "4397:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "4472:139:0",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 105,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4625:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "4637:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4637:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4636:17:0"
									},
									"returnParameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4685:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "4677:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4677:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4676:18:0"
									},
									"scope": 116,
									"src": "4616:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "4701:138:0",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 115,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4853:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4878:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "4870:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4893:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "4885:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 109,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4885:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4869:33:0"
									},
									"returnParameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "4926:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 112,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4926:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4925:6:0"
									},
									"scope": 116,
									"src": "4844:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 117,
							"src": "273:4661:0",
							"usedErrors": [],
							"usedEvents": [
								15,
								24,
								33
							]
						}
					],
					"src": "108:4827:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							186
						],
						"IERC721": [
							116
						],
						"IERC721Enumerable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 118,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:30:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 119,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 117,
							"src": "65:23:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 121,
										"name": "IERC721",
										"nameLocations": [
											"258:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 116,
										"src": "258:7:1"
									},
									"id": 122,
									"nodeType": "InheritanceSpecifier",
									"src": "258:7:1"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 120,
								"nodeType": "StructuredDocumentation",
								"src": "90:136:1",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								116,
								186
							],
							"name": "IERC721Enumerable",
							"nameLocation": "237:17:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "273:82:1",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "369:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "380:2:1"
									},
									"returnParameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "406:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "406:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "405:9:1"
									},
									"scope": 147,
									"src": "360:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "421:171:1",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "606:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "634:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "626:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "626:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "649:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "641:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "641:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "625:30:1"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "687:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "679:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 135,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "679:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "678:17:1"
									},
									"scope": 147,
									"src": "597:99:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "702:164:1",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 146,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "880:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "901:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "893:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "893:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "892:15:1"
									},
									"returnParameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "931:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:9:1"
									},
									"scope": 147,
									"src": "871:69:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 148,
							"src": "227:715:1",
							"usedErrors": [],
							"usedEvents": [
								15,
								24,
								33
							]
						}
					],
					"src": "33:910:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							186
						],
						"IERC721": [
							116
						],
						"IERC721Metadata": [
							174
						]
					},
					"id": 175,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:30:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 150,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 175,
							"sourceUnit": 117,
							"src": "64:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 152,
										"name": "IERC721",
										"nameLocations": [
											"252:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 116,
										"src": "252:7:2"
									},
									"id": 153,
									"nodeType": "InheritanceSpecifier",
									"src": "252:7:2"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 151,
								"nodeType": "StructuredDocumentation",
								"src": "89:133:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 174,
							"linearizedBaseContracts": [
								174,
								116,
								186
							],
							"name": "IERC721Metadata",
							"nameLocation": "233:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "267:58:2",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "339:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "343:2:2"
									},
									"returnParameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "369:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 156,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "369:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "368:15:2"
									},
									"scope": 174,
									"src": "330:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "390:60:2",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 165,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "464:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "470:2:2"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "496:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 162,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "496:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "495:15:2"
									},
									"scope": 174,
									"src": "455:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 166,
										"nodeType": "StructuredDocumentation",
										"src": "517:90:2",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 173,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "621:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "638:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "630:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "630:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "629:17:2"
									},
									"returnParameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "670:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 170,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "670:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:15:2"
									},
									"scope": 174,
									"src": "612:73:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 175,
							"src": "223:464:2",
							"usedErrors": [],
							"usedEvents": [
								15,
								24,
								33
							]
						}
					],
					"src": "32:656:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							186
						]
					},
					"id": 187,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 176,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 177,
								"nodeType": "StructuredDocumentation",
								"src": "141:280:3",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 186,
							"linearizedBaseContracts": [
								186
							],
							"name": "IERC165",
							"nameLocation": "432:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "446:340:3",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 185,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "800:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "825:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "818:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 179,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "818:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "817:20:3"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "861:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 182,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "861:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:6:3"
									},
									"scope": 186,
									"src": "791:76:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 187,
							"src": "422:447:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:755:3"
				},
				"id": 3
			},
			"contracts/CCtoken/pool/CCToken.sol": {
				"ast": {
					"absolutePath": "contracts/CCtoken/pool/CCToken.sol",
					"exportedSymbols": {
						"CSYDToken": [
							392
						],
						"Context": [
							1326
						],
						"ERC20": [
							1192
						],
						"IERC165": [
							186
						],
						"IERC20": [
							1270
						],
						"IERC20Errors": [
							582
						],
						"IERC20Metadata": [
							1296
						],
						"IERC721": [
							116
						],
						"IERC721Enumerable": [
							147
						],
						"IERC721Metadata": [
							174
						],
						"IERC721Permit": [
							1803
						],
						"INonfungiblePositionManager": [
							2001
						],
						"IPeripheryImmutableState": [
							2017
						],
						"IPeripheryPayments": [
							2043
						],
						"IPoolInitializer": [
							2062
						],
						"IUniswapV3Pool": [
							1348
						],
						"IUniswapV3PoolActions": [
							1444
						],
						"IUniswapV3PoolDerivedState": [
							1475
						],
						"IUniswapV3PoolEvents": [
							1594
						],
						"IUniswapV3PoolImmutables": [
							1634
						],
						"IUniswapV3PoolOwnerActions": [
							1660
						],
						"IUniswapV3PoolState": [
							1768
						],
						"Ownable": [
							540
						]
					},
					"id": 393,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 188,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:4"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol",
							"id": 189,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 393,
							"sourceUnit": 1193,
							"src": "60:108:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
							"file": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
							"id": 190,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 393,
							"sourceUnit": 541,
							"src": "170:105:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol",
							"file": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol",
							"id": 191,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 393,
							"sourceUnit": 2002,
							"src": "277:112:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 192,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 393,
							"sourceUnit": 1349,
							"src": "391:94:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 193,
										"name": "ERC20",
										"nameLocations": [
											"511:5:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1192,
										"src": "511:5:4"
									},
									"id": 194,
									"nodeType": "InheritanceSpecifier",
									"src": "511:5:4"
								},
								{
									"baseName": {
										"id": 195,
										"name": "Ownable",
										"nameLocations": [
											"518:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 540,
										"src": "518:7:4"
									},
									"id": 196,
									"nodeType": "InheritanceSpecifier",
									"src": "518:7:4"
								}
							],
							"canonicalName": "CSYDToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 392,
							"linearizedBaseContracts": [
								392,
								540,
								1192,
								582,
								1296,
								1270,
								1326
							],
							"name": "CSYDToken",
							"nameLocation": "498:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "902d55a5",
									"id": 201,
									"mutability": "constant",
									"name": "TOTAL_SUPPLY",
									"nameLocation": "639:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 392,
									"src": "615:55:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 197,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "615:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_1500000000_by_1",
											"typeString": "int_const 1500000000"
										},
										"id": 200,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "3135305f3030305f303030",
											"id": 198,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "654:11:4",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_150000000_by_1",
												"typeString": "int_const 150000000"
											},
											"value": "150_000_000"
										},
										"nodeType": "BinaryOperation",
										"operator": "*",
										"rightExpression": {
											"hexValue": "3130",
											"id": 199,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "668:2:4",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_10_by_1",
												"typeString": "int_const 10"
											},
											"value": "10"
										},
										"src": "654:16:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1500000000_by_1",
											"typeString": "int_const 1500000000"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "35928998",
									"id": 206,
									"mutability": "constant",
									"name": "TEAM_LOCK_PERIOD",
									"nameLocation": "714:16:4",
									"nodeType": "VariableDeclaration",
									"scope": 392,
									"src": "690:55:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 202,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "690:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_94608000_by_1",
											"typeString": "int_const 94608000"
										},
										"id": 205,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "33",
											"id": 203,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "733:1:4",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_3_by_1",
												"typeString": "int_const 3"
											},
											"value": "3"
										},
										"nodeType": "BinaryOperation",
										"operator": "*",
										"rightExpression": {
											"hexValue": "333635",
											"id": 204,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "737:8:4",
											"subdenomination": "days",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_31536000_by_1",
												"typeString": "int_const 31536000"
											},
											"value": "365"
										},
										"src": "733:12:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_94608000_by_1",
											"typeString": "int_const 94608000"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 209,
									"mutability": "mutable",
									"name": "teamAddresses",
									"nameLocation": "792:13:4",
									"nodeType": "VariableDeclaration",
									"scope": 392,
									"src": "774:31:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 207,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "774:7:4",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 208,
										"nodeType": "ArrayTypeName",
										"src": "774:9:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "76ae9b2d",
									"id": 211,
									"mutability": "mutable",
									"name": "teamLockedUntil",
									"nameLocation": "827:15:4",
									"nodeType": "VariableDeclaration",
									"scope": 392,
									"src": "812:30:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 210,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "812:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "bdd3d825",
									"id": 213,
									"mutability": "mutable",
									"name": "uniswapPool",
									"nameLocation": "864:11:4",
									"nodeType": "VariableDeclaration",
									"scope": 392,
									"src": "849:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 212,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "849:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "1016:562:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 230,
																	"name": "_teamAddresses",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 216,
																	"src": "1035:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																		"typeString": "address[] memory"
																	}
																},
																"id": 231,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1050:6:4",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1035:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 232,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1059:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1035:25:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4174206c65617374206f6e65207465616d2061646472657373207265717569726564",
															"id": 234,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1062:36:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6",
																"typeString": "literal_string \"At least one team address required\""
															},
															"value": "At least one team address required"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_16e596427d67bb9c0351fbbb6b567a93bc8c2f28e68fbcfcc6960a296b783ed6",
																"typeString": "literal_string \"At least one team address required\""
															}
														],
														"id": 229,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1027:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1027:72:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 236,
												"nodeType": "ExpressionStatement",
												"src": "1027:72:4"
											},
											{
												"expression": {
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 237,
														"name": "teamAddresses",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 209,
														"src": "1110:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 238,
														"name": "_teamAddresses",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 216,
														"src": "1126:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "1110:30:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"id": 240,
												"nodeType": "ExpressionStatement",
												"src": "1110:30:4"
											},
											{
												"expression": {
													"id": 243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 241,
														"name": "uniswapPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 213,
														"src": "1151:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 242,
														"name": "_uniswapPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "1165:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1151:26:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 244,
												"nodeType": "ExpressionStatement",
												"src": "1151:26:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 246,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1196:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1200:6:4",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1196:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 250,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 248,
																	"name": "TOTAL_SUPPLY",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 201,
																	"src": "1208:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3830",
																	"id": 249,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1223:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_80_by_1",
																		"typeString": "int_const 80"
																	},
																	"value": "80"
																},
																"src": "1208:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "313030",
																"id": 251,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1228:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "1208:23:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 245,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "1190:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1190:42:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "1190:42:4"
											},
											{
												"body": {
													"id": 280,
													"nodeType": "Block",
													"src": "1307:111:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 267,
																			"name": "teamAddresses",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 209,
																			"src": "1328:13:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_storage",
																				"typeString": "address[] storage ref"
																			}
																		},
																		"id": 269,
																		"indexExpression": {
																			"id": 268,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "1342:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1328:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 272,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 270,
																					"name": "TOTAL_SUPPLY",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 201,
																					"src": "1346:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3130",
																					"id": 271,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1361:2:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_10_by_1",
																						"typeString": "int_const 10"
																					},
																					"value": "10"
																				},
																				"src": "1346:17:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "313030",
																				"id": 273,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1366:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_100_by_1",
																					"typeString": "int_const 100"
																				},
																				"value": "100"
																			},
																			"src": "1346:23:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"expression": {
																				"id": 275,
																				"name": "teamAddresses",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 209,
																				"src": "1372:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_storage",
																					"typeString": "address[] storage ref"
																				}
																			},
																			"id": 276,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1386:6:4",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "1372:20:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "1346:46:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 266,
																	"name": "_mint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1032,
																	"src": "1322:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 278,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:71:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 279,
															"nodeType": "ExpressionStatement",
															"src": "1322:71:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 259,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "1276:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 260,
															"name": "teamAddresses",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 209,
															"src": "1280:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 261,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1294:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1280:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1276:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 281,
												"initializationExpression": {
													"assignments": [
														256
													],
													"declarations": [
														{
															"constant": false,
															"id": 256,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1269:1:4",
															"nodeType": "VariableDeclaration",
															"scope": 281,
															"src": "1261:9:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 255,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1261:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 258,
													"initialValue": {
														"hexValue": "30",
														"id": 257,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1273:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1261:13:4"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 264,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1302:3:4",
														"subExpression": {
															"id": 263,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "1302:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 265,
													"nodeType": "ExpressionStatement",
													"src": "1302:3:4"
												},
												"nodeType": "ForStatement",
												"src": "1256:162:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 285,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1442:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_CSYDToken_$392",
																		"typeString": "contract CSYDToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_CSYDToken_$392",
																		"typeString": "contract CSYDToken"
																	}
																],
																"id": 284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1434:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 283,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1434:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1434:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 291,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 289,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 287,
																	"name": "TOTAL_SUPPLY",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 201,
																	"src": "1449:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3130",
																	"id": 288,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1464:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "1449:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "313030",
																"id": 290,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1469:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "1449:23:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 282,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "1428:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1428:45:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 293,
												"nodeType": "ExpressionStatement",
												"src": "1428:45:4"
											},
											{
												"expression": {
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 294,
														"name": "teamLockedUntil",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 211,
														"src": "1502:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 298,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 295,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "1520:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1526:9:4",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "1520:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 297,
															"name": "TEAM_LOCK_PERIOD",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 206,
															"src": "1538:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1520:34:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1502:52:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 300,
												"nodeType": "ExpressionStatement",
												"src": "1502:52:4"
											}
										]
									},
									"id": 302,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "63737964",
													"id": 221,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "966:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_6afc605e4f8719bc0a187cf8d78914262783142cbf1f3f1721a8f28c946c7558",
														"typeString": "literal_string \"csyd\""
													},
													"value": "csyd"
												},
												{
													"hexValue": "43535944",
													"id": 222,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "974:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_ac5ae6287f650494bec9ff973d0959699e5e01f280b630aed29e40424bc08e21",
														"typeString": "literal_string \"CSYD\""
													},
													"value": "CSYD"
												}
											],
											"id": 223,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 220,
												"name": "ERC20",
												"nameLocations": [
													"960:5:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1192,
												"src": "960:5:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "960:21:4"
										},
										{
											"arguments": [
												{
													"expression": {
														"id": 225,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "999:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1003:6:4",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "999:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 227,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 224,
												"name": "Ownable",
												"nameLocations": [
													"991:7:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 540,
												"src": "991:7:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "991:19:4"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "_teamAddresses",
												"nameLocation": "913:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "896:31:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 214,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "896:7:4",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 215,
													"nodeType": "ArrayTypeName",
													"src": "896:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "_uniswapPool",
												"nameLocation": "937:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "929:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "929:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "895:55:4"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1016:0:4"
									},
									"scope": 392,
									"src": "884:694:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 313,
										"nodeType": "Block",
										"src": "1608:100:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 305,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "1627:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1633:9:4",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "1627:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 307,
																"name": "teamLockedUntil",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 211,
																"src": "1646:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1627:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5465616d20746f6b656e7320617265206c6f636b6564",
															"id": 309,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1663:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf",
																"typeString": "literal_string \"Team tokens are locked\""
															},
															"value": "Team tokens are locked"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e88474141b06d7af461065e7e71cdee5449b2b6ad135df1aa991f7d33dd58aaf",
																"typeString": "literal_string \"Team tokens are locked\""
															}
														],
														"id": 304,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1619:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1619:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 311,
												"nodeType": "ExpressionStatement",
												"src": "1619:69:4"
											},
											{
												"id": 312,
												"nodeType": "PlaceholderStatement",
												"src": "1699:1:4"
											}
										]
									},
									"id": 314,
									"name": "teamLocked",
									"nameLocation": "1595:10:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1605:2:4"
									},
									"src": "1586:122:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										802
									],
									"body": {
										"id": 332,
										"nodeType": "Block",
										"src": "1811:59:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 328,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "1844:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 329,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "1855:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 326,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1829:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_CSYDToken_$392_$",
																"typeString": "type(contract super CSYDToken)"
															}
														},
														"id": 327,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1835:8:4",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 802,
														"src": "1829:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) returns (bool)"
														}
													},
													"id": 330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1829:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 325,
												"id": 331,
												"nodeType": "Return",
												"src": "1822:40:4"
											}
										]
									},
									"functionSelector": "a9059cbb",
									"id": 333,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 322,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 321,
												"name": "teamLocked",
												"nameLocations": [
													"1785:10:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 314,
												"src": "1785:10:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1785:10:4"
										}
									],
									"name": "transfer",
									"nameLocation": "1725:8:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 320,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1776:8:4"
									},
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1742:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "1734:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1734:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1761:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "1753:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1753:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1733:35:4"
									},
									"returnParameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "1805:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 323,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1805:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:6:4"
									},
									"scope": 392,
									"src": "1716:154:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										875
									],
									"body": {
										"id": 354,
										"nodeType": "Block",
										"src": "1993:71:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 349,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 335,
															"src": "2030:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 350,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "2038:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 351,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "2049:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 347,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2011:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_CSYDToken_$392_$",
																"typeString": "type(contract super CSYDToken)"
															}
														},
														"id": 348,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2017:12:4",
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 875,
														"src": "2011:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) returns (bool)"
														}
													},
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2011:45:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 346,
												"id": 353,
												"nodeType": "Return",
												"src": "2004:52:4"
											}
										]
									},
									"functionSelector": "23b872dd",
									"id": 355,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 343,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 342,
												"name": "teamLocked",
												"nameLocations": [
													"1967:10:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 314,
												"src": "1967:10:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1967:10:4"
										}
									],
									"name": "transferFrom",
									"nameLocation": "1887:12:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 341,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1958:8:4"
									},
									"parameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1908:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "1900:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1900:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1924:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "1916:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1916:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1943:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "1935:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1935:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1899:51:4"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "1987:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 344,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1987:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1986:6:4"
									},
									"scope": 392,
									"src": "1878:186:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 390,
										"nodeType": "Block",
										"src": "2135:219:4",
										"statements": [
											{
												"assignments": [
													362
												],
												"declarations": [
													{
														"constant": false,
														"id": 362,
														"mutability": "mutable",
														"name": "pool",
														"nameLocation": "2161:4:4",
														"nodeType": "VariableDeclaration",
														"scope": 390,
														"src": "2146:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IUniswapV3Pool_$1348",
															"typeString": "contract IUniswapV3Pool"
														},
														"typeName": {
															"id": 361,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 360,
																"name": "IUniswapV3Pool",
																"nameLocations": [
																	"2146:14:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1348,
																"src": "2146:14:4"
															},
															"referencedDeclaration": 1348,
															"src": "2146:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$1348",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 366,
												"initialValue": {
													"arguments": [
														{
															"id": 364,
															"name": "uniswapPool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 213,
															"src": "2183:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 363,
														"name": "IUniswapV3Pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1348,
														"src": "2168:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IUniswapV3Pool_$1348_$",
															"typeString": "type(contract IUniswapV3Pool)"
														}
													},
													"id": 365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2168:27:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUniswapV3Pool_$1348",
														"typeString": "contract IUniswapV3Pool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2146:49:4"
											},
											{
												"assignments": [
													368,
													null,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 368,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nameLocation": "2215:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 390,
														"src": "2207:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 367,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "2207:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null,
													null
												],
												"id": 372,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 369,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "2243:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUniswapV3Pool_$1348",
																"typeString": "contract IUniswapV3Pool"
															}
														},
														"id": 370,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2248:5:4",
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1681,
														"src": "2243:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2243:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2206:49:4"
											},
											{
												"expression": {
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 373,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 358,
														"src": "2266:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 387,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 376,
																		"name": "sqrtPriceX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "2282:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	],
																	"id": 375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2274:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 374,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2274:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2274:21:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 380,
																		"name": "sqrtPriceX96",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "2306:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	],
																	"id": 379,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2298:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 378,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "2298:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 381,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2298:21:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2274:45:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																		"typeString": "int_const 6277...(50 digits omitted)...2896"
																	},
																	"id": 385,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "32",
																		"id": 383,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2323:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"hexValue": "313932",
																		"id": 384,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2326:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_192_by_1",
																			"typeString": "int_const 192"
																		},
																		"value": "192"
																	},
																	"src": "2323:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																		"typeString": "int_const 6277...(50 digits omitted)...2896"
																	}
																}
															],
															"id": 386,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2322:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_6277101735386680763835789423207666416102355444464034512896_by_1",
																"typeString": "int_const 6277...(50 digits omitted)...2896"
															}
														},
														"src": "2274:56:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2266:64:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 389,
												"nodeType": "ExpressionStatement",
												"src": "2266:64:4"
											}
										]
									},
									"functionSelector": "eb91d37e",
									"id": 391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getCurrentPrice",
									"nameLocation": "2081:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2096:2:4"
									},
									"returnParameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "2128:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2120:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2120:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2119:15:4"
									},
									"scope": 392,
									"src": "2072:282:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 393,
							"src": "489:1868:4",
							"usedErrors": [
								406,
								411,
								552,
								557,
								562,
								571,
								576,
								581
							],
							"usedEvents": [
								417,
								1204,
								1213
							]
						}
					],
					"src": "33:2324:4"
				},
				"id": 4
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1326
						],
						"Ownable": [
							540
						]
					},
					"id": 541,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 394,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:5"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 396,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 541,
							"sourceUnit": 1327,
							"src": "128:45:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 395,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1326,
										"src": "136:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 398,
										"name": "Context",
										"nameLocations": [
											"692:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1326,
										"src": "692:7:5"
									},
									"id": 399,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:5"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 397,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:5",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 540,
							"linearizedBaseContracts": [
								540,
								1326
							],
							"name": "Ownable",
							"nameLocation": "681:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 401,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 540,
									"src": "706:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 400,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:5",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 406,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "858:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:5"
									},
									"src": "825:50:5"
								},
								{
									"documentation": {
										"id": 407,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:5",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 411,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 411,
												"src": "994:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:5"
									},
									"src": "968:41:5"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 417,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:5",
												"nodeType": "VariableDeclaration",
												"scope": 417,
												"src": "1042:29:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 417,
												"src": "1073:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:5"
									},
									"src": "1015:84:5"
								},
								{
									"body": {
										"id": 442,
										"nodeType": "Block",
										"src": "1259:153:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 423,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "1273:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 426,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 425,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 424,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 427,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 437,
												"nodeType": "IfStatement",
												"src": "1269:95:5",
												"trueBody": {
													"id": 436,
													"nodeType": "Block",
													"src": "1301:63:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 432,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 431,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 430,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 429,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "1322:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 435,
															"nodeType": "RevertStatement",
															"src": "1315:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 439,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 420,
															"src": "1392:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 438,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "1373:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:5"
											}
										]
									},
									"documentation": {
										"id": 418,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:5",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 443,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 443,
												"src": "1237:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:5"
									},
									"returnParameters": {
										"id": 422,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:5"
									},
									"scope": 540,
									"src": "1225:187:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 450,
										"nodeType": "Block",
										"src": "1521:41:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 446,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 477,
														"src": "1531:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 448,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:5"
											},
											{
												"id": 449,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:5"
											}
										]
									},
									"documentation": {
										"id": 444,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:5",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 451,
									"name": "onlyOwner",
									"nameLocation": "1509:9:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:5"
									},
									"src": "1500:62:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 459,
										"nodeType": "Block",
										"src": "1693:30:5",
										"statements": [
											{
												"expression": {
													"id": 457,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 401,
													"src": "1710:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 456,
												"id": 458,
												"nodeType": "Return",
												"src": "1703:13:5"
											}
										]
									},
									"documentation": {
										"id": 452,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:5",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 460,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:5"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "1684:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:5"
									},
									"scope": 540,
									"src": "1638:85:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 476,
										"nodeType": "Block",
										"src": "1841:117:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 464,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 460,
															"src": "1855:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 466,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "1866:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 467,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 475,
												"nodeType": "IfStatement",
												"src": "1851:101:5",
												"trueBody": {
													"id": 474,
													"nodeType": "Block",
													"src": "1880:72:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 470,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1308,
																			"src": "1928:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 469,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 406,
																	"src": "1901:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 472,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 473,
															"nodeType": "RevertStatement",
															"src": "1894:47:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 461,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:5",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 477,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:5"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:5"
									},
									"scope": 540,
									"src": "1796:162:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 490,
										"nodeType": "Block",
										"src": "2347:47:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 485,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 484,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 487,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 483,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "2357:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:5"
											}
										]
									},
									"documentation": {
										"id": 478,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:5",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 491,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 481,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 480,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 451,
												"src": "2337:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:5"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:5"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:5"
									},
									"scope": 540,
									"src": "2293:101:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 518,
										"nodeType": "Block",
										"src": "2613:145:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 499,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 494,
														"src": "2627:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 500,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 513,
												"nodeType": "IfStatement",
												"src": "2623:91:5",
												"trueBody": {
													"id": 512,
													"nodeType": "Block",
													"src": "2651:63:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 508,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 506,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 505,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "2672:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 511,
															"nodeType": "RevertStatement",
															"src": "2665:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 515,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "2742:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 514,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "2723:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 517,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:5"
											}
										]
									},
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:5",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 519,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 497,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 496,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 451,
												"src": "2603:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:5"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "2570:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:5"
									},
									"returnParameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:5"
									},
									"scope": 540,
									"src": "2543:215:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 538,
										"nodeType": "Block",
										"src": "2975:124:5",
										"statements": [
											{
												"assignments": [
													526
												],
												"declarations": [
													{
														"constant": false,
														"id": 526,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 538,
														"src": "2985:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 525,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 528,
												"initialValue": {
													"id": 527,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 401,
													"src": "3004:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:5"
											},
											{
												"expression": {
													"id": 531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 529,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 401,
														"src": "3020:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 530,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 522,
														"src": "3029:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 532,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 534,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "3073:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 535,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "3083:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 533,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 417,
														"src": "3052:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 536,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 537,
												"nodeType": "EmitStatement",
												"src": "3047:45:5"
											}
										]
									},
									"documentation": {
										"id": 520,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:5",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 539,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "2940:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:5"
									},
									"returnParameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:5"
									},
									"scope": 540,
									"src": "2912:187:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 541,
							"src": "663:2438:5",
							"usedErrors": [
								406,
								411
							],
							"usedEvents": [
								417
							]
						}
					],
					"src": "102:3000:5"
				},
				"id": 5
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							677
						],
						"IERC20Errors": [
							582
						],
						"IERC721Errors": [
							630
						]
					},
					"id": 678,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 542,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 543,
								"nodeType": "StructuredDocumentation",
								"src": "138:141:6",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 582,
							"linearizedBaseContracts": [
								582
							],
							"name": "IERC20Errors",
							"nameLocation": "290:12:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 544,
										"nodeType": "StructuredDocumentation",
										"src": "309:309:6",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 552,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "629:24:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "662:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 552,
												"src": "654:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 545,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "654:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "678:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 552,
												"src": "670:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "695:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 552,
												"src": "687:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 549,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:49:6"
									},
									"src": "623:80:6"
								},
								{
									"documentation": {
										"id": 553,
										"nodeType": "StructuredDocumentation",
										"src": "709:152:6",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 557,
									"name": "ERC20InvalidSender",
									"nameLocation": "872:18:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "899:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 557,
												"src": "891:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 554,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:16:6"
									},
									"src": "866:41:6"
								},
								{
									"documentation": {
										"id": 558,
										"nodeType": "StructuredDocumentation",
										"src": "913:159:6",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 562,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1083:20:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1112:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "1104:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 559,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:18:6"
									},
									"src": "1077:45:6"
								},
								{
									"documentation": {
										"id": 563,
										"nodeType": "StructuredDocumentation",
										"src": "1128:345:6",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 571,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1484:26:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1519:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 571,
												"src": "1511:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 564,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1536:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 571,
												"src": "1528:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 566,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1555:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 571,
												"src": "1547:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:52:6"
									},
									"src": "1478:85:6"
								},
								{
									"documentation": {
										"id": 572,
										"nodeType": "StructuredDocumentation",
										"src": "1569:174:6",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 576,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1754:20:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 574,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1783:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "1775:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 573,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1774:18:6"
									},
									"src": "1748:45:6"
								},
								{
									"documentation": {
										"id": 577,
										"nodeType": "StructuredDocumentation",
										"src": "1799:195:6",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 581,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2005:19:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2033:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "2025:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2025:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2024:17:6"
									},
									"src": "1999:43:6"
								}
							],
							"scope": 678,
							"src": "280:1764:6",
							"usedErrors": [
								552,
								557,
								562,
								571,
								576,
								581
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 583,
								"nodeType": "StructuredDocumentation",
								"src": "2046:143:6",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 630,
							"linearizedBaseContracts": [
								630
							],
							"name": "IERC721Errors",
							"nameLocation": "2200:13:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 584,
										"nodeType": "StructuredDocumentation",
										"src": "2220:219:6",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 588,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2450:18:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2477:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "2469:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:15:6"
									},
									"src": "2444:40:6"
								},
								{
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "2490:132:6",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 593,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2633:22:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2664:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 593,
												"src": "2656:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:17:6"
									},
									"src": "2627:46:6"
								},
								{
									"documentation": {
										"id": 594,
										"nodeType": "StructuredDocumentation",
										"src": "2679:289:6",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 602,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2979:20:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3008:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "3000:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 595,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3000:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3024:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "3016:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 597,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3041:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "3033:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2999:48:6"
									},
									"src": "2973:75:6"
								},
								{
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "3054:152:6",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 607,
									"name": "ERC721InvalidSender",
									"nameLocation": "3217:19:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3245:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "3237:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3237:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3236:16:6"
									},
									"src": "3211:42:6"
								},
								{
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "3259:159:6",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 612,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3429:21:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3459:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "3451:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:18:6"
									},
									"src": "3423:46:6"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "3475:247:6",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 619,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3733:26:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3768:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "3760:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3786:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 619,
												"src": "3778:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 616,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:35:6"
									},
									"src": "3727:68:6"
								},
								{
									"documentation": {
										"id": 620,
										"nodeType": "StructuredDocumentation",
										"src": "3801:174:6",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 624,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3986:21:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4016:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "4008:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 621,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4007:18:6"
									},
									"src": "3980:46:6"
								},
								{
									"documentation": {
										"id": 625,
										"nodeType": "StructuredDocumentation",
										"src": "4032:197:6",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 629,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4240:21:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4270:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "4262:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 626,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:18:6"
									},
									"src": "4234:46:6"
								}
							],
							"scope": 678,
							"src": "2190:2092:6",
							"usedErrors": [
								588,
								593,
								602,
								607,
								612,
								619,
								624,
								629
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 631,
								"nodeType": "StructuredDocumentation",
								"src": "4284:145:6",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 677,
							"linearizedBaseContracts": [
								677
							],
							"name": "IERC1155Errors",
							"nameLocation": "4440:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "4461:361:6",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 642,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4833:26:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4868:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "4860:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4884:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "4876:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4901:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "4893:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 637,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4917:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "4909:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:66:6"
									},
									"src": "4827:99:6"
								},
								{
									"documentation": {
										"id": 643,
										"nodeType": "StructuredDocumentation",
										"src": "4932:152:6",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 647,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5095:20:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5124:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "5116:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5115:16:6"
									},
									"src": "5089:43:6"
								},
								{
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "5138:159:6",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 652,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5308:22:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5339:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "5331:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5330:18:6"
									},
									"src": "5302:47:6"
								},
								{
									"documentation": {
										"id": 653,
										"nodeType": "StructuredDocumentation",
										"src": "5355:256:6",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 659,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5622:28:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5659:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "5651:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5651:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5677:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "5669:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5669:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5650:33:6"
									},
									"src": "5616:68:6"
								},
								{
									"documentation": {
										"id": 660,
										"nodeType": "StructuredDocumentation",
										"src": "5690:174:6",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 664,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5875:22:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5906:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "5898:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 661,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:18:6"
									},
									"src": "5869:47:6"
								},
								{
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "5922:197:6",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 669,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6130:22:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6161:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 669,
												"src": "6153:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6152:18:6"
									},
									"src": "6124:47:6"
								},
								{
									"documentation": {
										"id": 670,
										"nodeType": "StructuredDocumentation",
										"src": "6177:280:6",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 676,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6468:25:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6502:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "6494:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6494:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6521:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "6513:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6513:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6493:41:6"
									},
									"src": "6462:73:6"
								}
							],
							"scope": 678,
							"src": "4430:2107:6",
							"usedErrors": [
								642,
								647,
								652,
								659,
								664,
								669,
								676
							],
							"usedEvents": []
						}
					],
					"src": "112:6426:6"
				},
				"id": 6
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1326
						],
						"ERC20": [
							1192
						],
						"IERC20": [
							1270
						],
						"IERC20Errors": [
							582
						],
						"IERC20Metadata": [
							1296
						]
					},
					"id": 1193,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 679,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:7"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 681,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1193,
							"sourceUnit": 1271,
							"src": "131:36:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 680,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1270,
										"src": "139:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 683,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1193,
							"sourceUnit": 1297,
							"src": "168:63:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 682,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1296,
										"src": "176:14:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 685,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1193,
							"sourceUnit": 1327,
							"src": "232:48:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 684,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1326,
										"src": "240:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 687,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1193,
							"sourceUnit": 678,
							"src": "281:65:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 686,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 582,
										"src": "289:12:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 689,
										"name": "Context",
										"nameLocations": [
											"1133:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1326,
										"src": "1133:7:7"
									},
									"id": 690,
									"nodeType": "InheritanceSpecifier",
									"src": "1133:7:7"
								},
								{
									"baseName": {
										"id": 691,
										"name": "IERC20",
										"nameLocations": [
											"1142:6:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1270,
										"src": "1142:6:7"
									},
									"id": 692,
									"nodeType": "InheritanceSpecifier",
									"src": "1142:6:7"
								},
								{
									"baseName": {
										"id": 693,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1150:14:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1296,
										"src": "1150:14:7"
									},
									"id": 694,
									"nodeType": "InheritanceSpecifier",
									"src": "1150:14:7"
								},
								{
									"baseName": {
										"id": 695,
										"name": "IERC20Errors",
										"nameLocations": [
											"1166:12:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 582,
										"src": "1166:12:7"
									},
									"id": 696,
									"nodeType": "InheritanceSpecifier",
									"src": "1166:12:7"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 688,
								"nodeType": "StructuredDocumentation",
								"src": "348:757:7",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 1192,
							"linearizedBaseContracts": [
								1192,
								582,
								1296,
								1270,
								1326
							],
							"name": "ERC20",
							"nameLocation": "1124:5:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 700,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1229:9:7",
									"nodeType": "VariableDeclaration",
									"scope": 1192,
									"src": "1185:53:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 699,
										"keyName": "account",
										"keyNameLocation": "1201:7:7",
										"keyType": {
											"id": 697,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1193:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1185:35:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 698,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1212:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 706,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1317:11:7",
									"nodeType": "VariableDeclaration",
									"scope": 1192,
									"src": "1245:83:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 705,
										"keyName": "account",
										"keyNameLocation": "1261:7:7",
										"keyType": {
											"id": 701,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1253:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1245:63:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 704,
											"keyName": "spender",
											"keyNameLocation": "1288:7:7",
											"keyType": {
												"id": 702,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1280:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1272:35:7",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 703,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1299:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 708,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1351:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 1192,
									"src": "1335:28:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 707,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1335:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 710,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1385:5:7",
									"nodeType": "VariableDeclaration",
									"scope": 1192,
									"src": "1370:20:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 709,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1370:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 712,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1411:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 1192,
									"src": "1396:22:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 711,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1396:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 728,
										"nodeType": "Block",
										"src": "1638:57:7",
										"statements": [
											{
												"expression": {
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 720,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 710,
														"src": "1648:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 721,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 715,
														"src": "1656:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1648:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 723,
												"nodeType": "ExpressionStatement",
												"src": "1648:13:7"
											},
											{
												"expression": {
													"id": 726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 724,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 712,
														"src": "1671:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 725,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 717,
														"src": "1681:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1671:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 727,
												"nodeType": "ExpressionStatement",
												"src": "1671:17:7"
											}
										]
									},
									"documentation": {
										"id": 713,
										"nodeType": "StructuredDocumentation",
										"src": "1425:152:7",
										"text": " @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."
									},
									"id": 729,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1608:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 729,
												"src": "1594:19:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 714,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1594:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1629:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 729,
												"src": "1615:21:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 716,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1615:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1593:44:7"
									},
									"returnParameters": {
										"id": 719,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1638:0:7"
									},
									"scope": 1192,
									"src": "1582:113:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1283
									],
									"body": {
										"id": 737,
										"nodeType": "Block",
										"src": "1820:29:7",
										"statements": [
											{
												"expression": {
													"id": 735,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 710,
													"src": "1837:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 734,
												"id": 736,
												"nodeType": "Return",
												"src": "1830:12:7"
											}
										]
									},
									"documentation": {
										"id": 730,
										"nodeType": "StructuredDocumentation",
										"src": "1701:54:7",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 738,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1769:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:7"
									},
									"returnParameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 738,
												"src": "1805:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 732,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1805:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:15:7"
									},
									"scope": 1192,
									"src": "1760:89:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1289
									],
									"body": {
										"id": 746,
										"nodeType": "Block",
										"src": "2024:31:7",
										"statements": [
											{
												"expression": {
													"id": 744,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 712,
													"src": "2041:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 743,
												"id": 745,
												"nodeType": "Return",
												"src": "2034:14:7"
											}
										]
									},
									"documentation": {
										"id": 739,
										"nodeType": "StructuredDocumentation",
										"src": "1855:102:7",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 747,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1971:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1977:2:7"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "2009:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 741,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2009:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2008:15:7"
									},
									"scope": 1192,
									"src": "1962:93:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1295
									],
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "2744:26:7",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2761:2:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 752,
												"id": 754,
												"nodeType": "Return",
												"src": "2754:9:7"
											}
										]
									},
									"documentation": {
										"id": 748,
										"nodeType": "StructuredDocumentation",
										"src": "2061:622:7",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2697:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2705:2:7"
									},
									"returnParameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "2737:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 750,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2737:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2736:7:7"
									},
									"scope": 1192,
									"src": "2688:82:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1219
									],
									"body": {
										"id": 764,
										"nodeType": "Block",
										"src": "2864:36:7",
										"statements": [
											{
												"expression": {
													"id": 762,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 708,
													"src": "2881:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 761,
												"id": 763,
												"nodeType": "Return",
												"src": "2874:19:7"
											}
										]
									},
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "2776:22:7",
										"text": "@inheritdoc IERC20"
									},
									"functionSelector": "18160ddd",
									"id": 765,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2812:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2823:2:7"
									},
									"returnParameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "2855:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2855:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2854:9:7"
									},
									"scope": 1192,
									"src": "2803:97:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1227
									],
									"body": {
										"id": 777,
										"nodeType": "Block",
										"src": "3007:42:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 773,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 700,
														"src": "3024:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 775,
													"indexExpression": {
														"id": 774,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 768,
														"src": "3034:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3024:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 772,
												"id": 776,
												"nodeType": "Return",
												"src": "3017:25:7"
											}
										]
									},
									"documentation": {
										"id": 766,
										"nodeType": "StructuredDocumentation",
										"src": "2906:22:7",
										"text": "@inheritdoc IERC20"
									},
									"functionSelector": "70a08231",
									"id": 778,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2942:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2960:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "2952:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2952:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2951:17:7"
									},
									"returnParameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "2998:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2998:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2997:9:7"
									},
									"scope": 1192,
									"src": "2933:116:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1237
									],
									"body": {
										"id": 801,
										"nodeType": "Block",
										"src": "3319:103:7",
										"statements": [
											{
												"assignments": [
													789
												],
												"declarations": [
													{
														"constant": false,
														"id": 789,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3337:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 801,
														"src": "3329:13:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 788,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3329:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 792,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 790,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "3345:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3345:12:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3329:28:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 794,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 789,
															"src": "3377:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 795,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "3384:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 796,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "3388:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 793,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 922,
														"src": "3367:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3367:27:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 798,
												"nodeType": "ExpressionStatement",
												"src": "3367:27:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3411:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 787,
												"id": 800,
												"nodeType": "Return",
												"src": "3404:11:7"
											}
										]
									},
									"documentation": {
										"id": 779,
										"nodeType": "StructuredDocumentation",
										"src": "3055:184:7",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3253:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3270:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "3262:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3262:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3282:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "3274:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 782,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3274:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3261:27:7"
									},
									"returnParameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "3313:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 785,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3313:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3312:6:7"
									},
									"scope": 1192,
									"src": "3244:178:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1247
									],
									"body": {
										"id": 818,
										"nodeType": "Block",
										"src": "3544:51:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 812,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 706,
															"src": "3561:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 814,
														"indexExpression": {
															"id": 813,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "3573:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3561:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 816,
													"indexExpression": {
														"id": 815,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 807,
														"src": "3580:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3561:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 811,
												"id": 817,
												"nodeType": "Return",
												"src": "3554:34:7"
											}
										]
									},
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "3428:22:7",
										"text": "@inheritdoc IERC20"
									},
									"functionSelector": "dd62ed3e",
									"id": 819,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3464:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3482:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 819,
												"src": "3474:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3474:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3497:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 819,
												"src": "3489:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3473:32:7"
									},
									"returnParameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 819,
												"src": "3535:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3535:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3534:9:7"
									},
									"scope": 1192,
									"src": "3455:140:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1257
									],
									"body": {
										"id": 842,
										"nodeType": "Block",
										"src": "3981:107:7",
										"statements": [
											{
												"assignments": [
													830
												],
												"declarations": [
													{
														"constant": false,
														"id": 830,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3999:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 842,
														"src": "3991:13:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 829,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3991:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 833,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 831,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "4007:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4007:12:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3991:28:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 835,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 830,
															"src": "4038:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 836,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 822,
															"src": "4045:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 837,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 824,
															"src": "4054:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 834,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1083,
															1143
														],
														"referencedDeclaration": 1083,
														"src": "4029:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4029:31:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 839,
												"nodeType": "ExpressionStatement",
												"src": "4029:31:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4077:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 828,
												"id": 841,
												"nodeType": "Return",
												"src": "4070:11:7"
											}
										]
									},
									"documentation": {
										"id": 820,
										"nodeType": "StructuredDocumentation",
										"src": "3601:296:7",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 843,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3911:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 822,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3927:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "3919:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 821,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3919:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3944:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "3936:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3936:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3918:32:7"
									},
									"returnParameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "3975:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 826,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3975:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3974:6:7"
									},
									"scope": 1192,
									"src": "3902:186:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1269
									],
									"body": {
										"id": 874,
										"nodeType": "Block",
										"src": "4773:151:7",
										"statements": [
											{
												"assignments": [
													856
												],
												"declarations": [
													{
														"constant": false,
														"id": 856,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "4791:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 874,
														"src": "4783:15:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 855,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4783:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 859,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 857,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "4801:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 858,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4801:12:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4783:30:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 861,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "4839:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 862,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 856,
															"src": "4845:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 863,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "4854:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 860,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1191,
														"src": "4823:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4823:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 865,
												"nodeType": "ExpressionStatement",
												"src": "4823:37:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 867,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "4880:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 868,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 848,
															"src": "4886:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 869,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "4890:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 866,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 922,
														"src": "4870:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4870:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 871,
												"nodeType": "ExpressionStatement",
												"src": "4870:26:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 872,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4913:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 854,
												"id": 873,
												"nodeType": "Return",
												"src": "4906:11:7"
											}
										]
									},
									"documentation": {
										"id": 844,
										"nodeType": "StructuredDocumentation",
										"src": "4094:581:7",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 875,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4689:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4710:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "4702:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 845,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4702:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4724:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "4716:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 847,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4716:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4736:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "4728:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4728:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4701:41:7"
									},
									"returnParameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "4767:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 852,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4767:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4766:6:7"
									},
									"scope": 1192,
									"src": "4680:244:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "5366:231:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 885,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 878,
														"src": "5380:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 888,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5396:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 887,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5388:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 886,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5388:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 889,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5388:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5380:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 899,
												"nodeType": "IfStatement",
												"src": "5376:86:7",
												"trueBody": {
													"id": 898,
													"nodeType": "Block",
													"src": "5400:62:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 894,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5448:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 893,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5440:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 892,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5440:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 895,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5440:10:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 891,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 557,
																	"src": "5421:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 896,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5421:30:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 897,
															"nodeType": "RevertStatement",
															"src": "5414:37:7"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 905,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 900,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 880,
														"src": "5475:2:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 903,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5489:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 902,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5481:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 901,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5481:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 904,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5481:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5475:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 914,
												"nodeType": "IfStatement",
												"src": "5471:86:7",
												"trueBody": {
													"id": 913,
													"nodeType": "Block",
													"src": "5493:64:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 909,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5543:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 908,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5535:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 907,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5535:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 910,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5535:10:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 906,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 562,
																	"src": "5514:20:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 911,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5514:32:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 912,
															"nodeType": "RevertStatement",
															"src": "5507:39:7"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 916,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 878,
															"src": "5574:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 917,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 880,
															"src": "5580:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 918,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 882,
															"src": "5584:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 915,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 999,
														"src": "5566:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5566:24:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 920,
												"nodeType": "ExpressionStatement",
												"src": "5566:24:7"
											}
										]
									},
									"documentation": {
										"id": 876,
										"nodeType": "StructuredDocumentation",
										"src": "4930:362:7",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5306:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5324:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "5316:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5316:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5338:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "5330:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5330:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5350:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "5342:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5342:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5315:41:7"
									},
									"returnParameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5366:0:7"
									},
									"scope": 1192,
									"src": "5297:300:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 998,
										"nodeType": "Block",
										"src": "5987:1032:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 932,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 925,
														"src": "6001:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 935,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6017:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 934,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6009:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 933,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6009:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 936,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6009:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6001:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 969,
													"nodeType": "Block",
													"src": "6175:362:7",
													"statements": [
														{
															"assignments": [
																944
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 944,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6197:11:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 969,
																	"src": "6189:19:7",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 943,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6189:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 948,
															"initialValue": {
																"baseExpression": {
																	"id": 945,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 700,
																	"src": "6211:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 947,
																"indexExpression": {
																	"id": 946,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 925,
																	"src": "6221:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6211:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6189:37:7"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 949,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 944,
																	"src": "6244:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 950,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 929,
																	"src": "6258:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6244:19:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 959,
															"nodeType": "IfStatement",
															"src": "6240:115:7",
															"trueBody": {
																"id": 958,
																"nodeType": "Block",
																"src": "6265:90:7",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 953,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 925,
																					"src": "6315:4:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 954,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 944,
																					"src": "6321:11:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 955,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 929,
																					"src": "6334:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 952,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 552,
																				"src": "6290:24:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 956,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6290:50:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 957,
																		"nodeType": "RevertStatement",
																		"src": "6283:57:7"
																	}
																]
															}
														},
														{
															"id": 968,
															"nodeType": "UncheckedBlock",
															"src": "6368:159:7",
															"statements": [
																{
																	"expression": {
																		"id": 966,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 960,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 700,
																				"src": "6475:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 962,
																			"indexExpression": {
																				"id": 961,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 925,
																				"src": "6485:4:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6475:15:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 965,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 963,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 944,
																				"src": "6493:11:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 964,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 929,
																				"src": "6507:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6493:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6475:37:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 967,
																	"nodeType": "ExpressionStatement",
																	"src": "6475:37:7"
																}
															]
														}
													]
												},
												"id": 970,
												"nodeType": "IfStatement",
												"src": "5997:540:7",
												"trueBody": {
													"id": 942,
													"nodeType": "Block",
													"src": "6021:148:7",
													"statements": [
														{
															"expression": {
																"id": 940,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 938,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 708,
																	"src": "6137:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 939,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 929,
																	"src": "6153:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6137:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 941,
															"nodeType": "ExpressionStatement",
															"src": "6137:21:7"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 971,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 927,
														"src": "6551:2:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 974,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6565:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 973,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6557:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 972,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6557:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 975,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6557:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6551:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 990,
													"nodeType": "Block",
													"src": "6766:206:7",
													"statements": [
														{
															"id": 989,
															"nodeType": "UncheckedBlock",
															"src": "6780:182:7",
															"statements": [
																{
																	"expression": {
																		"id": 987,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 983,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 700,
																				"src": "6925:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 985,
																			"indexExpression": {
																				"id": 984,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 927,
																				"src": "6935:2:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6925:13:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 986,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 929,
																			"src": "6942:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6925:22:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 988,
																	"nodeType": "ExpressionStatement",
																	"src": "6925:22:7"
																}
															]
														}
													]
												},
												"id": 991,
												"nodeType": "IfStatement",
												"src": "6547:425:7",
												"trueBody": {
													"id": 982,
													"nodeType": "Block",
													"src": "6569:191:7",
													"statements": [
														{
															"id": 981,
															"nodeType": "UncheckedBlock",
															"src": "6583:167:7",
															"statements": [
																{
																	"expression": {
																		"id": 979,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 977,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 708,
																			"src": "6714:12:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 978,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 929,
																			"src": "6730:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6714:21:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 980,
																	"nodeType": "ExpressionStatement",
																	"src": "6714:21:7"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 993,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 925,
															"src": "6996:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 994,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 927,
															"src": "7002:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 995,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 929,
															"src": "7006:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 992,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1204,
														"src": "6987:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6987:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 997,
												"nodeType": "EmitStatement",
												"src": "6982:30:7"
											}
										]
									},
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "5603:304:7",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 999,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "5921:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5937:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "5929:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 924,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5929:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5951:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "5943:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5943:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5963:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "5955:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 928,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5955:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5928:41:7"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5987:0:7"
									},
									"scope": 1192,
									"src": "5912:1107:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1031,
										"nodeType": "Block",
										"src": "7418:152:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1012,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1007,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "7432:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1010,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7451:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1009,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7443:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1008,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7443:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1011,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7443:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7432:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1021,
												"nodeType": "IfStatement",
												"src": "7428:91:7",
												"trueBody": {
													"id": 1020,
													"nodeType": "Block",
													"src": "7455:64:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1016,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7505:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1015,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7497:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1014,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7497:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1017,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7497:10:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1013,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 562,
																	"src": "7476:20:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1018,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7476:32:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1019,
															"nodeType": "RevertStatement",
															"src": "7469:39:7"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1025,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7544:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1024,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7536:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1023,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7536:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1026,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7536:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1027,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1002,
															"src": "7548:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1028,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1004,
															"src": "7557:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1022,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 999,
														"src": "7528:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7528:35:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1030,
												"nodeType": "ExpressionStatement",
												"src": "7528:35:7"
											}
										]
									},
									"documentation": {
										"id": 1000,
										"nodeType": "StructuredDocumentation",
										"src": "7025:332:7",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 1032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7371:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7385:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1032,
												"src": "7377:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1001,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7377:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7402:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1032,
												"src": "7394:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7394:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7376:32:7"
									},
									"returnParameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7418:0:7"
									},
									"scope": 1192,
									"src": "7362:208:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1064,
										"nodeType": "Block",
										"src": "7944:150:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1040,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1035,
														"src": "7958:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1043,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7977:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1042,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7969:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1041,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7969:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1044,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7969:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7958:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1054,
												"nodeType": "IfStatement",
												"src": "7954:89:7",
												"trueBody": {
													"id": 1053,
													"nodeType": "Block",
													"src": "7981:62:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1049,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8029:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1048,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8021:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1047,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8021:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1050,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8021:10:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1046,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 557,
																	"src": "8002:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8002:30:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1052,
															"nodeType": "RevertStatement",
															"src": "7995:37:7"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1056,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "8060:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1059,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8077:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1058,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8069:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1057,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8069:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1060,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8069:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1061,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1037,
															"src": "8081:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1055,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 999,
														"src": "8052:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8052:35:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1063,
												"nodeType": "ExpressionStatement",
												"src": "8052:35:7"
											}
										]
									},
									"documentation": {
										"id": 1033,
										"nodeType": "StructuredDocumentation",
										"src": "7576:307:7",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 1065,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "7897:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7911:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "7903:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7903:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7928:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "7920:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7920:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7902:32:7"
									},
									"returnParameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7944:0:7"
									},
									"scope": 1192,
									"src": "7888:206:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "8704:54:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1076,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1068,
															"src": "8723:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1077,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "8730:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1078,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1072,
															"src": "8739:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1079,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8746:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1075,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1083,
															1143
														],
														"referencedDeclaration": 1143,
														"src": "8714:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8714:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1081,
												"nodeType": "ExpressionStatement",
												"src": "8714:37:7"
											}
										]
									},
									"documentation": {
										"id": 1066,
										"nodeType": "StructuredDocumentation",
										"src": "8100:525:7",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 1083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8639:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8656:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "8648:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8648:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8671:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "8663:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1069,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8663:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8688:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "8680:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1071,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8680:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8647:47:7"
									},
									"returnParameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8704:0:7"
									},
									"scope": 1192,
									"src": "8630:128:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1142,
										"nodeType": "Block",
										"src": "9703:334:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1095,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1086,
														"src": "9717:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1098,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9734:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1097,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9726:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1096,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9726:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1099,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9726:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9717:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1109,
												"nodeType": "IfStatement",
												"src": "9713:89:7",
												"trueBody": {
													"id": 1108,
													"nodeType": "Block",
													"src": "9738:64:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1104,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9788:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1103,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9780:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1102,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9780:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1105,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9780:10:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1101,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 576,
																	"src": "9759:20:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9759:32:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1107,
															"nodeType": "RevertStatement",
															"src": "9752:39:7"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1110,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1088,
														"src": "9815:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1113,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9834:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9826:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1111,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9826:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9826:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9815:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1124,
												"nodeType": "IfStatement",
												"src": "9811:90:7",
												"trueBody": {
													"id": 1123,
													"nodeType": "Block",
													"src": "9838:63:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1119,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9887:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9879:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1117,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9879:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9879:10:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1116,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 581,
																	"src": "9859:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1121,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9859:31:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1122,
															"nodeType": "RevertStatement",
															"src": "9852:38:7"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1125,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 706,
																"src": "9910:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1128,
															"indexExpression": {
																"id": 1126,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1086,
																"src": "9922:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9910:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1129,
														"indexExpression": {
															"id": 1127,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1088,
															"src": "9929:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9910:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1130,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1090,
														"src": "9940:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9910:35:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1132,
												"nodeType": "ExpressionStatement",
												"src": "9910:35:7"
											},
											{
												"condition": {
													"id": 1133,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1092,
													"src": "9959:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1141,
												"nodeType": "IfStatement",
												"src": "9955:76:7",
												"trueBody": {
													"id": 1140,
													"nodeType": "Block",
													"src": "9970:61:7",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1135,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1086,
																		"src": "9998:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1136,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1088,
																		"src": "10005:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1137,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1090,
																		"src": "10014:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1134,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1213,
																	"src": "9989:8:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1138,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9989:31:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1139,
															"nodeType": "EmitStatement",
															"src": "9984:36:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1084,
										"nodeType": "StructuredDocumentation",
										"src": "8764:836:7",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 1143,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9614:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9631:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "9623:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1085,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9623:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9646:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "9638:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9638:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9663:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "9655:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9655:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "9675:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "9670:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1091,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9670:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9622:63:7"
									},
									"returnParameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9703:0:7"
									},
									"scope": 1192,
									"src": "9605:432:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1190,
										"nodeType": "Block",
										"src": "10408:387:7",
										"statements": [
											{
												"assignments": [
													1154
												],
												"declarations": [
													{
														"constant": false,
														"id": 1154,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10426:16:7",
														"nodeType": "VariableDeclaration",
														"scope": 1190,
														"src": "10418:24:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1153,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10418:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1159,
												"initialValue": {
													"arguments": [
														{
															"id": 1156,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1146,
															"src": "10455:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1157,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1148,
															"src": "10462:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1155,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "10445:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10445:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10418:52:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1160,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1154,
														"src": "10484:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10508:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1162,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10508:7:7",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1161,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10503:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1164,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10503:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1165,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10517:3:7",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10503:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10484:36:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1189,
												"nodeType": "IfStatement",
												"src": "10480:309:7",
												"trueBody": {
													"id": 1188,
													"nodeType": "Block",
													"src": "10522:267:7",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1169,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1167,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1154,
																	"src": "10540:16:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1168,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1150,
																	"src": "10559:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10540:24:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1177,
															"nodeType": "IfStatement",
															"src": "10536:130:7",
															"trueBody": {
																"id": 1176,
																"nodeType": "Block",
																"src": "10566:100:7",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1171,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1148,
																					"src": "10618:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1172,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1154,
																					"src": "10627:16:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1173,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1150,
																					"src": "10645:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1170,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 571,
																				"src": "10591:26:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 1174,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10591:60:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1175,
																		"nodeType": "RevertStatement",
																		"src": "10584:67:7"
																	}
																]
															}
														},
														{
															"id": 1187,
															"nodeType": "UncheckedBlock",
															"src": "10679:100:7",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1179,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1146,
																				"src": "10716:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1180,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1148,
																				"src": "10723:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1183,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1181,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1154,
																					"src": "10732:16:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1182,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1150,
																					"src": "10751:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10732:24:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 1184,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10758:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 1178,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				1083,
																				1143
																			],
																			"referencedDeclaration": 1143,
																			"src": "10707:8:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 1185,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10707:57:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1186,
																	"nodeType": "ExpressionStatement",
																	"src": "10707:57:7"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1144,
										"nodeType": "StructuredDocumentation",
										"src": "10043:271:7",
										"text": " @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 1191,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10328:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10352:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "10344:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1145,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10344:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10367:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "10359:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10359:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10384:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "10376:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10376:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10343:47:7"
									},
									"returnParameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10408:0:7"
									},
									"scope": 1192,
									"src": "10319:476:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1193,
							"src": "1106:9691:7",
							"usedErrors": [
								552,
								557,
								562,
								571,
								576,
								581
							],
							"usedEvents": [
								1204,
								1213
							]
						}
					],
					"src": "105:10693:7"
				},
				"id": 7
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1270
						]
					},
					"id": 1271,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1194,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1195,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:8",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 1270,
							"linearizedBaseContracts": [
								1270
							],
							"name": "IERC20",
							"nameLocation": "214:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1196,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:8",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1204,
									"name": "Transfer",
									"nameLocation": "396:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "405:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "427:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1202,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "447:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:8"
									},
									"src": "390:72:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1205,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:8",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1213,
									"name": "Approval",
									"nameLocation": "627:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1207,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1213,
												"src": "636:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1209,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1213,
												"src": "659:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1211,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1213,
												"src": "684:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:8"
									},
									"src": "621:78:8"
								},
								{
									"documentation": {
										"id": 1214,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:8",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:8"
									},
									"returnParameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1219,
												"src": "821:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:8"
									},
									"scope": 1270,
									"src": "775:55:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1220,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:8",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1227,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1222,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "931:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:8"
									},
									"returnParameters": {
										"id": 1226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "971:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:8"
									},
									"scope": 1270,
									"src": "912:68:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1228,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:8",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "1222:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "1234:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:8"
									},
									"returnParameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "1267:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1234,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:8"
									},
									"scope": 1270,
									"src": "1204:69:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1238,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:8",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1247,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1247,
												"src": "1567:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1247,
												"src": "1582:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:8"
									},
									"returnParameters": {
										"id": 1246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1247,
												"src": "1622:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:8"
									},
									"scope": 1270,
									"src": "1548:83:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1248,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:8",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1257,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "2326:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1252,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "2343:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:8"
									},
									"returnParameters": {
										"id": 1256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "2376:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1254,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:8"
									},
									"scope": 1270,
									"src": "2309:73:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1258,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:8",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "2712:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "2726:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "2738:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1263,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:8"
									},
									"returnParameters": {
										"id": 1268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "2771:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1266,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:8"
									},
									"scope": 1270,
									"src": "2690:87:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1271,
							"src": "204:2575:8",
							"usedErrors": [],
							"usedEvents": [
								1204,
								1213
							]
						}
					],
					"src": "106:2674:8"
				},
				"id": 8
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1270
						],
						"IERC20Metadata": [
							1296
						]
					},
					"id": 1297,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1272,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:9"
						},
						{
							"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1274,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1297,
							"sourceUnit": 1271,
							"src": "151:37:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1273,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1270,
										"src": "159:6:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1276,
										"name": "IERC20",
										"nameLocations": [
											"306:6:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1270,
										"src": "306:6:9"
									},
									"id": 1277,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:9"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1275,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:9",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 1296,
							"linearizedBaseContracts": [
								1296,
								1270
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1278,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:9",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1283,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1279,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:9"
									},
									"returnParameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "417:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1280,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:9"
									},
									"scope": 1296,
									"src": "378:54:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1284,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:9",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1289,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:9"
									},
									"returnParameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "540:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1286,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:9"
									},
									"scope": 1296,
									"src": "499:56:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1290,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:9",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:9"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "674:5:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1292,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:9"
									},
									"scope": 1296,
									"src": "631:50:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1297,
							"src": "278:405:9",
							"usedErrors": [],
							"usedEvents": [
								1204,
								1213
							]
						}
					],
					"src": "125:559:9"
				},
				"id": 9
			},
			"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1326
						]
					},
					"id": 1327,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1298,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:10"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1299,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:10",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1326,
							"linearizedBaseContracts": [
								1326
							],
							"name": "Context",
							"nameLocation": "642:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1307,
										"nodeType": "Block",
										"src": "718:34:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1304,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:10",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1303,
												"id": 1306,
												"nodeType": "Return",
												"src": "728:17:10"
											}
										]
									},
									"id": 1308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:10"
									},
									"returnParameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "709:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:10"
									},
									"scope": 1326,
									"src": "656:96:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1316,
										"nodeType": "Block",
										"src": "825:32:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1313,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:10",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1312,
												"id": 1315,
												"nodeType": "Return",
												"src": "835:15:10"
											}
										]
									},
									"id": 1317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:10"
									},
									"returnParameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "809:14:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1310,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:10"
									},
									"scope": 1326,
									"src": "758:99:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1324,
										"nodeType": "Block",
										"src": "935:25:10",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1322,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1321,
												"id": 1323,
												"nodeType": "Return",
												"src": "945:8:10"
											}
										]
									},
									"id": 1325,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:10"
									},
									"returnParameters": {
										"id": 1321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1320,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "926:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:10"
									},
									"scope": 1326,
									"src": "863:97:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1327,
							"src": "624:338:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:10"
				},
				"id": 10
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							1348
						],
						"IUniswapV3PoolActions": [
							1444
						],
						"IUniswapV3PoolDerivedState": [
							1475
						],
						"IUniswapV3PoolEvents": [
							1594
						],
						"IUniswapV3PoolImmutables": [
							1634
						],
						"IUniswapV3PoolOwnerActions": [
							1660
						],
						"IUniswapV3PoolState": [
							1768
						]
					},
					"id": 1349,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1328,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:11"
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
							"file": "./pool/IUniswapV3PoolImmutables.sol",
							"id": 1329,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1349,
							"sourceUnit": 1635,
							"src": "71:45:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol",
							"file": "./pool/IUniswapV3PoolState.sol",
							"id": 1330,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1349,
							"sourceUnit": 1769,
							"src": "117:40:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
							"file": "./pool/IUniswapV3PoolDerivedState.sol",
							"id": 1331,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1349,
							"sourceUnit": 1476,
							"src": "158:47:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
							"file": "./pool/IUniswapV3PoolActions.sol",
							"id": 1332,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1349,
							"sourceUnit": 1445,
							"src": "206:42:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
							"file": "./pool/IUniswapV3PoolOwnerActions.sol",
							"id": 1333,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1349,
							"sourceUnit": 1661,
							"src": "249:47:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
							"file": "./pool/IUniswapV3PoolEvents.sol",
							"id": 1334,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1349,
							"sourceUnit": 1595,
							"src": "297:41:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1336,
										"name": "IUniswapV3PoolImmutables",
										"nameLocations": [
											"637:24:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1634,
										"src": "637:24:11"
									},
									"id": 1337,
									"nodeType": "InheritanceSpecifier",
									"src": "637:24:11"
								},
								{
									"baseName": {
										"id": 1338,
										"name": "IUniswapV3PoolState",
										"nameLocations": [
											"667:19:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1768,
										"src": "667:19:11"
									},
									"id": 1339,
									"nodeType": "InheritanceSpecifier",
									"src": "667:19:11"
								},
								{
									"baseName": {
										"id": 1340,
										"name": "IUniswapV3PoolDerivedState",
										"nameLocations": [
											"692:26:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1475,
										"src": "692:26:11"
									},
									"id": 1341,
									"nodeType": "InheritanceSpecifier",
									"src": "692:26:11"
								},
								{
									"baseName": {
										"id": 1342,
										"name": "IUniswapV3PoolActions",
										"nameLocations": [
											"724:21:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1444,
										"src": "724:21:11"
									},
									"id": 1343,
									"nodeType": "InheritanceSpecifier",
									"src": "724:21:11"
								},
								{
									"baseName": {
										"id": 1344,
										"name": "IUniswapV3PoolOwnerActions",
										"nameLocations": [
											"751:26:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1660,
										"src": "751:26:11"
									},
									"id": 1345,
									"nodeType": "InheritanceSpecifier",
									"src": "751:26:11"
								},
								{
									"baseName": {
										"id": 1346,
										"name": "IUniswapV3PoolEvents",
										"nameLocations": [
											"783:20:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1594,
										"src": "783:20:11"
									},
									"id": 1347,
									"nodeType": "InheritanceSpecifier",
									"src": "783:20:11"
								}
							],
							"canonicalName": "IUniswapV3Pool",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1335,
								"nodeType": "StructuredDocumentation",
								"src": "340:265:11",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 1348,
							"linearizedBaseContracts": [
								1348,
								1594,
								1660,
								1444,
								1475,
								1768,
								1634
							],
							"name": "IUniswapV3Pool",
							"nameLocation": "615:14:11",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1349,
							"src": "605:203:11",
							"usedErrors": [],
							"usedEvents": [
								1485,
								1502,
								1517,
								1532,
								1549,
								1564,
								1571,
								1582,
								1593
							]
						}
					],
					"src": "45:764:11"
				},
				"id": 11
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							1444
						]
					},
					"id": 1445,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1350,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolActions",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1351,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:12",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 1444,
							"linearizedBaseContracts": [
								1444
							],
							"name": "IUniswapV3PoolActions",
							"nameLocation": "183:21:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1352,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:12",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 1357,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "431:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "450:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 1357,
												"src": "442:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1353,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:12"
									},
									"returnParameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:12"
									},
									"scope": 1444,
									"src": "422:51:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1358,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:12",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 1375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "1522:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1360,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1544:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "1536:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1569:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "1563:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1361,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "1594:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "1588:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1363,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1621:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "1613:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1365,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1652:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "1637:19:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1367,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:12"
									},
									"returnParameters": {
										"id": 1374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1689:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "1681:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1706:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1375,
												"src": "1698:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:12"
									},
									"scope": 1444,
									"src": "1513:202:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1376,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:12",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 1393,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nameLocation": "2788:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2813:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2805:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2838:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2832:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1379,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1382,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2863:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2857:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1381,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1384,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nameLocation": "2890:16:12",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2882:24:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1383,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1386,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nameLocation": "2924:16:12",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2916:24:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1385,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:12"
									},
									"returnParameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2973:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2965:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1388,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2990:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1393,
												"src": "2982:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1390,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:12"
									},
									"scope": 1444,
									"src": "2779:220:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1394,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:12",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 1407,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "3650:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1396,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "3670:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1407,
												"src": "3664:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1395,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "3695:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1407,
												"src": "3689:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1397,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3722:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1407,
												"src": "3714:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1399,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:12"
									},
									"returnParameters": {
										"id": 1406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "3761:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1407,
												"src": "3753:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "3778:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1407,
												"src": "3770:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1404,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:12"
									},
									"scope": 1444,
									"src": "3641:146:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1408,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:12",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 1425,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nameLocation": "4822:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1410,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4844:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4836:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1409,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1412,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nameLocation": "4868:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4863:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1411,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nameLocation": "4895:15:12",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4888:22:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1413,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nameLocation": "4928:17:12",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4920:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1415,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1418,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4970:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4955:19:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1417,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:12"
									},
									"returnParameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5006:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4999:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1420,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5022:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "5015:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1422,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:12"
									},
									"scope": 1444,
									"src": "4813:218:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:12",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 1437,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nameLocation": "5708:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5731:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "5723:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1427,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5758:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "5750:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5783:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "5775:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5815:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "5800:19:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1433,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:12"
									},
									"returnParameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:12"
									},
									"scope": 1444,
									"src": "5699:136:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1438,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:12",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 1443,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nameLocation": "6222:34:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nameLocation": "6264:26:12",
												"nodeType": "VariableDeclaration",
												"scope": 1443,
												"src": "6257:33:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1439,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:12"
									},
									"returnParameters": {
										"id": 1442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:12"
									},
									"scope": 1444,
									"src": "6213:88:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1445,
							"src": "173:6130:12",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:6259:12"
				},
				"id": 12
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							1475
						]
					},
					"id": 1476,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1446,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolDerivedState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1447,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:13",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 1475,
							"linearizedBaseContracts": [
								1475
							],
							"name": "IUniswapV3PoolDerivedState",
							"nameLocation": "303:26:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1448,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:13",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 1460,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nameLocation": "1395:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nameLocation": "1421:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "1403:29:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1449,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 1450,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:13"
									},
									"returnParameters": {
										"id": 1459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nameLocation": "1496:15:13",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "1481:30:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 1453,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 1454,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nameLocation": "1530:34:13",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "1513:51:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 1456,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 1457,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:13"
									},
									"scope": 1475,
									"src": "1386:180:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1461,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:13",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 1474,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nameLocation": "2357:25:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2389:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "2383:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1462,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2406:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "2400:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1464,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:13"
									},
									"returnParameters": {
										"id": 1473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nameLocation": "2483:20:13",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "2477:26:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1467,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nameLocation": "2525:29:13",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "2517:37:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1469,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "secondsInside",
												"nameLocation": "2575:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1474,
												"src": "2568:20:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1471,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:13"
									},
									"scope": 1475,
									"src": "2348:251:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1476,
							"src": "293:2308:13",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:2557:13"
				},
				"id": 13
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							1594
						]
					},
					"id": 1595,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1477,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolEvents",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1478,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:14",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 1594,
							"linearizedBaseContracts": [
								1594
							],
							"name": "IUniswapV3PoolEvents",
							"nameLocation": "169:20:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1479,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:14",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"eventSelector": "98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95",
									"id": 1485,
									"name": "Initialize",
									"nameLocation": "551:10:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1481,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "570:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "562:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1480,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1483,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "590:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "584:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1482,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:14"
									},
									"src": "545:51:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1486,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:14",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"eventSelector": "7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde",
									"id": 1502,
									"name": "Mint",
									"nameLocation": "1164:4:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1488,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1186:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "1178:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1487,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1490,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1218:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "1202:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1489,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1492,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1247:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "1233:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1491,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1494,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "1280:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "1266:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1493,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1496,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1307:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "1299:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1495,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1331:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "1323:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1497,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1356:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1502,
												"src": "1348:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:14"
									},
									"src": "1158:212:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1503,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:14",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"eventSelector": "70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0",
									"id": 1517,
									"name": "Collect",
									"nameLocation": "1880:7:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1505,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1913:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "1897:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1504,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1507,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1936:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "1928:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1506,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1969:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "1955:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1508,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1511,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2002:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "1988:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1510,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1513,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2029:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "2021:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1512,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1515,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2054:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "2046:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1514,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:14"
									},
									"src": "1874:194:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1518,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:14",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"eventSelector": "0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c",
									"id": 1532,
									"name": "Burn",
									"nameLocation": "2608:4:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1520,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2638:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "2622:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2667:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "2653:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1521,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1524,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2700:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "2686:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1523,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1526,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "2719:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1525,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1528,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2751:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "2743:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1527,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1530,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2776:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1532,
												"src": "2768:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:14"
									},
									"src": "2602:188:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1533,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:14",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"eventSelector": "c42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67",
									"id": 1549,
									"name": "Swap",
									"nameLocation": "3407:4:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1535,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3437:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "3421:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1537,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3469:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "3453:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1536,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1539,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "3495:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "3488:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1538,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1541,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "3519:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "3512:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1540,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1543,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "3544:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "3536:20:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1542,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1545,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "3574:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "3566:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1544,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1547,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "3599:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "3593:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1546,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:14"
									},
									"src": "3401:209:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1550,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:14",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"eventSelector": "bdbdb71d7860376ba52b25a5028beea23581364a40522f6bcfb86bb1f2dca633",
									"id": 1564,
									"name": "Flash",
									"nameLocation": "4189:5:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1552,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4220:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "4204:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1554,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4252:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "4236:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1556,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "4279:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "4271:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1558,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "4304:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "4296:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1560,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nameLocation": "4329:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "4321:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1559,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1562,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nameLocation": "4352:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "4344:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:14"
									},
									"src": "4183:181:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1565,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:14",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"eventSelector": "ac49e518f90a358f652e4400164f05a5d8f7e35e7747279bc3a93dbf584e125a",
									"id": 1571,
									"name": "IncreaseObservationCardinalityNext",
									"nameLocation": "4832:34:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1567,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nameLocation": "4883:29:14",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "4876:36:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1566,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1569,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nameLocation": "4929:29:14",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "4922:36:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1568,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:14"
									},
									"src": "4826:139:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1572,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:14",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"eventSelector": "973d8d92bb299f4af6ce49b52a8adb85ae46b9f214c4c4fc06ac77401237b133",
									"id": 1582,
									"name": "SetFeeProtocol",
									"nameLocation": "5352:14:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1574,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nameLocation": "5373:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "5367:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1573,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1576,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nameLocation": "5396:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "5390:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1575,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1578,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nameLocation": "5419:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "5413:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1577,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1580,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nameLocation": "5442:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "5436:21:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1579,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:14"
									},
									"src": "5346:113:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1583,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:14",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"eventSelector": "596b573906218d3411850b26a6b437d6c4522fdb43d2d2386263f86d50b8b151",
									"id": 1593,
									"name": "CollectProtocol",
									"nameLocation": "5860:15:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1585,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5892:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5876:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1584,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1587,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5916:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5900:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1589,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5935:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5927:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1588,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1591,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5952:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "5944:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1590,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:14"
									},
									"src": "5854:107:14"
								}
							],
							"scope": 1595,
							"src": "159:5804:14",
							"usedErrors": [],
							"usedEvents": [
								1485,
								1502,
								1517,
								1532,
								1549,
								1564,
								1571,
								1582,
								1593
							]
						}
					],
					"src": "45:5919:14"
				},
				"id": 14
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							1634
						]
					},
					"id": 1635,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1596,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolImmutables",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1597,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:15",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 1634,
							"linearizedBaseContracts": [
								1634
							],
							"name": "IUniswapV3PoolImmutables",
							"nameLocation": "234:24:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1598,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:15",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 1603,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nameLocation": "417:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:15"
									},
									"returnParameters": {
										"id": 1602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1601,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1603,
												"src": "450:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1600,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:15"
									},
									"scope": 1634,
									"src": "408:51:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1604,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:15",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 1609,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nameLocation": "592:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:15"
									},
									"returnParameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "624:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:15"
									},
									"scope": 1634,
									"src": "583:50:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1610,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:15",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 1615,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nameLocation": "767:6:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:15"
									},
									"returnParameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1615,
												"src": "799:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1612,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:15"
									},
									"scope": 1634,
									"src": "758:50:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1616,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:15",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 1621,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nameLocation": "912:3:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1617,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:15"
									},
									"returnParameters": {
										"id": 1620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1619,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "941:6:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1618,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:15"
									},
									"scope": 1634,
									"src": "903:46:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1622,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:15",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 1627,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nameLocation": "1327:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1623,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:15"
									},
									"returnParameters": {
										"id": 1626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1625,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1627,
												"src": "1364:5:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1624,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:15"
									},
									"scope": 1634,
									"src": "1318:53:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1628,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:15",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 1633,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nameLocation": "1754:19:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1629,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:15"
									},
									"returnParameters": {
										"id": 1632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1631,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "1799:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1630,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:15"
									},
									"scope": 1634,
									"src": "1745:63:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1635,
							"src": "224:1586:15",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1766:15"
				},
				"id": 15
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							1660
						]
					},
					"id": 1661,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1636,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolOwnerActions",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1637,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:16",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 1660,
							"linearizedBaseContracts": [
								1660
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nameLocation": "197:26:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1638,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:16",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 1645,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nameLocation": "449:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1640,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nameLocation": "470:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1645,
												"src": "464:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1639,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1642,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nameLocation": "490:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1645,
												"src": "484:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1641,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:16"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:16"
									},
									"scope": 1660,
									"src": "440:73:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1646,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:16",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 1659,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nameLocation": "1016:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1648,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1049:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "1041:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1647,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1650,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nameLocation": "1076:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "1068:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1649,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1652,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nameLocation": "1110:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "1102:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1651,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:16"
									},
									"returnParameters": {
										"id": 1658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1655,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1159:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "1151:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1654,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1657,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1176:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1659,
												"src": "1168:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1656,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:16"
									},
									"scope": 1660,
									"src": "1007:178:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1661,
							"src": "187:1000:16",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1143:16"
				},
				"id": 16
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							1768
						]
					},
					"id": 1769,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1662,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1663,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:17",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 1768,
							"linearizedBaseContracts": [
								1768
							],
							"name": "IUniswapV3PoolState",
							"nameLocation": "250:19:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1664,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:17",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 1681,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nameLocation": "1430:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1665,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:17"
									},
									"returnParameters": {
										"id": 1680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1667,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "1506:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 1681,
												"src": "1498:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1666,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "1538:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 1681,
												"src": "1532:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1668,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "observationIndex",
												"nameLocation": "1563:16:17",
												"nodeType": "VariableDeclaration",
												"scope": 1681,
												"src": "1556:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1670,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1673,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nameLocation": "1600:22:17",
												"nodeType": "VariableDeclaration",
												"scope": 1681,
												"src": "1593:29:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1672,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1675,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nameLocation": "1643:26:17",
												"nodeType": "VariableDeclaration",
												"scope": 1681,
												"src": "1636:33:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1674,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1677,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nameLocation": "1689:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 1681,
												"src": "1683:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1676,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1679,
												"mutability": "mutable",
												"name": "unlocked",
												"nameLocation": "1719:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 1681,
												"src": "1714:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1678,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:17"
									},
									"scope": 1768,
									"src": "1421:317:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1682,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:17",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 1687,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nameLocation": "1926:20:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1683,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:17"
									},
									"returnParameters": {
										"id": 1686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1685,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1687,
												"src": "1972:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:17"
									},
									"scope": 1768,
									"src": "1917:64:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1688,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:17",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 1693,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nameLocation": "2169:20:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:17"
									},
									"returnParameters": {
										"id": 1692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1693,
												"src": "2215:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:17"
									},
									"scope": 1768,
									"src": "2160:64:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1694,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:17",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 1701,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nameLocation": "2391:12:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:17"
									},
									"returnParameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1697,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "2437:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "2429:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1696,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "2453:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1701,
												"src": "2445:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1698,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:17"
									},
									"scope": 1768,
									"src": "2382:79:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1702,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:17",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 1707,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nameLocation": "2631:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:17"
									},
									"returnParameters": {
										"id": 1706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1705,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "2666:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1704,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:17"
									},
									"scope": 1768,
									"src": "2622:53:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1708,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:17",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 1729,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nameLocation": "3939:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1710,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "3951:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "3945:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1709,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:17"
									},
									"returnParameters": {
										"id": 1728,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nameLocation": "4025:14:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "4017:22:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1712,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1715,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nameLocation": "4060:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "4053:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1714,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1717,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nameLocation": "4094:21:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "4086:29:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nameLocation": "4137:21:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "4129:29:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1721,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nameLocation": "4178:21:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "4172:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1720,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1723,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nameLocation": "4221:30:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "4213:38:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1722,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1725,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nameLocation": "4272:14:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "4265:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1724,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1727,
												"mutability": "mutable",
												"name": "initialized",
												"nameLocation": "4305:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 1729,
												"src": "4300:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1726,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:17"
									},
									"scope": 1768,
									"src": "3930:397:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1730,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:17",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 1737,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nameLocation": "4446:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1732,
												"mutability": "mutable",
												"name": "wordPosition",
												"nameLocation": "4463:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 1737,
												"src": "4457:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 1731,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:17"
									},
									"returnParameters": {
										"id": 1736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1737,
												"src": "4500:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1734,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:17"
									},
									"scope": 1768,
									"src": "4437:72:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1738,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:17",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 1753,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nameLocation": "5229:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1740,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "5247:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "5239:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1739,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:17"
									},
									"returnParameters": {
										"id": 1752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "_liquidity",
												"nameLocation": "5320:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "5312:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1742,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1745,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nameLocation": "5352:24:17",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "5344:32:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1744,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1747,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nameLocation": "5398:24:17",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "5390:32:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1746,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1749,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nameLocation": "5444:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "5436:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1748,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1751,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nameLocation": "5477:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 1753,
												"src": "5469:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1750,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:17"
									},
									"scope": 1768,
									"src": "5220:279:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1754,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:17",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 1767,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nameLocation": "6268:12:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "6289:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 1767,
												"src": "6281:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1755,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:17"
									},
									"returnParameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nameLocation": "6363:14:17",
												"nodeType": "VariableDeclaration",
												"scope": 1767,
												"src": "6356:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1758,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nameLocation": "6397:14:17",
												"nodeType": "VariableDeclaration",
												"scope": 1767,
												"src": "6391:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1760,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nameLocation": "6433:33:17",
												"nodeType": "VariableDeclaration",
												"scope": 1767,
												"src": "6425:41:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1762,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "initialized",
												"nameLocation": "6485:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 1767,
												"src": "6480:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1764,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:17"
									},
									"scope": 1768,
									"src": "6259:248:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1769,
							"src": "240:6269:17",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:6465:17"
				},
				"id": 17
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol",
					"exportedSymbols": {
						"IERC165": [
							186
						],
						"IERC721": [
							116
						],
						"IERC721Permit": [
							1803
						]
					},
					"id": 1804,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1770,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:18"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1771,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1804,
							"sourceUnit": 117,
							"src": "71:58:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1773,
										"name": "IERC721",
										"nameLocations": [
											"282:7:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 116,
										"src": "282:7:18"
									},
									"id": 1774,
									"nodeType": "InheritanceSpecifier",
									"src": "282:7:18"
								}
							],
							"canonicalName": "IERC721Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1772,
								"nodeType": "StructuredDocumentation",
								"src": "131:124:18",
								"text": "@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"
							},
							"fullyImplemented": false,
							"id": 1803,
							"linearizedBaseContracts": [
								1803,
								116,
								186
							],
							"name": "IERC721Permit",
							"nameLocation": "265:13:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1775,
										"nodeType": "StructuredDocumentation",
										"src": "296:104:18",
										"text": "@notice The permit typehash used in the permit signature\n @return The typehash for the permit"
									},
									"functionSelector": "30adf81f",
									"id": 1780,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "414:15:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1776,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "429:2:18"
									},
									"returnParameters": {
										"id": 1779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1778,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "455:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1777,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "454:9:18"
									},
									"scope": 1803,
									"src": "405:59:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1781,
										"nodeType": "StructuredDocumentation",
										"src": "470:135:18",
										"text": "@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"
									},
									"functionSelector": "3644e515",
									"id": 1786,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "619:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:18"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "661:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1783,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:9:18"
									},
									"scope": 1803,
									"src": "610:60:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1787,
										"nodeType": "StructuredDocumentation",
										"src": "676:605:18",
										"text": "@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "7ac2ff7b",
									"id": 1802,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1295:6:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1789,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1319:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "1311:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1788,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1311:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1344:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "1336:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1336:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1793,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1369:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "1361:16:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1795,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1393:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "1387:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1794,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1387:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1797,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1412:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "1404:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1796,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1404:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1799,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1431:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 1802,
												"src": "1423:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1798,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1301:137:18"
									},
									"returnParameters": {
										"id": 1801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:0:18"
									},
									"scope": 1803,
									"src": "1286:170:18",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1804,
							"src": "255:1203:18",
							"usedErrors": [],
							"usedEvents": [
								15,
								24,
								33
							]
						}
					],
					"src": "45:1414:18"
				},
				"id": 18
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"IERC165": [
							186
						],
						"IERC721": [
							116
						],
						"IERC721Enumerable": [
							147
						],
						"IERC721Metadata": [
							174
						],
						"IERC721Permit": [
							1803
						],
						"INonfungiblePositionManager": [
							2001
						],
						"IPeripheryImmutableState": [
							2017
						],
						"IPeripheryPayments": [
							2043
						],
						"IPoolInitializer": [
							2062
						]
					},
					"id": 2002,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1805,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:19"
						},
						{
							"id": 1806,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:19"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"id": 1807,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 175,
							"src": "91:66:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"id": 1808,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 148,
							"src": "158:68:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol",
							"file": "./IPoolInitializer.sol",
							"id": 1809,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 2063,
							"src": "228:32:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IERC721Permit.sol",
							"file": "./IERC721Permit.sol",
							"id": 1810,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 1804,
							"src": "261:29:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol",
							"file": "./IPeripheryPayments.sol",
							"id": 1811,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 2044,
							"src": "291:34:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "./IPeripheryImmutableState.sol",
							"id": 1812,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 2018,
							"src": "326:40:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1814,
										"name": "IPoolInitializer",
										"nameLocations": [
											"590:16:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2062,
										"src": "590:16:19"
									},
									"id": 1815,
									"nodeType": "InheritanceSpecifier",
									"src": "590:16:19"
								},
								{
									"baseName": {
										"id": 1816,
										"name": "IPeripheryPayments",
										"nameLocations": [
											"612:18:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2043,
										"src": "612:18:19"
									},
									"id": 1817,
									"nodeType": "InheritanceSpecifier",
									"src": "612:18:19"
								},
								{
									"baseName": {
										"id": 1818,
										"name": "IPeripheryImmutableState",
										"nameLocations": [
											"636:24:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2017,
										"src": "636:24:19"
									},
									"id": 1819,
									"nodeType": "InheritanceSpecifier",
									"src": "636:24:19"
								},
								{
									"baseName": {
										"id": 1820,
										"name": "IERC721Metadata",
										"nameLocations": [
											"666:15:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 174,
										"src": "666:15:19"
									},
									"id": 1821,
									"nodeType": "InheritanceSpecifier",
									"src": "666:15:19"
								},
								{
									"baseName": {
										"id": 1822,
										"name": "IERC721Enumerable",
										"nameLocations": [
											"687:17:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "687:17:19"
									},
									"id": 1823,
									"nodeType": "InheritanceSpecifier",
									"src": "687:17:19"
								},
								{
									"baseName": {
										"id": 1824,
										"name": "IERC721Permit",
										"nameLocations": [
											"710:13:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1803,
										"src": "710:13:19"
									},
									"id": 1825,
									"nodeType": "InheritanceSpecifier",
									"src": "710:13:19"
								}
							],
							"canonicalName": "INonfungiblePositionManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1813,
								"nodeType": "StructuredDocumentation",
								"src": "368:177:19",
								"text": "@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 2001,
							"linearizedBaseContracts": [
								2001,
								1803,
								147,
								174,
								116,
								186,
								2017,
								2043,
								2062
							],
							"name": "INonfungiblePositionManager",
							"nameLocation": "555:27:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1826,
										"nodeType": "StructuredDocumentation",
										"src": "730:458:19",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"eventSelector": "3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f",
									"id": 1836,
									"name": "IncreaseLiquidity",
									"nameLocation": "1199:17:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1828,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1233:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1836,
												"src": "1217:23:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1827,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1217:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1830,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1250:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 1836,
												"src": "1242:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1829,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1832,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1269:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1836,
												"src": "1261:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1261:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1834,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1286:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1836,
												"src": "1278:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1278:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1216:78:19"
									},
									"src": "1193:102:19"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1837,
										"nodeType": "StructuredDocumentation",
										"src": "1300:419:19",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"eventSelector": "26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b4",
									"id": 1847,
									"name": "DecreaseLiquidity",
									"nameLocation": "1730:17:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1839,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1764:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "1748:23:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1748:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1841,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1781:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "1773:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1840,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1843,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1800:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "1792:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1792:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1845,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1817:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "1809:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1809:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1747:78:19"
									},
									"src": "1724:102:19"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1848,
										"nodeType": "StructuredDocumentation",
										"src": "1831:522:19",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"eventSelector": "40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f01",
									"id": 1858,
									"name": "Collect",
									"nameLocation": "2364:7:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1850,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2388:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1858,
												"src": "2372:23:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2372:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1852,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2405:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 1858,
												"src": "2397:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2397:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1854,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2424:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1858,
												"src": "2416:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1853,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2416:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1856,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2441:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1858,
												"src": "2433:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1855,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2433:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2371:78:19"
									},
									"src": "2358:92:19"
								},
								{
									"documentation": {
										"id": 1859,
										"nodeType": "StructuredDocumentation",
										"src": "2456:1157:19",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 1888,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nameLocation": "3627:9:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1861,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3645:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3637:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1860,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3637:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3636:17:19"
									},
									"returnParameters": {
										"id": 1887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1864,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "3721:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3714:12:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 1863,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3714:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3748:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3740:16:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1865,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3740:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1868,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "3778:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3770:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "3806:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3798:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1869,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3798:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1872,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "3833:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3826:10:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1871,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3826:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1874,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "3856:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3850:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1873,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3850:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "3885:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3879:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1875,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3879:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "3916:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3908:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1877,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nameLocation": "3947:24:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3939:32:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3939:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1882,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nameLocation": "3993:24:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "3985:32:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3985:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1884,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nameLocation": "4039:11:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "4031:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1883,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4031:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1886,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nameLocation": "4072:11:19",
												"nodeType": "VariableDeclaration",
												"scope": 1888,
												"src": "4064:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1885,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4064:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3700:393:19"
									},
									"scope": 2001,
									"src": "3618:476:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 1911,
									"members": [
										{
											"constant": false,
											"id": 1890,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "4136:6:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4128:14:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1889,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4128:7:19",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1892,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "4160:6:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4152:14:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1891,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4152:7:19",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1894,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "4183:3:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4176:10:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1893,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "4176:6:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1896,
											"mutability": "mutable",
											"name": "tickLower",
											"nameLocation": "4202:9:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4196:15:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1895,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4196:5:19",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1898,
											"mutability": "mutable",
											"name": "tickUpper",
											"nameLocation": "4227:9:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4221:15:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1897,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4221:5:19",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1900,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nameLocation": "4254:14:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4246:22:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1899,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4246:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1902,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nameLocation": "4286:14:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4278:22:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1901,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4278:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1904,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "4318:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4310:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1903,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4310:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1906,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "4346:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4338:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1905,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4338:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1908,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "4374:9:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4366:17:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1907,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4366:7:19",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1910,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "4401:8:19",
											"nodeType": "VariableDeclaration",
											"scope": 1911,
											"src": "4393:16:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1909,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4393:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nameLocation": "4107:10:19",
									"nodeType": "StructDefinition",
									"scope": 2001,
									"src": "4100:316:19",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1912,
										"nodeType": "StructuredDocumentation",
										"src": "4422:586:19",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "88316456",
									"id": 1926,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "5022:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1915,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "5047:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 1926,
												"src": "5027:26:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$1911_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 1914,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1913,
														"name": "MintParams",
														"nameLocations": [
															"5027:10:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1911,
														"src": "5027:10:19"
													},
													"referencedDeclaration": 1911,
													"src": "5027:10:19",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$1911_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5026:28:19"
									},
									"returnParameters": {
										"id": 1925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1918,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5126:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1926,
												"src": "5118:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5118:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1920,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "5155:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 1926,
												"src": "5147:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1919,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5147:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1922,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5186:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1926,
												"src": "5178:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5178:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1924,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5215:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1926,
												"src": "5207:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1923,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5207:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5104:128:19"
									},
									"scope": 2001,
									"src": "5013:220:19",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 1939,
									"members": [
										{
											"constant": false,
											"id": 1928,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "5288:7:19",
											"nodeType": "VariableDeclaration",
											"scope": 1939,
											"src": "5280:15:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1927,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5280:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1930,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nameLocation": "5313:14:19",
											"nodeType": "VariableDeclaration",
											"scope": 1939,
											"src": "5305:22:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1929,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5305:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1932,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nameLocation": "5345:14:19",
											"nodeType": "VariableDeclaration",
											"scope": 1939,
											"src": "5337:22:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1931,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5337:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1934,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "5377:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 1939,
											"src": "5369:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1933,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5369:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1936,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "5405:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 1939,
											"src": "5397:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1935,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5397:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1938,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "5433:8:19",
											"nodeType": "VariableDeclaration",
											"scope": 1939,
											"src": "5425:16:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1937,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5425:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nameLocation": "5246:23:19",
									"nodeType": "StructDefinition",
									"scope": 2001,
									"src": "5239:209:19",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1940,
										"nodeType": "StructuredDocumentation",
										"src": "5454:821:19",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 1952,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nameLocation": "6289:17:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1943,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "6340:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "6307:39:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1939_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 1942,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1941,
														"name": "IncreaseLiquidityParams",
														"nameLocations": [
															"6307:23:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1939,
														"src": "6307:23:19"
													},
													"referencedDeclaration": 1939,
													"src": "6307:23:19",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1939_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6306:41:19"
									},
									"returnParameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1946,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "6419:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "6411:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1945,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6411:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1948,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "6450:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "6442:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1947,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6442:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1950,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "6479:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "6471:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6471:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6397:99:19"
									},
									"scope": 2001,
									"src": "6280:217:19",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 1963,
									"members": [
										{
											"constant": false,
											"id": 1954,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "6552:7:19",
											"nodeType": "VariableDeclaration",
											"scope": 1963,
											"src": "6544:15:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1953,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6544:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1956,
											"mutability": "mutable",
											"name": "liquidity",
											"nameLocation": "6577:9:19",
											"nodeType": "VariableDeclaration",
											"scope": 1963,
											"src": "6569:17:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1955,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6569:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1958,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "6604:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 1963,
											"src": "6596:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1957,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6596:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1960,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "6632:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 1963,
											"src": "6624:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1959,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6624:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1962,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "6660:8:19",
											"nodeType": "VariableDeclaration",
											"scope": 1963,
											"src": "6652:16:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1961,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6652:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nameLocation": "6510:23:19",
									"nodeType": "StructDefinition",
									"scope": 2001,
									"src": "6503:172:19",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1964,
										"nodeType": "StructuredDocumentation",
										"src": "6681:702:19",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"
									},
									"functionSelector": "0c49ccbe",
									"id": 1974,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nameLocation": "7397:17:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1967,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "7448:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 1974,
												"src": "7415:39:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1963_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 1966,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1965,
														"name": "DecreaseLiquidityParams",
														"nameLocations": [
															"7415:23:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1963,
														"src": "7415:23:19"
													},
													"referencedDeclaration": 1963,
													"src": "7415:23:19",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$1963_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7414:41:19"
									},
									"returnParameters": {
										"id": 1973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1970,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "7514:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1974,
												"src": "7506:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7506:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1972,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "7531:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1974,
												"src": "7523:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7523:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7505:34:19"
									},
									"scope": 2001,
									"src": "7388:152:19",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 1983,
									"members": [
										{
											"constant": false,
											"id": 1976,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "7585:7:19",
											"nodeType": "VariableDeclaration",
											"scope": 1983,
											"src": "7577:15:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1975,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7577:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1978,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "7610:9:19",
											"nodeType": "VariableDeclaration",
											"scope": 1983,
											"src": "7602:17:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1977,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7602:7:19",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1980,
											"mutability": "mutable",
											"name": "amount0Max",
											"nameLocation": "7637:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 1983,
											"src": "7629:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1979,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7629:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1982,
											"mutability": "mutable",
											"name": "amount1Max",
											"nameLocation": "7665:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 1983,
											"src": "7657:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 1981,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7657:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nameLocation": "7553:13:19",
									"nodeType": "StructDefinition",
									"scope": 2001,
									"src": "7546:136:19",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1984,
										"nodeType": "StructuredDocumentation",
										"src": "7688:489:19",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 1994,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nameLocation": "8191:7:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "8222:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "8199:29:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$1983_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 1986,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1985,
														"name": "CollectParams",
														"nameLocations": [
															"8199:13:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1983,
														"src": "8199:13:19"
													},
													"referencedDeclaration": 1983,
													"src": "8199:13:19",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$1983_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8198:31:19"
									},
									"returnParameters": {
										"id": 1993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "8264:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "8256:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8256:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1992,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "8281:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "8273:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1991,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8273:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8255:34:19"
									},
									"scope": 2001,
									"src": "8182:108:19",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1995,
										"nodeType": "StructuredDocumentation",
										"src": "8296:213:19",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 2000,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "8523:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1997,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8536:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 2000,
												"src": "8528:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1996,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8528:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8527:17:19"
									},
									"returnParameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8561:0:19"
									},
									"scope": 2001,
									"src": "8514:48:19",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2002,
							"src": "545:8019:19",
							"usedErrors": [],
							"usedEvents": [
								15,
								24,
								33,
								1836,
								1847,
								1858
							]
						}
					],
					"src": "45:8520:19"
				},
				"id": 19
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							2017
						]
					},
					"id": 2018,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2003,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPeripheryImmutableState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2004,
								"nodeType": "StructuredDocumentation",
								"src": "71:91:20",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 2017,
							"linearizedBaseContracts": [
								2017
							],
							"name": "IPeripheryImmutableState",
							"nameLocation": "172:24:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2005,
										"nodeType": "StructuredDocumentation",
										"src": "203:57:20",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 2010,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nameLocation": "274:7:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2006,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:20"
									},
									"returnParameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "307:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:20"
									},
									"scope": 2017,
									"src": "265:51:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2011,
										"nodeType": "StructuredDocumentation",
										"src": "322:40:20",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 2016,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nameLocation": "376:5:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:2:20"
									},
									"returnParameters": {
										"id": 2015,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2014,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2016,
												"src": "407:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2013,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "406:9:20"
									},
									"scope": 2017,
									"src": "367:49:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2018,
							"src": "162:256:20",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:374:20"
				},
				"id": 20
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							2043
						]
					},
					"id": 2044,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2019,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:21"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPeripheryPayments",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2020,
								"nodeType": "StructuredDocumentation",
								"src": "71:92:21",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 2043,
							"linearizedBaseContracts": [
								2043
							],
							"name": "IPeripheryPayments",
							"nameLocation": "173:18:21",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2021,
										"nodeType": "StructuredDocumentation",
										"src": "198:302:21",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 2028,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nameLocation": "514:11:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2023,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nameLocation": "534:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 2028,
												"src": "526:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2025,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "557:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 2028,
												"src": "549:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2024,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "525:42:21"
									},
									"returnParameters": {
										"id": 2027,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "584:0:21"
									},
									"scope": 2043,
									"src": "505:80:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2029,
										"nodeType": "StructuredDocumentation",
										"src": "591:225:21",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 2032,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nameLocation": "830:9:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2030,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:2:21"
									},
									"returnParameters": {
										"id": 2031,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:21"
									},
									"scope": 2043,
									"src": "821:38:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2033,
										"nodeType": "StructuredDocumentation",
										"src": "865:427:21",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 2042,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nameLocation": "1306:10:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1334:5:21",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "1326:13:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1326:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nameLocation": "1357:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "1349:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2039,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1388:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 2042,
												"src": "1380:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1380:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1316:87:21"
									},
									"returnParameters": {
										"id": 2041,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1420:0:21"
									},
									"scope": 2043,
									"src": "1297:124:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2044,
							"src": "163:1260:21",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1379:21"
				},
				"id": 21
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IPoolInitializer.sol",
					"exportedSymbols": {
						"IPoolInitializer": [
							2062
						]
					},
					"id": 2063,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2045,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:22"
						},
						{
							"id": 2046,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:22"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolInitializer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2047,
								"nodeType": "StructuredDocumentation",
								"src": "91:194:22",
								"text": "@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."
							},
							"fullyImplemented": false,
							"id": 2062,
							"linearizedBaseContracts": [
								2062
							],
							"name": "IPoolInitializer",
							"nameLocation": "295:16:22",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2048,
										"nodeType": "StructuredDocumentation",
										"src": "318:648:22",
										"text": "@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
									},
									"functionSelector": "13ead562",
									"id": 2061,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nameLocation": "980:34:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2050,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "1032:6:22",
												"nodeType": "VariableDeclaration",
												"scope": 2061,
												"src": "1024:14:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2049,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2052,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "1056:6:22",
												"nodeType": "VariableDeclaration",
												"scope": 2061,
												"src": "1048:14:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2051,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1048:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2054,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1079:3:22",
												"nodeType": "VariableDeclaration",
												"scope": 2061,
												"src": "1072:10:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2053,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1072:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2056,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "1100:12:22",
												"nodeType": "VariableDeclaration",
												"scope": 2061,
												"src": "1092:20:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2055,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1092:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:104:22"
									},
									"returnParameters": {
										"id": 2060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2059,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1153:4:22",
												"nodeType": "VariableDeclaration",
												"scope": 2061,
												"src": "1145:12:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2058,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1145:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1144:14:22"
									},
									"scope": 2062,
									"src": "971:188:22",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2063,
							"src": "285:876:22",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1117:22"
				},
				"id": 22
			}
		}
	}
}